<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="WPS_RS" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="MACHINES" elementType="Argument">
            <stringProp name="Argument.name">MACHINES</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\apache-jmeter-2.13\lib\mysql-connector-java-5.1.23-bin.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="START RS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1414062625000</longProp>
        <longProp name="ThreadGroup.end_time">1414062625000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="STUDIO" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="STUDIO_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">STUDIO_NUMBER</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS HOSTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_HOST_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_HOST_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_1</stringProp>
              <stringProp name="Argument.value">https://studio-perf${STUDIO_NUMBER}.qa.xyleme.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS_CLIENTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_CLIENT_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_CLIENT_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_1</stringProp>
              <stringProp name="Argument.value">studio-perf${STUDIO_NUMBER}.qa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start RS" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SPS" elementType="Argument">
                <stringProp name="Argument.name">SPS</stringProp>
                <stringProp name="Argument.value">https://sps-perf.qa.xyleme.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="N_USERS" elementType="Argument">
                <stringProp name="Argument.name">N_USERS</stringProp>
                <stringProp name="Argument.value">50</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VU_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">VU_PREFIX</stringProp>
                <stringProp name="Argument.value">perf.user_</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="Argument">
                <stringProp name="Argument.name">PASSWORD</stringProp>
                <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="START_RS_N" elementType="Argument">
                <stringProp name="Argument.name">START_RS_N</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WPS_RS_FOLDER_NAME" elementType="Argument">
                <stringProp name="Argument.name">WPS_RS_FOLDER_NAME</stringProp>
                <stringProp name="Argument.value">WpsReviewSessionTestsFolder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="OUTPUT_PATH" elementType="Argument">
                <stringProp name="Argument.name">OUTPUT_PATH</stringProp>
                <stringProp name="Argument.value">D:/Xyleme/performance/products/xpe/review_session/parsedXmlInfo/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="MAX_REVIEWERS_ALLOWED" elementType="Argument">
                <stringProp name="Argument.name">MAX_REVIEWERS_ALLOWED</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="REVIEWERS_TOTAL" elementType="Argument">
                <stringProp name="Argument.name">REVIEWERS_TOTAL</stringProp>
                <stringProp name="Argument.value">9</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="On each studio" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LCMS_CLIENT_N}</stringProp>
          </LoopController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">default</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">iteration</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set LCMS_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;LCMS_CLIENT&quot;, vars.get(&quot;LCMS_CLIENT_&quot; + vars.get(&quot;iteration&quot;)));
vars.put(&quot;LCMS&quot;, vars.get(&quot;LCMS_HOST_&quot; + vars.get(&quot;iteration&quot;)));</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userLastName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userEmail</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
                <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                    <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Wizard" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getDocumentsInFolder_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.SDocProperties;
import com.xyleme.sdoc.client.FolderInfo;
import com.xyleme.sdoc.client.SDocInfo;
import com.xyleme.sdoc.client.search.PropertyRangeTerm;
import com.xyleme.sdoc.client.search.SDocQuery;
import com.xyleme.sdoc.client.SSConstants;
import com.xyleme.sdoc.client.properties.FragmentProperties;

String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String wpsReviewSessionFolder = vars.get(&quot;WPS_RS_FOLDER_NAME&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
FolderInfo fInfo = client.folderget(new FolderInfo(), wpsReviewSessionFolder);
PropertyRangeTerm pt = new PropertyRangeTerm(FragmentProperties.FRAGMENT_ROOT_OF_DOCUMENT, true, true);
SDocQuery sQuery = new SDocQuery(pt, null, null);
SDocInfo sInfo = client.search(fInfo, sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
int j = 0;
int documentsTotal = sInfo.getGuids().size();
for(String guid: sInfo.getGuids()){
	SDocInfo sDocInfo = client.get(guid, null, SSConstants.GET_PROPS, SSConstants.FULL_RESOLVE);
	SDocProperties docProperties = sDocInfo.getProperties(guid);
	boolean inReview = docProperties.getBooleanProperty(FragmentProperties.PROP_IN_REVIEW_3_6) ? true : false;
	if(!inReview){
		j++;
		vars.put(&quot;documentGuid_&quot; + j, guid);
//		log.info(vars.get(&quot;LCMS&quot;) + &quot;: processed &quot; + j + &quot;/&quot; + documentsTotal + &quot;: &quot; + guid);
	}
}
client.logout();
vars.put(&quot;documentsTotal&quot;, documentsTotal + &quot;&quot;);
vars.put(&quot;DOCUMENTS_RS_N&quot;, j + &quot;&quot;);
log.info(vars.get(&quot;LCMS&quot;) + &quot;: gathering guids completed, documents RS-ready &quot; + j + &quot;/&quot; + documentsTotal + &quot;; RS to start &quot; + vars.get(&quot;START_RS_N&quot;));</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="evaluateCondition_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">int startRsN = Integer.parseInt(vars.get(&quot;START_RS_N&quot;));
int documentsRsN = Integer.parseInt(vars.get(&quot;DOCUMENTS_RS_N&quot;));
if(startRsN &lt;= documentsRsN){
	vars.putObject(&quot;continueWithRS&quot;, true);
} else {
	vars.putObject(&quot;continueWithRS&quot;, false);
	log.info(&quot;Number of available documents(&quot; + documentsRsN + &quot;) is less than number of requested RS(&quot; + startRsN + &quot;)&quot;);
}</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;continueWithRS&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="initiateIteration_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;startRSIteration&quot;, 1 + &quot;&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">true</boolProp>
                    <stringProp name="LoopController.loops">${START_RS_N}</stringProp>
                  </LoopController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_get DOCUMENT_AUX" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.xyleme.sdoc.client.SDocService;

String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
vars.putObject(&quot;client&quot;, client);
vars.put(&quot;DOCUMENT_GUID&quot;, vars.get(&quot;documentGuid_&quot; + vars.get(&quot;startRSIteration&quot;)));
//log.info(&quot;RS: &quot; + vars.get(&quot;DOCUMENT_GUID&quot;));</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If DOCUMENT_GUID" enabled="true">
                      <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;DOCUMENT_GUID&quot;))}&quot; != &quot;null&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_document" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setFalse_RevWiz_output_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;RevWiz_output&quot;, &quot;false&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_outputprofiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${DOCUMENT_GUID}/outputprofiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random output" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray outputs = JsonArray.readFrom(jsonString);
Random rnd = new Random();
if(outputs.size() &gt; 0){
	JsonObject output = outputs.get(rnd.nextInt(outputs.size())).asObject();
	vars.put(&quot;output&quot;, &quot;&quot; + output);
} else {
	vars.put(&quot;output&quot;, &quot;[]&quot;);
}
vars.put(&quot;RevWiz_output&quot;, &quot;true&quot;);</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevWiz_outputprofilesCheckerFalse" enabled="true">
                        <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevWiz_output&quot;))}&quot; == &quot;false&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_outputprofilesChecker" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                      </hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setFalse_RevWiz_reviewers_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;RevWiz_reviewers&quot;, &quot;false&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_principals" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/principals</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random reviewer" enabled="false">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
int maxReviewersAllowed = Integer.parseInt(vars.get(&quot;MAX_REVIEWERS_ALLOWED&quot;));
String jsonString = prev.getResponseDataAsString();
JsonArray allReviewers = JsonArray.readFrom(jsonString);
JsonArray reviewers = new JsonArray();
Random rnd = new Random();
JsonObject reviewer;
String reviewerName;
//choose proper reviewer
boolean properReviewer = false;
int allReviewersPoolSize = allReviewers.size();
for(int i = 1; i &lt;= allReviewersPoolSize; i++){
	reviewer = allReviewers.get(i - 1).asObject();
	reviewerName = reviewer.get(&quot;name&quot;).asString();
	if(reviewers.size() &lt; maxReviewersAllowed){
		if(reviewerName.startsWith(vars.get(&quot;VU_PREFIX&quot;))){
			boolean isGroup = reviewer.get(&quot;isGroup&quot;).asBoolean();
			JsonObject reviewerJson = new JsonObject();
			reviewerJson.add(&quot;name&quot;, reviewerName);
			reviewerJson.add(&quot;isGroup&quot;, isGroup);
			reviewers.add(reviewerJson);
		}
	} else {
		break;
	}
}
vars.put(&quot;reviewers&quot;, &quot;&quot; + reviewers);
vars.put(&quot;RevWiz_reviewers&quot;, &quot;true&quot;);
log.info(&quot;&quot; + reviewers);</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get first 10 reviewers" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.eclipsesource.json.*;
int maxReviewersAllowed = Integer.parseInt(vars.get(&quot;MAX_REVIEWERS_ALLOWED&quot;));
JsonArray reviewers = new JsonArray();
for(int i = 1; i &lt;= maxReviewersAllowed; i++){
	JsonObject reviewerJson = new JsonObject();
	reviewerJson.add(&quot;name&quot;, vars.get(&quot;VU_PREFIX&quot;) + i);
	reviewerJson.add(&quot;isGroup&quot;, false);
	reviewers.add(reviewerJson);
}
vars.put(&quot;reviewers&quot;, &quot;&quot; + reviewers);
vars.put(&quot;RevWiz_reviewers&quot;, &quot;true&quot;);</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevWiz_principalsCheckerFalse" enabled="true">
                        <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevWiz_reviewers&quot;))}&quot; == &quot;false&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_principalsChecker" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                      </hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setTrueCondition_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">boolean noOutput = vars.get(&quot;output&quot;).equals(&quot;[]&quot;);
if(vars.get(&quot;RevWiz_output&quot;).equals(&quot;true&quot;) &amp;&amp; vars.get(&quot;RevWiz_reviewers&quot;).equals(&quot;true&quot;) &amp;&amp; !noOutput){
	vars.put(&quot;goReviewSession&quot;, &quot;true&quot;);
} else {
	vars.put(&quot;goReviewSession&quot;, &quot;false&quot;);
}</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="goReviewSession" enabled="true">
                        <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;goReviewSession&quot;))}&quot; == &quot;true&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_set endDate_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
Calendar c = Calendar.getInstance();
c.setTime(new Date());
c.add(Calendar.DATE, 10);
SimpleDateFormat formatter = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
vars.put(&quot;endDate&quot;, &quot;&quot; + formatter.format(c.getTime()));</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_forceCheckIn_SDocAPI_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
SDocService client = vars.getObject(&quot;client&quot;);
String guid = vars.get(&quot;DOCUMENT_GUID&quot;);
try {
	client.forcecheckin(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (Exception e) {
	ResponseCode = 400;
	IsSuccess = false;
	return false;
}</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_checkOut_SDocAPI_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.exceptions.ServerException;
SDocService client = vars.getObject(&quot;client&quot;);
String guid = vars.get(&quot;DOCUMENT_GUID&quot;);
try {
	client.checkout(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (ServerException e) {
	ResponseCode = 400;
	IsSuccess = false;
     return false;
}</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_startReview_SPS" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;documentGuid&quot;:&quot;${DOCUMENT_GUID}&quot;,&quot;name&quot;:&quot;PerfReviewWizard_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;createdBy&quot;:&quot;${USERNAME}&quot;,&quot;assignedBy&quot;:&quot;${USERNAME}&quot;,&quot;sendReminders&quot;:true,&quot;instructions&quot;:&quot;&quot;,&quot;reviewers&quot;:${reviewers},&quot;endDate&quot;:&quot;${endDate}&quot;,&quot;outputProfile&quot;:${output}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="reviewModeVerifier" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">inReviewMode</stringProp>
                            <stringProp name="RegexExtractor.regex">Document with guid (.+?) is allready in review mode</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">true</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="extract RS guid" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey"></stringProp>
                            <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
JsonObject review = JsonObject.readFrom(jsonString);
String guid = review.asObject().get(&quot;guid&quot;).asString();
vars.put(&quot;reviewGuid_&quot; + vars.get(&quot;startRSIteration&quot;), guid);</stringProp>
                          </JSR223PostProcessor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="incIteration_AUX" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">int startRSIteration = Integer.parseInt(vars.get(&quot;startRSIteration&quot;));
startRSIteration++;
vars.put(&quot;startRSIteration&quot;, startRSIteration + &quot;&quot;);</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WaitUntilOpened" enabled="true"/>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="initiateOpenedRSCondition" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">vars.putObject(&quot;openedRSCondition&quot;, false);
int startRsN = Integer.parseInt(vars.get(&quot;START_RS_N&quot;));
Set openedRS = new HashSet();
for(int i = 1; i &lt;= startRsN; i++){
	openedRS.add(vars.get(&quot;reviewGuid_&quot; + i));
}
vars.putObject(&quot;openedRS&quot;, openedRS);
</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                      <stringProp name="WhileController.condition">${__BeanShell(!vars.getObject(&quot;openedRSCondition&quot;))}</stringProp>
                    </WhileController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_getList_SPS" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=false&amp;status=open</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check review presence" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
HashSet openedRS = vars.getObject(&quot;openedRS&quot;);
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
for(int i = 0; i &lt;= reviews.size() - 1; i++){
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;open&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		if(openedRS.contains(guid)){
			openedRS.remove(guid);
		}
	}
	if(openedRS.isEmpty()){
		vars.putObject(&quot;openedRSCondition&quot;, true);
		break;
	}
}
vars.putObject(&quot;openedRS&quot;, openedRS);</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">5000</stringProp>
                      </TestAction>
                      <hashTree/>
                    </hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reporter" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import java.io.*;
String studioNumber = vars.get(&quot;STUDIO_NUMBER&quot;);
File outputFile = new File(vars.get(&quot;OUTPUT_PATH&quot;) + &quot;ReviewSessionInfo_&quot; + studioNumber + &quot;.txt&quot;);
if (outputFile.exists()) {
	outputFile.delete();
}
FileWriter outputWriter = new FileWriter(outputFile);
int startRsN = Integer.parseInt(vars.get(&quot;START_RS_N&quot;));
outputWriter.write(&quot;lcms,lcms_client,documentGuid,reviewGuid\n&quot;);
for(int i = 1; i &lt;= startRsN; i++){
	outputWriter.write(vars.get(&quot;LCMS&quot;) + &quot;,&quot; + vars.get(&quot;LCMS_CLIENT&quot;) + &quot;,&quot; + vars.get(&quot;documentGuid_&quot; + i) + &quot;,&quot; + vars.get(&quot;reviewGuid_&quot; + i) + &quot;\n&quot;);
}
outputWriter.close();
log.info(vars.get(&quot;LCMS&quot;) + &quot;: documents RS-ready(&quot; + vars.get(&quot;DOCUMENTS_RS_N&quot;) + &quot;)/documents total(&quot; + vars.get(&quot;documentsTotal&quot;) + &quot;)/RS started(&quot; + vars.get(&quot;START_RS_N&quot;) + &quot;)&quot;);</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Reviewers" enabled="true"/>
                  <hashTree>
                    <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach RS" enabled="true">
                      <stringProp name="ForeachController.inputVal">reviewGuid_</stringProp>
                      <stringProp name="ForeachController.returnVal">reviewGuidOutput</stringProp>
                      <boolProp name="ForeachController.useSeparator">false</boolProp>
                    </ForeachController>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${reviewGuidOutput}&quot; != &quot;null&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="initAddReviewerIteration" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">vars.put(&quot;addReviewerIteration&quot;, &quot;2&quot;);</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                          <boolProp name="LoopController.continue_forever">true</boolProp>
                          <stringProp name="LoopController.loops">${REVIEWERS_TOTAL}</stringProp>
                        </LoopController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_getReview" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewGuidOutput}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="extract review info" enabled="true">
                              <stringProp name="scriptLanguage">groovy</stringProp>
                              <stringProp name="parameters"></stringProp>
                              <stringProp name="filename"></stringProp>
                              <stringProp name="cacheKey"></stringProp>
                              <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
JsonObject review = JsonObject.readFrom(jsonString);
String documentGuid = review.asObject().get(&quot;documentGuid&quot;).asString();
String name = review.asObject().get(&quot;name&quot;).asString();
//String endDate = review.asObject().get(&quot;endDate&quot;).asString();
vars.put(&quot;documentGuid&quot;, documentGuid);
vars.put(&quot;name&quot;, name);
//vars.put(&quot;endDate&quot;, endDate);
if(review.asObject().get(&quot;sendReminders&quot;).asBoolean()){
	vars.put(&quot;sendReminders&quot;, &quot;true&quot;);
} else {
	vars.put(&quot;sendReminders&quot;, &quot;false&quot;);
}
JsonArray reviewers = review.asObject().get(&quot;reviewers&quot;).asArray();
vars.putObject(&quot;reviewers&quot;, reviewers);
vars.put(&quot;RevAct_reviewInfo&quot;, &quot;true&quot;);</stringProp>
                            </JSR223PostProcessor>
                            <hashTree/>
                          </hashTree>
                          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RevAct_Edit_modifyReviewers" enabled="true"/>
                          <hashTree>
                            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_randomReviewer_AUX" enabled="true">
                              <stringProp name="scriptLanguage">groovy</stringProp>
                              <stringProp name="parameters"></stringProp>
                              <stringProp name="filename"></stringProp>
                              <stringProp name="cacheKey"></stringProp>
                              <stringProp name="script">vars.put(&quot;RevAct_randomReviewer&quot;, &quot;false&quot;);</stringProp>
                            </JSR223Sampler>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_principals" enabled="true">
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain"></stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol"></stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/principals</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get next reviewer" enabled="true">
                                <stringProp name="scriptLanguage">groovy</stringProp>
                                <stringProp name="parameters"></stringProp>
                                <stringProp name="filename"></stringProp>
                                <stringProp name="cacheKey"></stringProp>
                                <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
int addReviewerIteration = Integer.parseInt(vars.get(&quot;addReviewerIteration&quot;));
HashSet oldReviewersNames = new HashSet();
JsonArray oldReviewers = vars.getObject(&quot;reviewers&quot;);
JsonObject reviewerJson = new JsonObject();
reviewerJson.add(&quot;name&quot;, vars.get(&quot;VU_PREFIX&quot;) + addReviewerIteration);
reviewerJson.add(&quot;isGroup&quot;, false);
oldReviewers.add(reviewerJson);
vars.put(&quot;reviewersJsonStr&quot;, &quot;&quot; + oldReviewers);
vars.put(&quot;RevAct_randomReviewer&quot;, &quot;true&quot;);</stringProp>
                              </JSR223PostProcessor>
                              <hashTree/>
                            </hashTree>
                            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_principalsCheckerFalse" enabled="true">
                              <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_randomReviewer&quot;))}&quot; == &quot;false&quot;</stringProp>
                              <boolProp name="IfController.evaluateAll">false</boolProp>
                            </IfController>
                            <hashTree>
                              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Edit_principalsChecker" enabled="true">
                                <stringProp name="scriptLanguage">groovy</stringProp>
                                <stringProp name="parameters"></stringProp>
                                <stringProp name="filename"></stringProp>
                                <stringProp name="cacheKey"></stringProp>
                                <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                              </JSR223Sampler>
                              <hashTree/>
                            </hashTree>
                            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_principalsCheckerTrue" enabled="true">
                              <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_randomReviewer&quot;))}&quot; == &quot;true&quot;</stringProp>
                              <boolProp name="IfController.evaluateAll">false</boolProp>
                            </IfController>
                            <hashTree>
                              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_modifyReviewers_SPS" enabled="true">
                                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                  <collectionProp name="Arguments.arguments">
                                    <elementProp name="" elementType="HTTPArgument">
                                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;reviewers&quot;,&quot;value&quot;:${reviewersJsonStr}}</stringProp>
                                      <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain"></stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol"></stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewGuidOutput}</stringProp>
                                <stringProp name="HTTPSampler.method">PUT</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              </HTTPSamplerProxy>
                              <hashTree>
                                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                  <collectionProp name="HeaderManager.headers">
                                    <elementProp name="" elementType="Header">
                                      <stringProp name="Header.name">Content-Type</stringProp>
                                      <stringProp name="Header.value">application/json</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </HeaderManager>
                                <hashTree/>
                              </hashTree>
                            </hashTree>
                          </hashTree>
                          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="incAddReviewerIteration" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey"></stringProp>
                            <stringProp name="script">int addReviewerIteration = Integer.parseInt(vars.get(&quot;addReviewerIteration&quot;));
addReviewerIteration++;
vars.put(&quot;addReviewerIteration&quot;, &quot;&quot; + addReviewerIteration);
int maxReviewersAllowed = Integer.parseInt(vars.get(&quot;MAX_REVIEWERS_ALLOWED&quot;));
int reviewersTotal = Integer.parseInt(vars.get(&quot;REVIEWERS_TOTAL&quot;));
String reviewGuidOutput = vars.get(&quot;reviewGuidOutput&quot;);
log.info(reviewGuidOutput + &quot;: reviewers added: &quot; + (addReviewerIteration - 1) + &quot;/&quot; + (maxReviewersAllowed + reviewersTotal));</stringProp>
                          </JSR223Sampler>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">multipart/form-data</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Clone JMX" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1457705401000</longProp>
        <longProp name="ThreadGroup.end_time">1457705401000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OUTPUT_PATH" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_PATH</stringProp>
              <stringProp name="Argument.value">D:/Xyleme/performance/products/xpe/review_session/parsedXmlInfo/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loopNumber" elementType="Argument">
              <stringProp name="Argument.name">loopNumber</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="machineNumber" elementType="Argument">
              <stringProp name="Argument.name">machineNumber</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="reviewsTotal" elementType="Argument">
              <stringProp name="Argument.name">reviewsTotal</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="reviewersPerReview" elementType="Argument">
              <stringProp name="Argument.name">reviewersPerReview</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OLD" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="readParameters" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
log.info(&quot;reading review sessions info ...&quot;);
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;ReviewSessionInfo.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
HashMap rsInfo = new HashMap();
String[] keys = reader.readLine().split(&quot;,&quot;);
if (keys != null) {
	String[] dataParts;
	String line;
	while ((line = reader.readLine()) != null) {
		HashMap row = new HashMap();
		dataParts = line.split(&quot;,&quot;);
		for (int i = 0; i &lt; keys.length; i++) {
			row.put(keys[i], dataParts[i]);
		}
		HashMap reviewInfo = new HashMap();
		reviewInfo.put(&quot;lcms&quot;, row.get(&quot;lcms&quot;));
		reviewInfo.put(&quot;documentGuid&quot;, row.get(&quot;documentGuid&quot;));
		reviewInfo.put(&quot;reviewGuid&quot;, row.get(&quot;reviewGuid&quot;));
		if(!rsInfo.containsKey(row.get(&quot;lcms_client&quot;))){
			ArrayList reviews = new ArrayList();
			reviews.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), reviews);
		} else {
			ArrayList oldList = rsInfo.get(row.get(&quot;lcms_client&quot;));
			oldList.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), oldList);
		}
	}
}
reader.close();
vars.putObject(&quot;rsInfo&quot;, rsInfo);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="cloneJMX" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;
HashMap rsInfo = vars.getObject(&quot;rsInfo&quot;);
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;rsTemplate.jmx&quot;);
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
try {
	File jmxFile = new File(path + &quot;ReviewSessionPT.jmx&quot;);
	if (jmxFile.exists()) {
		jmxFile.delete();
	}
	BufferedReader reader = new BufferedReader(new FileReader(file));
	DocumentBuilder builder = factory.newDocumentBuilder();
	StringBuilder xmlStringBuilder = new StringBuilder();
	String line;
	while ((line = reader.readLine()) != null) {
		xmlStringBuilder.append(line);
	}
	reader.close();
	ByteArrayInputStream input = new ByteArrayInputStream(xmlStringBuilder.toString().getBytes(&quot;UTF-8&quot;));
	Document doc = builder.parse(input);
	Element root = doc.getDocumentElement();
	//create ThreadGroup for each review session
	int globalRsNumber = 0;
	int argumentsIterator = 3;
	int beforeResultCollectorIterator = 5;
	Node parent = root.getChildNodes().item(1).getChildNodes().item(3);
	Node threadGroup = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(1);
	Node separator = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(2);
	Node hashTree = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(3);
	for(String key: rsInfo.keySet()){
		ArrayList reviews = rsInfo.get(key);
		for(int i = 1; i &lt;= reviews.size(); i++){
			globalRsNumber++;
			String lcms = reviews.get(i - 1).get(&quot;lcms&quot;);
			String documentGuid = reviews.get(i - 1).get(&quot;documentGuid&quot;);
			String reviewGuid = reviews.get(i - 1).get(&quot;reviewGuid&quot;);
			Node arguments = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(argumentsIterator).getChildNodes().item(1).getChildNodes().item(1);
			//set attributes
			arguments.getChildNodes().item(1).getChildNodes().item(3).setTextContent(lcms);
			arguments.getChildNodes().item(3).getChildNodes().item(3).setTextContent(reviewGuid);
			arguments.getChildNodes().item(5).getChildNodes().item(3).setTextContent(documentGuid);
			Node groovySampler = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(argumentsIterator).getChildNodes().item(5).getChildNodes().item(9);
			String groovyScript = &quot;vars.put(\&quot;LCMS_HOST\&quot;, \&quot;&quot; + lcms + &quot;\&quot;);vars.put(\&quot;RSESSIONGUID\&quot;, \&quot;&quot; + reviewGuid + &quot;\&quot;);vars.put(\&quot;GUID\&quot;, \&quot;&quot; + documentGuid + &quot;\&quot;);&quot;;
			groovySampler.setTextContent(groovyScript);
			//clone nodes
			Node beforeResultCollector = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(beforeResultCollectorIterator);
			Node cloneHashTree = hashTree.cloneNode(true);
			Node cloneSeparator = separator.cloneNode(true);
			Node cloneThreadGroup = threadGroup.cloneNode(true);
			//change ThreadGroup title
			cloneThreadGroup.getAttributes().getNamedItem(&quot;testname&quot;).setTextContent(&quot;GO RS &quot; + globalRsNumber);
			//insert nodes
			Node newSeparator = parent.insertBefore(cloneSeparator, beforeResultCollector);
			Node newHashTree = parent.insertBefore(cloneHashTree, newSeparator);
			newSeparator = parent.insertBefore(cloneSeparator.cloneNode(true), newHashTree);
			Node newThreadGroup = parent.insertBefore(cloneThreadGroup, newSeparator);
			argumentsIterator = argumentsIterator + 4;
			beforeResultCollectorIterator = beforeResultCollectorIterator + 4;
		}
	}
	threadGroup.getAttributes().getNamedItem(&quot;enabled&quot;).setTextContent(&quot;false&quot;);
	//write to file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(root);
	StreamResult result = new StreamResult(jmxFile);
	transformer.transform(source, result);
} catch (ParserConfigurationException e) {
	e.printStackTrace();
} catch (UnsupportedEncodingException e) {
	e.printStackTrace();
} catch (SAXException e) {
	e.printStackTrace();
} catch (IOException e) {
	e.printStackTrace();
} catch (TransformerException e) {
	e.printStackTrace();
}
log.info(&quot;jmx-file has been prepared at [&quot; + path + &quot;/ReviewSessionPT.jmx]&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="readParameters" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
log.info(&quot;reading review sessions info ...&quot;);
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;ReviewSessionInfo.txt&quot;);
ArrayList reviews = new ArrayList();
try {
	BufferedReader reader = new BufferedReader(new FileReader(file));
	String[] keys = reader.readLine().split(&quot;,&quot;);
	if (keys != null) {
		String[] dataParts;
		String line;
		while ((line = reader.readLine()) != null) {
			HashMap row = new HashMap();
			dataParts = line.split(&quot;,&quot;);
			for (int i = 0; i &lt; keys.length; i++) {
				row.put(keys[i], dataParts[i]);
			}
			HashMap reviewInfo = new HashMap();
			reviewInfo.put(&quot;lcms&quot;, row.get(&quot;lcms&quot;));
			reviewInfo.put(&quot;documentGuid&quot;, row.get(&quot;documentGuid&quot;));
			reviewInfo.put(&quot;reviewGuid&quot;, row.get(&quot;reviewGuid&quot;));
			reviews.add(reviewInfo);
		}
	}
	reader.close();
} catch (FileNotFoundException e) {
	e.printStackTrace();
} catch (IOException e) {
	e.printStackTrace();
}
vars.putObject(&quot;reviews&quot;, reviews);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${machineNumber}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iterator" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">iteration</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="cloneJMX" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

int loopNumber = Integer.parseInt(vars.get(&quot;loopNumber&quot;));
int machineNumber = Integer.parseInt(vars.get(&quot;machineNumber&quot;));
int reviewsTotal = Integer.parseInt(vars.get(&quot;reviewsTotal&quot;));
int reviewersPerReview = Integer.parseInt(vars.get(&quot;reviewersPerReview&quot;));
int threadsPerMachine = reviewsTotal * reviewersPerReview / machineNumber;
int rsPerMachineNumber = reviewsTotal / machineNumber;
int iteration = Integer.parseInt(vars.get(&quot;iteration&quot;));
ArrayList reviews = vars.getObject(&quot;reviews&quot;);
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;rsTemplateSingleThread.jmx&quot;);
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
try {
	BufferedReader reader = new BufferedReader(new FileReader(file));
	DocumentBuilder builder = factory.newDocumentBuilder();
	StringBuilder xmlStringBuilder = new StringBuilder();
	String line;
	while ((line = reader.readLine()) != null) {
		xmlStringBuilder.append(line);
	}
	reader.close();
	ByteArrayInputStream input = new ByteArrayInputStream(xmlStringBuilder.toString().getBytes(&quot;UTF-8&quot;));
	Document doc = builder.parse(input);
	Element root = doc.getDocumentElement();
	File jmxFile = new File(path + &quot;ReviewSessionPTSingleThread_&quot; + (iteration + 1) + &quot;.jmx&quot;);
	if (jmxFile.exists()) {
		jmxFile.delete();
	}
	Node threads = root.getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(7).getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(3);
	threads.setTextContent(&quot;&quot; + threadsPerMachine);
	Node loops = root.getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(7).getChildNodes().item(1).getChildNodes().item(5).getChildNodes().item(3);
	loops.setTextContent(&quot;&quot; + loopNumber);
	Node rsPerMachineSetup = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(3).getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(1).getChildNodes().item(3);
	rsPerMachineSetup.setTextContent(&quot;&quot; + rsPerMachineNumber);
	Node cloneWorker;
	int initialIndex = 5;
	for(int j = 1; j &lt;= 3; j++){
		String name;
		String key;
		switch (j) {
	         	case 1: name = &quot;LCMS_HOST_&quot;;
	    			key = &quot;lcms&quot;;
	    			break;
	         	case 2: name = &quot;RSESSIONGUID_&quot;;
	    			key = &quot;reviewGuid&quot;;
	    			break;
	         	case 3: name = &quot;GUID_&quot;;
	    			key = &quot;documentGuid&quot;;
	    			break;
	         	default: name = &quot;&quot;;
	    			 key = &quot;&quot;;
	    			 break;
	     }
		Node setupParent = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(3).getChildNodes().item(initialIndex).getChildNodes().item(1);
		Node setup = root.getChildNodes().item(1).getChildNodes().item(3).getChildNodes().item(3).getChildNodes().item(initialIndex).getChildNodes().item(1).getChildNodes().item(1);
		for(int i = 1; i &lt;= rsPerMachineNumber; i++){
			cloneWorker = setup.cloneNode(true);
			cloneWorker.getChildNodes().item(1).setTextContent(name + (rsPerMachineNumber - i + 1));
			cloneWorker.getChildNodes().item(3).setTextContent(reviews.get(rsPerMachineNumber * iteration + (i - 1)).get(key));
			Node newLcmsHostSetup = setupParent.insertBefore(cloneWorker, setup);
			setup = newLcmsHostSetup;
		}
		initialIndex = initialIndex + 4;
	}
	//write to file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(root);
	StreamResult result = new StreamResult(jmxFile);
	transformer.transform(source, result);
} catch (ParserConfigurationException e) {
	e.printStackTrace();
} catch (UnsupportedEncodingException e) {
	e.printStackTrace();
} catch (SAXException e) {
	e.printStackTrace();
} catch (IOException e) {
	e.printStackTrace();
} catch (TransformerException e) {
	e.printStackTrace();
}
log.info(&quot;jmx-file has been prepared at [&quot; + path + &quot;ReviewSessionPTSingleThread_&quot; + (iteration + 1) + &quot;.jmx]&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CLOSE RS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1414062625000</longProp>
        <longProp name="ThreadGroup.end_time">1414062625000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS HOSTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_HOST_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_HOST_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_1</stringProp>
              <stringProp name="Argument.value">https://studio-perf1.qa.xyleme.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS_CLIENTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_CLIENT_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_CLIENT_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_1</stringProp>
              <stringProp name="Argument.value">studio-perf1.qa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close RS" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SPS" elementType="Argument">
                <stringProp name="Argument.name">SPS</stringProp>
                <stringProp name="Argument.value">https://sps-perf.qa.xyleme.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="N_USERS" elementType="Argument">
                <stringProp name="Argument.name">N_USERS</stringProp>
                <stringProp name="Argument.value">50</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VU_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">VU_PREFIX</stringProp>
                <stringProp name="Argument.value">perf.user_</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="Argument">
                <stringProp name="Argument.name">PASSWORD</stringProp>
                <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="START_RS_N" elementType="Argument">
                <stringProp name="Argument.name">START_RS_N</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WPS_RS_FOLDER_NAME" elementType="Argument">
                <stringProp name="Argument.name">WPS_RS_FOLDER_NAME</stringProp>
                <stringProp name="Argument.value">WpsReviewSessionTestsFolder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="OUTPUT_PATH" elementType="Argument">
                <stringProp name="Argument.name">OUTPUT_PATH</stringProp>
                <stringProp name="Argument.value">D:/Xyleme/performance/products/xpe/review_session/parsedXmlInfo/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="readRSInfo" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.ArrayList;
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;ReviewSessionInfo.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
HashMap rsInfo = new HashMap();
String[] keys = reader.readLine().split(&quot;,&quot;);
if (keys != null) {
	String[] dataParts;
	String line;
	while ((line = reader.readLine()) != null) {
		HashMap row = new HashMap();
		dataParts = line.split(&quot;,&quot;);
		for (int i = 0; i &lt; keys.length; i++) {
			row.put(keys[i], dataParts[i]);
		}
		HashMap reviewInfo = new HashMap();
		reviewInfo.put(&quot;lcms&quot;, row.get(&quot;lcms&quot;));
		reviewInfo.put(&quot;documentGuid&quot;, row.get(&quot;documentGuid&quot;));
		reviewInfo.put(&quot;reviewGuid&quot;, row.get(&quot;reviewGuid&quot;));
		if(!rsInfo.containsKey(row.get(&quot;lcms_client&quot;))){
			ArrayList reviews = new ArrayList();
			reviews.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), reviews);
		} else {
			ArrayList list = rsInfo.get(row.get(&quot;lcms_client&quot;));
			list.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), list);
		}
	}
}
reader.close();
vars.putObject(&quot;rsInfo&quot;, rsInfo);
//verify
/*
for(String key: rsInfo.keySet()){
	ArrayList reviews = rsInfo.get(key);
	for(int i = 1; i &lt;= reviews.size(); i++){
		log.info(key + &quot;: &quot; + reviews[i - 1].get(&quot;lcms&quot;) + &quot;: &quot; + reviews[i - 1].get(&quot;documentGuid&quot;) + &quot;: &quot; + reviews[i - 1].get(&quot;reviewGuid&quot;));
	}
}
*/</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LCMS_CLIENT_N}</stringProp>
          </LoopController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">default</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">iteration</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set LCMS_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;LCMS_CLIENT&quot;, vars.get(&quot;LCMS_CLIENT_&quot; + vars.get(&quot;iteration&quot;)));
vars.put(&quot;LCMS&quot;, vars.get(&quot;LCMS_HOST_&quot; + vars.get(&quot;iteration&quot;)));</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userLastName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userEmail</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
                <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                    <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getReviews" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">HashMap rsInfo = vars.getObject(&quot;rsInfo&quot;);
ArrayList reviews = rsInfo.get(vars.get(&quot;LCMS_CLIENT&quot;));
for(int i = 1; i &lt;= reviews.size(); i++){
	vars.put(&quot;documentGuid_&quot; + i, reviews[i - 1].get(&quot;documentGuid&quot;));
	vars.put(&quot;reviewGuid_&quot; + i, reviews[i - 1].get(&quot;reviewGuid&quot;));
}
vars.put(&quot;REVIEWS_N&quot;, reviews.size() + &quot;&quot;);
vars.put(&quot;closeReviewIteration&quot;, &quot;1&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${REVIEWS_N}</stringProp>
              </LoopController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_forceCheckIn_SDocAPI_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
String guid = vars.get(&quot;documentGuid_&quot; + vars.get(&quot;closeReviewIteration&quot;));
vars.put(&quot;reviewId&quot;, vars.get(&quot;reviewGuid_&quot; + vars.get(&quot;closeReviewIteration&quot;)));
log.info(vars.get(&quot;LCMS&quot;) + &quot;: closing (&quot; + vars.get(&quot;closeReviewIteration&quot;) + &quot;/&quot; + vars.get(&quot;REVIEWS_N&quot;) + &quot;): &quot; + vars.get(&quot;reviewId&quot;) + &quot;&quot;);
try {
	client.forcecheckin(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
	client.logout();
     return true;
} catch (Exception e) {
	ResponseCode = 400;
	IsSuccess = false;
	client.logout();
	return false;
}</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_closeReview_SPS" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}/close</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="incCloseReviewIteration" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">int closeReviewIteration = Integer.parseInt(vars.get(&quot;closeReviewIteration&quot;));
closeReviewIteration++;
vars.put(&quot;closeReviewIteration&quot;, closeReviewIteration + &quot;&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WaitUntilClosed" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="initiateClosedRSCondition" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.putObject(&quot;closedRSCondition&quot;, false);
int reviewN = Integer.parseInt(vars.get(&quot;REVIEWS_N&quot;));
Set closedRS = new HashSet();
for(int i = 1; i &lt;= reviewN; i++){
	closedRS.add(vars.get(&quot;reviewGuid_&quot; + i));
}
vars.putObject(&quot;closedRS&quot;, closedRS);
</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__BeanShell(!vars.getObject(&quot;closedRSCondition&quot;))}</stringProp>
                </WhileController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_getList_SPS" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=false</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check review presence" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
HashSet closedRS = vars.getObject(&quot;closedRS&quot;);
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
for(int i = 0; i &lt;= reviews.size() - 1; i++){
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;closed&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		if(closedRS.contains(guid)){
			closedRS.remove(guid);
		}
	}
	if(closedRS.isEmpty()){
		vars.putObject(&quot;closedRSCondition&quot;, true);
		break;
	}
}
vars.putObject(&quot;closedRS&quot;, closedRS);</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">5000</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reporter" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">log.info(vars.get(&quot;LCMS&quot;) + &quot;: all review sessions closed&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">multipart/form-data</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CLEAN RS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1430318351000</longProp>
        <longProp name="ThreadGroup.end_time">1430318351000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS HOSTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_HOST_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_HOST_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_1</stringProp>
              <stringProp name="Argument.value">https://studio-perf3.qa.xyleme.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS_CLIENTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_CLIENT_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_CLIENT_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_1</stringProp>
              <stringProp name="Argument.value">studio-perf3.qa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clean RS" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SPS" elementType="Argument">
                <stringProp name="Argument.name">SPS</stringProp>
                <stringProp name="Argument.value">https://sps-perf.qa.xyleme.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="N_USERS" elementType="Argument">
                <stringProp name="Argument.name">N_USERS</stringProp>
                <stringProp name="Argument.value">50</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VU_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">VU_PREFIX</stringProp>
                <stringProp name="Argument.value">perf.user_</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="Argument">
                <stringProp name="Argument.name">PASSWORD</stringProp>
                <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="START_RS_N" elementType="Argument">
                <stringProp name="Argument.name">START_RS_N</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WPS_RS_FOLDER_NAME" elementType="Argument">
                <stringProp name="Argument.name">WPS_RS_FOLDER_NAME</stringProp>
                <stringProp name="Argument.value">WpsReviewSessionTestsFolder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="OUTPUT_PATH" elementType="Argument">
                <stringProp name="Argument.name">OUTPUT_PATH</stringProp>
                <stringProp name="Argument.value">D:/Xyleme/performance/products/xpe/review_session/parsedXmlInfo/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="readRSInfo" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.ArrayList;
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;ReviewSessionInfo.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
HashMap rsInfo = new HashMap();
String[] keys = reader.readLine().split(&quot;,&quot;);
if (keys != null) {
	String[] dataParts;
	String line;
	while ((line = reader.readLine()) != null) {
		HashMap row = new HashMap();
		dataParts = line.split(&quot;,&quot;);
		for (int i = 0; i &lt; keys.length; i++) {
			row.put(keys[i], dataParts[i]);
		}
		HashMap reviewInfo = new HashMap();
		reviewInfo.put(&quot;lcms&quot;, row.get(&quot;lcms&quot;));
		reviewInfo.put(&quot;documentGuid&quot;, row.get(&quot;documentGuid&quot;));
		reviewInfo.put(&quot;reviewGuid&quot;, row.get(&quot;reviewGuid&quot;));
		if(!rsInfo.containsKey(row.get(&quot;lcms_client&quot;))){
			ArrayList reviews = new ArrayList();
			reviews.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), reviews);
		} else {
			ArrayList list = rsInfo.get(row.get(&quot;lcms_client&quot;));
			list.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), list);
		}
	}
}
reader.close();
vars.putObject(&quot;rsInfo&quot;, rsInfo);
//verify
/*
for(String key: rsInfo.keySet()){
	ArrayList reviews = rsInfo.get(key);
	for(int i = 1; i &lt;= reviews.size(); i++){
		log.info(key + &quot;: &quot; + reviews[i - 1].get(&quot;lcms&quot;) + &quot;: &quot; + reviews[i - 1].get(&quot;documentGuid&quot;) + &quot;: &quot; + reviews[i - 1].get(&quot;reviewGuid&quot;));
	}
}
*/</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LCMS_CLIENT_N}</stringProp>
          </LoopController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">default</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">iteration</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set LCMS_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;LCMS_CLIENT&quot;, vars.get(&quot;LCMS_CLIENT_&quot; + vars.get(&quot;iteration&quot;)));
vars.put(&quot;LCMS&quot;, vars.get(&quot;LCMS_HOST_&quot; + vars.get(&quot;iteration&quot;)));</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=10&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2P5vV5X59jDuLgu4Ifvq9EhNIr0zq3uDDJvQE6rAMLm87BYSIqNSPsNz42%2FbvW16d9luC%2Ft%2B%2BUzHXQjzCudt1GnJT7bVpzOXQL7RgKQ8p%2BQ4197s6LBNby2vyROElSEsZbAoIpgz%2B6jTf%2B%2Ffe%2BzYMgft9zTEt%2Fmsef7BkMISu1Mf9v03%2F7fJwo1LCfNwliCH714VzISxLW0IGqjLPDuTELekiNsYtfU6H8SwzcQSs%2FvJei%2F1jazY5NzlX2HQQt6hdRGha3VWjvvXEEt7kzMFTTqDWQXrWXDl7SfksAxJjLg%2Ftlu%2BJ8lsdrArBqENZklLOOhsVkimNZwH1HyAz%2BSKHOgW6wg8DoCOoFPlU8pj7GRGxxC4ulR4I8ofZRRxq9fkHPHqE6%2F0TsGNRWD9CBe1f3eU85nM7k8yQAiBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz%2B%2FTqPMA5YzsXbHMi9f44kDRI%2B1asui8mlGOOnCTsfkUUFTyPzu5d2izbVnpwlomGK%2B1mJAZR7dnv50JwxckcrGsmexmrsaQzWaM27mimcn7uVC82hoXSN1%2FVPFu5PXwE1HyXJBQEn5yduoJUWzuQfZq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4ve8HmsQB7KfH5jxMnITH5wQKCKYM%2Fuo038GJjJXqIeZ%2FuGgfOh1eDK8H3gH8t%2BBMY5bliCJ6cltQvLnYgm9a5nGNOQtaWllq4Zh0wNPIrRMdqLFNft7fIbZaxLnkCRbGQudwnoGCOOM53wwq%2Fl7m9oLtdafD9kiHPfZ0l42ABy7BaVW6WzhhCxdyzw7J8nyqwVMwth3ZyYYzAwTif%2BMs6%2FreIxd%2FZk7XP%2Bo0BCHIYXUCobIxCY8iOYemeeGhLHn3WZdWk5UNwzNwbHz7%2FVRrftRKWbs5KzuYqlD6agJRvEUjncaCdTSHr1mQC81ZP%2BPkjmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqBYKVda%2B2pPztCuReJFg1uzCz%2BsD2bbpvrsLM1FbA2tKWiGSg2UP6gNPzvqYijw%2BFpu48DINEq92Z%2BZh7wd6aTJIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7Tvkvvnzv2j77RUZwLY3rvWEhS%2B8Ga17ReRw95gzEZxnRCEZn1ydZW%2FNAQp%2B%2B6OYmqGywBRsVkimNZwH1RON5D5rl8MbP%2FdeGHRI5o8EPV2Zd6OqON4SO4yPZ4kHT0rtJIWYwkwZ7xElbqJDYxQANIs3CVkP2EsD2wUvRXKo0cWFO84lhavrPwuYOmWvXj6a8xWIVoUu8f6%2Bo3rgdoPoUJydR8%2BCW8LYAle9m9GkiplG47lQW%2Fe2gQXfix3Gjl5BxeGTWr8TRPeZ0lrw2hqT5hzo9MuX2mQhjoSj9P%2Fp2S5tKGpi1Jqyi5wXGgDuvtZiQGUe3Z7%2BdCcMXJHKxrf4UfKQTmalmjNu5opnJ%2BzNtEcr3Y077G0Q3ZawabhbXjApUJNJbrT%2BoYS0QHDY%2F11Ly%2BnSU3YSNnzvXQ8EK4jiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7fLDS9C3tjo063rFksiyc6usdRsykzhdLjiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1hZYev3uCPNDA4MIivWwSWTbRuod4J4obn3OR6tnGmGlpDZ9OSd0V1NBqvPpTpYo22cJhrEjNYnP1B12WjH3Gv7pLTiKJsuuwjbg1lsIIN63xyO729Aq0Jx69twAVEbozPZspR4Jgqeu4a8uV2M%2F3oWrSYIdfOTM%2BiOcR%2FZ7LbhqQTuzsQzskJZBO7OxDOyQlEjd9UnKDbBdfZmNkm%2FEEUC8jqtd7hPbcwQ9XZl3o6o7BqENZklLOOhsVkimNZwH1OCEC6NQVzmgsms636W51VXA2NuXaYc9%2F7RnLgSzjkiKmp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeYO1MLZtEYRZEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o7x6EnwjRll8hsVkimNZwH1E882HyFCIUBFBxQ16IPYYTiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1pzig3Q2f7xdQcz2eDG7sve6v0UFOc0z9d%2FFEFBtU0SuXSl7VR0WRj7mVJk5G4H5zhfWTnR%2ByMLEwy1iXFDFa52xpSA1FK1HXolOOyP5b4hyQTuzsQzskJZBO7OxDOyQlYdfE%2FLGk7SDTS%2B9qkIM1Z7pO%2FKI39WbmNsTZUrpCQidvdvMgf3sxcqyZ7GauxpDNZozbuaKZyfuzbVnpwlomGFxBJ9c3QG20u0Ap5rmY%2Fydq%2Bs%2FC5g6Za9ePprzFYhWh%2BjHM5UTztnKg%2BhQnJ1Hz4InA7pVRHYO3n3OR6tnGmGlpDZ9OSd0V1CPKVzE5kkxpB3GNVkWdemERlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9RlxwDt0tJ414j0XEPRJaMw%2ForIADPtCy3axheDpL%2BViCgimDP7qNN8sVA8DzMFFHa1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2Fyoso6n49X1yxmbK5SuKXWIrACoUG%2BpF1VqvxE6EKpGKP%2BQTuzsQzskJZBO7OxDOyQleh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfvKRRCUxnhwkbNUIuvk9ITrpqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL1Zb4gz5TRM3l4ULdEV10x7xI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqO8ehJ8I0ZZfIbFZIpjWcB9dQ2AqBq2Y2eRQcUNeiD2GE4kLbo1xV5mxwC56I4Wb%2FrU%2Bll7TZPRzEi3aqP7o50dac4oN0Nn%2B8XUHM9ngxu7L3ur9FBTnNM%2FXfxRBQbVNEr7c%2B%2Bz0NHEjkKv%2B7QMBnfv%2FwriZcRY6J8e3j31JigjkWQTuzsQzskJZBO7OxDOyQlT2DC910U2HatXH873PiCyi1Kd2tRRBraPt7x6VXAyz%2B7w7oAmMNfrRYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B%2BaTx3QpbZL1rnPUoOp4FKmNoZEdsmHptR8JY3s2yVF9tLv60rTRllsgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSh7xk5ZyiXeQJ0cRiFTrRnOhItjFLXpHsAV6cJTITVLVfYdBC3qF1EcY1%2ByIhmX2wRTTVcBFfWG8p1udeIq9I%2BnqdYrVY9%2FTuQTuzsQzskJZBO7OxDOyQl%2FCuJlxFjonwRlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9d1uLGaKBkfnLyOq13uE9tw%2ForIADPtCy%2FLl8ix9wL5xCgimDP7qNN%2B5p78EDGF9LxTIpj2ePSTkaDSBSQUfnvmRPe8k6pxsVfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOBm8FdtwTiQGpIZzrQOFC15Z5bGZyzCfekE7s7EM7JCWQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MbnFJCP83ylN8EPV2Zd6OqON4SO4yPZ4kGdv13cWCb42ZLJ3kvdjW90%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDO%2FDgVzX%2FK5yp%2BzMlzH1K%2F81K4hWYwDOpLCFYNXuT9A3k1nOlGylrbTso3GYxUmV6Ml8JDG%2FmAtP6FDCqS0DMH87%2B2IhRZWuclugLVpNON%2FdnJi0DzD8IPNizyGUksps7YmrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7E9xduE22Q5yYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRubQiNJiT8689%2BZ6iIZX5cHe1udWWdi3N8SN31ScoNsF19mY2Sb8QRQLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBDnUjfzA%2Bzf2%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81w6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQobMnrQFeJOC1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B1LyrLudLKow%2BFpia6N0m%2B6mp3xXB23vSG9UTixAfPRFZhq6jWLfqRrkqemzaLJ0Sp0UvqfAQBPu3wnzAV9YFq6fc5Hq2caYaWkNn05J3RXU780IW1HWDXHUgYjpkgwVToK4%2F9YHRND0w9jxZurWfh6QTuzsQzskJZBO7OxDOyQlUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsi8Pi5U4Nu2JjLvOKp6Btp5jeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i6KI4RjcoTg08gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23HuqH2Y5jzzhBr8KCWGS1IIbFZIpjWcB9RryWaqBL1%2BousIPA6AjqBTWC6MKHqZ%2FAsQuLpUeCPKH2UUcavX5Bzx8GQ%2F6LuSFRK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnmAaXaNHDNHdFzRpAy%2FDcLgUylxvzc8qvdjLAQUhK%2FJIH3Wm7u6wKF%2B9UqCXnCAEEHhl8MIk9x6JQsc9rA6kw0j5cPOIhbjkplkE7s7EM7JCXVb53SsNiJyymT6tKlTDD8ZozbuaKZyfuzbVnpwlomGCWhMtvmawcO0V64oAV2S2TBN8IC%2B8do7K1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargFsGuQQ2GFkUoe8ZOWcol3l4un0BKe2p%2BdKf8f2oqiOrn6vWahNwYRt0ycLrQ3txSCZ%2BedrY6kI%2BafDuOagtADIdd6PkEkvqn7yS0PYo4GbOXwEkIPXGHJQRTTVcBFfWGxwRqY1pt%2BEOSYwI7zhnK0oIXYQVoc1gbn%2BtsV8Lg%2FzvYsV6X5Pq5lWQTuzsQzskJU9gwvddFNh2XX091Vqgbj4tSndrUUQa2lN%2F3FvAR9BVBpcoD%2FaVCnYWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGEigiMya3GbBzkULSUMheSdq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4vcjBIlDPtoVwRWj9UzFTs2vnN%2B4NEbR0km2U1l836uEJ4lXb3L9RZRNI6oTdSafE5LCaWGa%2F3HtV5wPIFyLZ5SnBqENZklLOOhsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFIQ4peiGiBksvw4Fc1%2FyucpIdbkW7SkgviORhd3zM3tGJM8%2BCxFTxgxWOMFEObwQQe6v0UFOc0z9d%2FFEFBtU0SslklZ3KLSGzeTkP8bAAogPrO0tp0ykQ3HOPa9n9A2srmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqMekK66aTmfShPBsC0AFpuRmjNu5opnJ%2B7NtWenCWiYYje2b5UX5LM543UWfYNVRe5gliRCnpu2MejRkFvBAaJuM%2BeBQ%2Bz3mGPgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N08RMDj9jh1uaUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMCUUtV79dTdBlbuaNLtSqLOJV29y%2FUWUTjoF2vbR6Kuby9dJc5zb7oYij3rt80PYgkE7s7EM7JCWQTuzsQzskJScdT5zBSpkSSg2Xdjx2ioDoy96hbC%2FPRJBO7OxDOyQlLfonSTkwMSUvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9abr4xDkBLs6MJDi5Vze8EI4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dZShfr%2BGwV8fZb4gz5TRM3naU3m7V%2FUf%2Fqse%2FmnnI3ogSyfFW%2F0fRgzoTIzTYH13%2BoHEq4TSbdk0C%2BWboHiYQOUTQJpiEYjifPLmJuWVYRpJgBJ10B2KefWsmexmrsaQzWaM27mimcn7aTLTM%2FUee0G778x1k%2FtKTABe3q4FTRy9rJnsZq7GkM1mjNu5opnJ%2B4pX12CyomWrRzA6MMcLjZTXjApUJNJbrbZGijcZojBIacL3llsfJIH4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdPETA4%2FY4dbmkND41Da5ofhj3WCGLEOBrgkMLkG7pV8gkE7s7EM7JCWQTuzsQzskJYTLVyw%2FAs33%2FBChP7JWeP%2FvdnsQYSNnOPs6Hc4oaBiRLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUaHjefbIUhVzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHW4XgTkfroE0%2Fg0pSBliSTmZozbuaKZyfuzbVnpwlomGK%2B1mJAZR7dn0V64oAV2S2SO5vVvQGzhvK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnm4jULk%2Bwqy7gv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5NNi34mWQDYhSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGN%2FESPh0VnOTBD1dmXejqjjeEjuMj2eJBgzqNNKeBnp%2BYuQYRXemzK6Md8ilpAph2jKEU92wLoda%2FDgVzX%2FK5ykh1uRbtKSC%2BI5GF3fMze0Ykzz4LEVPGDFY4wUQ5vBBB7q%2FRQU5zTP138UQUG1TRK8BhuJmL9Xy5ieVaIQcgYlc0Wis6vsXw%2BNvyT%2F%2FNT%2BuMkE7s7EM7JCWQTuzsQzskJV0ESkiO%2BxmSUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfv7lHQx69tYmWRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJytca75%2BH%2F9d3bDCbtRtnHx%2FEWSMZtu2NUs%2FAt7GC8akW2lkoXpFu69GVu74vYBH3A%2Fiv8UXizOL4U82YLYZV5JQpMKinOpAjnw97l%2BE8HfVym2p30VqshN7l92c35LcPtNNhqO7%2FD8Hi8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH1flyDRxgaVnAwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1uF4E5H66BNP4NKUgZYkk5maM27mimcn7s21Z6cJaJhivtZiQGUe3Z9FeuKAFdktkwAGtXPUAaWStca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTQFF9Ck3khpMiq%2BqEhq%2F1TMIWyCxLbIXgGxWSKY1nAfVE43kPmuXwxitZFaWd5SNPESAEJCTn5wA3hI7jI9niQYIWWqQ%2FZqehSs%2BqxzWNwWO7Z32EK9ZUUZYd%2FzsMKA%2B1ox3yKWkCmHYIlWmwcXh3mL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGIYgC8AnbPCIgwILq9KyEGHoOPvKioZjdYRMacunsLdG3pYzTR1pclKQTuzsQzskJctdGqsXnkaTp5PUcFNDLqqwd0H4HtEikZBO7OxDOyQlkE7s7EM7JCUtWRqwAzP%2BG3GsQU4ArKJKbzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyfu35bcbmCUQ8q%2B1mJAZR7dn0V64oAV2S2TdPIONMonzWfWPWvchtoDUENPJ4H0SAskkGQV%2BKiwLfmr6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPgxEuIGpSqUdtLehoLfx1a1os3UfykK%2Bs3H4CB3lnqxD4mrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7HJeV58f5JqoYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtz0t4s2Xl%2FuufPXWHYEsJYu%2B3zIM4qtxRsfgK3JZer0wdxjVZFnXphe%2Frzt17ajQrNJtAKSE6xOcGoQ1mSUs46GxWSKY1nAfXU6zPdpogBRC8jqtd7hPbcP6KyAAz7QstIOLmfiLNwgVLanbMlqgNK7yPB5FVxlyO3Px%2Bsxz5PP0Pvk%2FnEwnVbq3z7%2F9INwElIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7TvkvvtD2IPqqw%2B9aSa8gIBfl7EkWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGHr7F3bBchFy85hX06plzOhq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4CstttdjiS3v6GFm%2BD3PD2sbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBsrDjLlYrA4VMpnuHxPjpXPgJXUkiOxxVQ5ztSHd%2FRhHRtfFcELlzk3ZsnZsKCFAzTCJBOnRIyzWbkbLxJhaoNqyZ7GauxpDNZozbuaKZyfssCEGpjKdAS6Vjk1OkokEYnWBz8Rr6nG5q%2Bs%2FC5g6Za9ePprzFYhWhXJAhqyfL2ueg%2BhQnJ1Hz4NStc7W0X6Yk7zod1XpqKaQv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5PCZW%2FUiEBn95BO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcwQ9XZl3o6o43hI7jI9niQVDxyA%2FDby0QGuPblpLX6BT4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdCY8XoOY9miKl2xBlzgmiC6BZK0pTPGGXPmnemIsAzp3GPzyNQMP%2FHm6TvyiN%2FVm5ico4YntQ4jdQmHJAmd5UpysmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktk7yGbmwt%2FO8utca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kiefsfwOXstNQJzQp6wK0LBa8qPC%2FxDEEcWB3NpWM4QKIWkNZ0xiyLBFZ0jH1%2BQqp%2FtstupfyEfeljWECMsDC%2B0S8Hzo1BPAbeGsmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktkiSIzR3c3H8Ktca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kids88BR4mGh4DFcIQhAkBVOP1rBrFCpPvF06ZSZ%2FxN1p6zOnw1htHUS7Tw3kSlpEBfKz4n81sZjnTmVdmO%2F61Aw9PPpiKAXM5OvtZiQGUe3ZxfMSPCVOg%2FUrJnsZq7GkM1mjNu5opnJ%2Bwg0jZHc%2BOTMwVUd9kAdmnmNoZEdsmHptakyR5rvXrVmqNbKv%2BeXvh4gb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7HydoBt8knSA9z43EYlSvNQ4kLbo1xV5m%2BiAr0LnlUcmiKwYzf2U%2BDoGneyoLQQ3KncKH4N3Dh0bNcfXPYkpP3CzUe30FNdyEKcql6NmB55GO%2FlTB2UvYcoSfE6PXnjtxDj5%2F1TUAe5Q1IGI6ZIMFU6QTuzsQzskJZBO7OxDOyQlimbEWl4Pvpygsu3g%2BmRQ%2BemzMCI4ksq1UY46cJOx%2BRRQVPI%2FO7l3aLNtWenCWiYYr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyft08SeHxsP%2F92Ryo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJzbiHlkLYwPfJuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZNG1%2FxvgZO5LrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJInF4%2FZXGSVxMmc0KesCtCwWlopP2YhhG4hhoR8a8vCUoIdZcJm29lFyf5IFwDC%2ByN1txQ1G4Ww9pLUgYjpkgwVTvTz6YigFzOTr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfs1J5QAlxjb4WRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJxQtEf4uo4M6TmVdmO%2F61AwT7ecal%2BRuTzBD1dmXejqjvHoSfCNGWXyGxWSKY1nAfUEMnsct6psNkuErSvsSFTgdSmxHcRFBdei53B6tNISWIP573ETd6j8SK9M6t7gwyb0BOqwDC5vO9vxHoptW3D%2BqidOopC26W9ExjO%2Fe21buSY8XoOY9miKl2xBlzgmiC4jlo9wKE4PzorADQibvuH4uk78ojf1ZuZJjAjvOGcrSpBO7OxDOyQlkE7s7EM7JCWmak2dfrNEhuvVan1JFB%2FsFBP5nAsy2xQRO%2BYvOdBKKvucf3WKEIY%2FPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUv2wmVs47FSzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHWUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMYbUwdTyiyCWnzH0o6uSPPUVqooLjumayM%2FIDMa%2BpQsRfMFF1FNwkqKSRk%2Bsw4i9IFkST%2FJboPlkmrKLnBcaAO6%2B1mJAZR7dnQLwHLf67UWesmexmrsaQzWaM27mimcn7j7hHfSwb3dIP7GWZEaaXvODput4%2Fwc2pIG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2FyolUH37tU864NUKdj9pG%2BugfkUX8XPN50AwdhVkqO%2BA6k%3D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XYSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">XYSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">XYSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkXYSESSIONID_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">String XYSESSIONID = vars.get(&quot;XYSESSIONID&quot;);
if (XYSESSIONID == null) {
	vars.put(&quot;XYSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${XYSESSIONID}&quot; != &quot;null&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getReviews" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">HashMap rsInfo = vars.getObject(&quot;rsInfo&quot;);
ArrayList reviews = rsInfo.get(vars.get(&quot;LCMS_CLIENT&quot;));
for(int i = 1; i &lt;= reviews.size(); i++){
	vars.put(&quot;documentGuid_&quot; + i, reviews[i - 1].get(&quot;documentGuid&quot;));
	vars.put(&quot;reviewGuid_&quot; + i, reviews[i - 1].get(&quot;reviewGuid&quot;));
}
vars.put(&quot;REVIEWS_N&quot;, reviews.size() + &quot;&quot;);
vars.put(&quot;closeReviewIteration&quot;, &quot;1&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${REVIEWS_N}</stringProp>
              </LoopController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UNIQUE_CONTAINERS_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashSet;
import java.util.Set;
File file = new File(vars.get(&quot;OUTPUT_PATH&quot;) + vars.get(&quot;documentGuid_&quot; + vars.get(&quot;closeReviewIteration&quot;)) + &quot;_CONTAINERS.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
String line;
int i = 1;
Set uniqueContainers = new HashSet();
while ((line = reader.readLine()) != null) {
	if(!uniqueContainers.contains(line)){
		uniqueContainers.add(line);
		vars.put(&quot;containerguid_&quot; + i, line);
		i++;
	}
}
uniqueContainers.clear();
vars.put(&quot;UNIQUE_CONTAINERS_N&quot;, &quot;&quot; + (i - 1));
vars.put(&quot;deleteIteration&quot;, &quot;1&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${UNIQUE_CONTAINERS_N}</stringProp>
                </LoopController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${LCMS}/sdoc-review/comments/deletesession?fragmentguid=${__BeanShell(vars.get(&quot;containerguid_&quot; + ${deleteIteration}))}&amp;sessionguid=${__BeanShell(vars.get(&quot;reviewGuid_&quot; + ${closeReviewIteration}))}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="reporter" enabled="true">
                    <stringProp name="BeanShellSampler.query">int deleteIteration = Integer.parseInt(vars.get(&quot;deleteIteration&quot;));
log.info(vars.get(&quot;LCMS&quot;) + &quot;: deleted &quot; + deleteIteration + &quot;/&quot; + ${UNIQUE_CONTAINERS_N});
deleteIteration++;
vars.put(&quot;deleteIteration&quot;, &quot;&quot; + deleteIteration);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="incCloseReviewIteration" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">int closeReviewIteration = Integer.parseInt(vars.get(&quot;closeReviewIteration&quot;));
closeReviewIteration++;
vars.put(&quot;closeReviewIteration&quot;, closeReviewIteration + &quot;&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CLEAN RS DB" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1430318351000</longProp>
        <longProp name="ThreadGroup.end_time">1430318351000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Configuration" enabled="true">
          <stringProp name="dataSource">db</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://sps-dev.cmbdfxmnvvqn.us-east-1.rds.amazonaws.com:3307/sps?requireSSL=true&amp;useSSL=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">sps</stringProp>
          <stringProp name="password">9tMcPvbW7JmMTHidp5eE</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">db</stringProp>
          <stringProp name="query">select 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS HOSTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_HOST_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_HOST_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_HOST_1</stringProp>
              <stringProp name="Argument.value">https://studio-pps.dev.xyleme.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LCMS_CLIENTS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LCMS_CLIENT_N" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_N</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LCMS_CLIENT_1" elementType="Argument">
              <stringProp name="Argument.name">LCMS_CLIENT_1</stringProp>
              <stringProp name="Argument.value">studio-pps.dev</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clean RS" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SPS" elementType="Argument">
                <stringProp name="Argument.name">SPS</stringProp>
                <stringProp name="Argument.value">https://sps.dev.xyleme.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="N_USERS" elementType="Argument">
                <stringProp name="Argument.name">N_USERS</stringProp>
                <stringProp name="Argument.value">50</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VU_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">VU_PREFIX</stringProp>
                <stringProp name="Argument.value">perf.user_</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="Argument">
                <stringProp name="Argument.name">PASSWORD</stringProp>
                <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="START_RS_N" elementType="Argument">
                <stringProp name="Argument.name">START_RS_N</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WPS_RS_FOLDER_NAME" elementType="Argument">
                <stringProp name="Argument.name">WPS_RS_FOLDER_NAME</stringProp>
                <stringProp name="Argument.value">WpsReviewSessionTestsFolder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="OUTPUT_PATH" elementType="Argument">
                <stringProp name="Argument.name">OUTPUT_PATH</stringProp>
                <stringProp name="Argument.value">D:/Xyleme/performance/products/xpe/review_session/parsedXmlInfo/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="readRSInfo" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.ArrayList;
String path = vars.get(&quot;OUTPUT_PATH&quot;);
File file = new File(path + &quot;ReviewSessionInfo.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
HashMap rsInfo = new HashMap();
String[] keys = reader.readLine().split(&quot;,&quot;);
if (keys != null) {
	String[] dataParts;
	String line;
	while ((line = reader.readLine()) != null) {
		HashMap row = new HashMap();
		dataParts = line.split(&quot;,&quot;);
		for (int i = 0; i &lt; keys.length; i++) {
			row.put(keys[i], dataParts[i]);
		}
		HashMap reviewInfo = new HashMap();
		reviewInfo.put(&quot;lcms&quot;, row.get(&quot;lcms&quot;));
		reviewInfo.put(&quot;documentGuid&quot;, row.get(&quot;documentGuid&quot;));
		reviewInfo.put(&quot;reviewGuid&quot;, row.get(&quot;reviewGuid&quot;));
		if(!rsInfo.containsKey(row.get(&quot;lcms_client&quot;))){
			ArrayList reviews = new ArrayList();
			reviews.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), reviews);
		} else {
			ArrayList list = rsInfo.get(row.get(&quot;lcms_client&quot;));
			list.add(reviewInfo);
			rsInfo.put(row.get(&quot;lcms_client&quot;), list);
		}
	}
}
reader.close();
vars.putObject(&quot;rsInfo&quot;, rsInfo);
//verify
/*
for(String key: rsInfo.keySet()){
	ArrayList reviews = rsInfo.get(key);
	for(int i = 1; i &lt;= reviews.size(); i++){
		log.info(key + &quot;: &quot; + reviews[i - 1].get(&quot;lcms&quot;) + &quot;: &quot; + reviews[i - 1].get(&quot;documentGuid&quot;) + &quot;: &quot; + reviews[i - 1].get(&quot;reviewGuid&quot;));
	}
}
*/</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LCMS_CLIENT_N}</stringProp>
          </LoopController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">default</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">iteration</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set LCMS_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;LCMS_CLIENT&quot;, vars.get(&quot;LCMS_CLIENT_&quot; + vars.get(&quot;iteration&quot;)));
vars.put(&quot;LCMS&quot;, vars.get(&quot;LCMS_HOST_&quot; + vars.get(&quot;iteration&quot;)));</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);
vars.put(&quot;USERNAME&quot;, &quot;yevhen.leshchynskyy&quot;);
vars.put(&quot;PASSWORD&quot;, &quot;Qwerty1234&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_j_spring_security_check" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${LCMS_HOST}/user-manager/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_web-publishing" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${LCMS_HOST}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userLastName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userEmail</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="wirisServiceURL Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">wirisServiceURL</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input name=&apos;wirisServiceURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_userNameChecker_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
vars.putObject(&quot;userNameChecker&quot;, false);
if (userName != null) {
	vars.putObject(&quot;userNameChecker&quot;, true);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If userName is not null" enabled="true">
                <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;userNameChecker&quot;))}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_autologin_SPS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}&amp;wirisServiceURL=${wirisServiceURL}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/autologin</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                    <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_sessionChecker_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">boolean userNameChecker = vars.getObject(&quot;userNameChecker&quot;);
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
boolean loggedIn = false;
if(userNameChecker &amp;&amp; jSessionId != null){
	loggedIn = true;
}
vars.putObject(&quot;loggedIn&quot;, loggedIn);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user is logged in" enabled="true">
              <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;loggedIn&quot;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getReviews" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">HashMap rsInfo = vars.getObject(&quot;rsInfo&quot;);
ArrayList reviews = rsInfo.get(vars.get(&quot;LCMS_CLIENT&quot;));
for(int i = 1; i &lt;= reviews.size(); i++){
	vars.put(&quot;documentGuid_&quot; + i, reviews[i - 1].get(&quot;documentGuid&quot;));
	vars.put(&quot;reviewGuid_&quot; + i, reviews[i - 1].get(&quot;reviewGuid&quot;));
}
vars.put(&quot;REVIEWS_N&quot;, reviews.size() + &quot;&quot;);
vars.put(&quot;closeReviewIteration&quot;, &quot;1&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${REVIEWS_N}</stringProp>
              </LoopController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UNIQUE_CONTAINERS_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashSet;
import java.util.Set;
File file = new File(vars.get(&quot;OUTPUT_PATH&quot;) + vars.get(&quot;documentGuid_&quot; + vars.get(&quot;closeReviewIteration&quot;)) + &quot;_CONTAINERS.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
String line;
int i = 1;
Set uniqueContainers = new HashSet();
while ((line = reader.readLine()) != null) {
	if(!uniqueContainers.contains(line)){
		uniqueContainers.add(line);
		vars.put(&quot;containerguid_&quot; + i, line);
		i++;
	}
}
uniqueContainers.clear();
vars.put(&quot;UNIQUE_CONTAINERS_N&quot;, &quot;&quot; + (i - 1));
vars.put(&quot;deleteIteration&quot;, &quot;1&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${UNIQUE_CONTAINERS_N}</stringProp>
                </LoopController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${LCMS}/sdoc-review/comments/deletesession?fragmentguid=${__BeanShell(vars.get(&quot;containerguid_&quot; + ${deleteIteration}))}&amp;sessionguid=${__BeanShell(vars.get(&quot;reviewGuid_&quot; + ${closeReviewIteration}))}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="reporter" enabled="true">
                    <stringProp name="BeanShellSampler.query">int deleteIteration = Integer.parseInt(vars.get(&quot;deleteIteration&quot;));
log.info(vars.get(&quot;LCMS&quot;) + &quot;: deleted &quot; + deleteIteration + &quot;/&quot; + ${UNIQUE_CONTAINERS_N});
deleteIteration++;
vars.put(&quot;deleteIteration&quot;, &quot;&quot; + deleteIteration);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="incCloseReviewIteration" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">int closeReviewIteration = Integer.parseInt(vars.get(&quot;closeReviewIteration&quot;));
closeReviewIteration++;
vars.put(&quot;closeReviewIteration&quot;, closeReviewIteration + &quot;&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${OUTPUT_FOLDER}${__javaScript(new Date().getTime())}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
