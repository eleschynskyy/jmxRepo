<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ConsolidatedRS" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MACHINES" elementType="Argument">
            <stringProp name="Argument.name">MACHINES</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1465997697000</longProp>
        <longProp name="ThreadGroup.end_time">1465997697000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="clearProps_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">HashMap sessions = props.get(&quot;sessions&quot;);
if(sessions == null) {
	log.info(&quot;////////////////////////////SETUP: sessions=NULL&quot;);
} else {
	log.info(&quot;////////////////////////////SETUP: CLEAN UP IN PROGRESS&quot;);
	props.remove(&quot;sessions&quot;);
}
log.info(&quot;////////////////////////////SETUP: BEFORE: props.keySet().size()=&quot; + props.keySet().size());
Iterator iter = props.keySet().iterator();
while(iter.hasNext()){
	Object key = iter.next();
	if (key.getClass().toString().endsWith(&quot;java.lang.String&quot;)) {
		String keyString = key.toString();
		if(keyString.endsWith(&quot;_inProgress&quot;)){
			log.info(&quot;PROPS: &quot; + keyString + &quot;=&quot; + props.get(keyString));
			iter.remove();
			log.info(&quot;REMOVED: &quot; + keyString);
		}
	}
}
log.info(&quot;////////////////////////////SETUP: AFTER: props.keySet().size()=&quot; + props.keySet().size());
log.info(&quot;setUp COMPLETED&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Comet" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1465981410000</longProp>
        <longProp name="ThreadGroup.end_time">1465981410000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RS SETUP INFO_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;LCMS_HOST&quot;, &quot;https://studio-pps.dev.xyleme.com&quot;);
vars.put(&quot;LCMS_CLIENT&quot;, &quot;studio-pps.dev&quot;);
vars.put(&quot;RSESSIONGUID&quot;, &quot;333f1c2d-7511-4ba0-90a7-2a1416fb35e7&quot;);
vars.put(&quot;GUID&quot;, &quot;c3476422-ec0d-4559-ac89-a42e4d04fca1&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SPS_HOST" elementType="Argument">
              <stringProp name="Argument.name">SPS_HOST</stringProp>
              <stringProp name="Argument.value">https://sps.dev.xyleme.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="N_USERS" elementType="Argument">
              <stringProp name="Argument.name">N_USERS</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="VU_PREFIX" elementType="Argument">
              <stringProp name="Argument.name">VU_PREFIX</stringProp>
              <stringProp name="Argument.value">perf.user_</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PASSWORD</stringProp>
              <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);
vars.put(&quot;USERNAME&quot;, &quot;yevhen.leshchynskyy&quot;);
vars.put(&quot;PASSWORD&quot;, &quot;Qwerty1234&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS_HOST}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS_HOST}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="wirisServiceURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">wirisServiceURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;wirisServiceURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
vars.putObject(&quot;userNameChecker&quot;, false);
if (userName != null) {
	vars.putObject(&quot;userNameChecker&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If userName is not null" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;userNameChecker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}&amp;wirisServiceURL=${wirisServiceURL}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_sessionChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">boolean userNameChecker = vars.getObject(&quot;userNameChecker&quot;);
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
boolean loggedIn = false;
if(userNameChecker &amp;&amp; jSessionId != null){
	loggedIn = true;
}
vars.putObject(&quot;loggedIn&quot;, loggedIn);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user is logged in" enabled="true">
          <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;loggedIn&quot;))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="generateSessionGuid_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">String guid = java.util.UUID.randomUUID().toString();
vars.put(&quot;SESSIONGUID&quot;, guid);
vars.putObject(&quot;continueComet&quot;, false);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While RS not started" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(!vars.getObject(&quot;continueComet&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_AUX" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">100</stringProp>
            </TestAction>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkWhetherReviewStarted_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean reviewInProgress = props.get(threadNum + &quot;_inProgress&quot;);
	if(reviewInProgress != null &amp;&amp; reviewInProgress.booleanValue()){
		vars.putObject(&quot;continueComet&quot;, true);
	}
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_cometInitial" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;topic&quot;:&quot;comments&quot;,&quot;objectGuid&quot;:&quot;${RSESSIONGUID}&quot;,&quot;sessionGuid&quot;:&quot;${SESSIONGUID}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/comet</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extract updateGuid" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject response = JsonObject.readFrom(jsonString);
	vars.put(&quot;UPDATEGUID&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
	vars.put(&quot;LAST_SUCCESS&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
} catch (Exception e) {
	vars.put(&quot;UPDATEGUID&quot;, &quot;NULL&quot;);
	IsSuccess = false;
	return false;
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="setRepeatCondition_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">String updateGuid = vars.get(&quot;UPDATEGUID&quot;);
boolean continueComet = vars.getObject(&quot;continueComet&quot;);
vars.putObject(&quot;continueRepeatComet&quot;, false);
if(updateGuid.equals(&quot;NULL&quot;) &amp;&amp; continueComet){
	vars.putObject(&quot;continueRepeatComet&quot;, true);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While cometInitial fails" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueRepeatComet&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_cometInitialRepeat" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;topic&quot;:&quot;comments&quot;,&quot;objectGuid&quot;:&quot;${RSESSIONGUID}&quot;,&quot;sessionGuid&quot;:&quot;${SESSIONGUID}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/comet</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extract updateGuid" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject response = JsonObject.readFrom(jsonString);
	vars.put(&quot;UPDATEGUID&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
	vars.put(&quot;LAST_SUCCESS&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
} catch (Exception e) {
	vars.put(&quot;UPDATEGUID&quot;, &quot;NULL&quot;);
	IsSuccess = false;
	return false;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkRepeatCondition_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">String updateGuid = vars.get(&quot;UPDATEGUID&quot;);
boolean continueComet = vars.getObject(&quot;continueComet&quot;);
vars.putObject(&quot;continueRepeatComet&quot;, false);
if(updateGuid.equals(&quot;NULL&quot;) &amp;&amp; continueComet){
	vars.putObject(&quot;continueRepeatComet&quot;, true);
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Review Session in progress" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueComet&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_comet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;topic&quot;:&quot;comments&quot;,&quot;objectGuid&quot;:&quot;${RSESSIONGUID}&quot;,&quot;updateGuid&quot;:${UPDATEGUID},&quot;sessionGuid&quot;:&quot;${SESSIONGUID}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/comet</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extract updateGuid" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject response = JsonObject.readFrom(jsonString);
	vars.put(&quot;UPDATEGUID&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
	vars.put(&quot;LAST_SUCCESS&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
} catch (Exception e) {
	vars.put(&quot;UPDATEGUID&quot;, &quot;NULL&quot;);
	IsSuccess = false;
	return false;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="setRepeatCondition_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">String updateGuid = vars.get(&quot;UPDATEGUID&quot;);
boolean continueComet = vars.getObject(&quot;continueComet&quot;);
vars.putObject(&quot;continueRepeatComet&quot;, false);
if(updateGuid.equals(&quot;NULL&quot;) &amp;&amp; continueComet){
	vars.putObject(&quot;continueRepeatComet&quot;, true);
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If UPDATEGUID = NULL" enabled="true">
              <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;continueRepeatComet&quot;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="setRepeatCondition_AUX" enabled="true">
                <stringProp name="BeanShellSampler.query">boolean continueComet = vars.getObject(&quot;continueComet&quot;);
vars.putObject(&quot;continueRepeatComet&quot;, false);
if(continueComet){
	vars.putObject(&quot;continueRepeatComet&quot;, true);
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While comet fails" enabled="true">
                <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueRepeatComet&quot;))}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_cometRepeat" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;topic&quot;:&quot;comments&quot;,&quot;objectGuid&quot;:&quot;${RSESSIONGUID}&quot;,&quot;updateGuid&quot;:${LAST_SUCCESS},&quot;sessionGuid&quot;:&quot;${SESSIONGUID}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/comet</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extract updateGuid" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject response = JsonObject.readFrom(jsonString);
	vars.put(&quot;UPDATEGUID&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
	vars.put(&quot;LAST_SUCCESS&quot;, response.get(&quot;updateGuid&quot;) + &quot;&quot;);
} catch (Exception e) {
	vars.put(&quot;UPDATEGUID&quot;, &quot;NULL&quot;);
	IsSuccess = false;
	return false;
}</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkRepeatCondition_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">String updateGuid = vars.get(&quot;UPDATEGUID&quot;);
boolean continueComet = vars.getObject(&quot;continueComet&quot;);
vars.putObject(&quot;continueRepeatComet&quot;, false);
if(updateGuid.equals(&quot;NULL&quot;) &amp;&amp; continueComet){
	vars.putObject(&quot;continueRepeatComet&quot;, true);
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="modifyContinueCondition_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean reviewInProgress = props.get(threadNum + &quot;_inProgress&quot;);
	if(reviewInProgress.booleanValue()){
		vars.putObject(&quot;continueComet&quot;, true);
	} else {
		vars.putObject(&quot;continueComet&quot;, false);
	}
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">multipart/form-data</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ReviewSession" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1456314744000</longProp>
        <longProp name="ThreadGroup.end_time">1456314744000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RS SETUP INFO_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;LCMS_HOST&quot;, &quot;https://studio-pps.dev.xyleme.com&quot;);
vars.put(&quot;LCMS_CLIENT&quot;, &quot;studio-pps.dev&quot;);
vars.put(&quot;RSESSIONGUID&quot;, &quot;333f1c2d-7511-4ba0-90a7-2a1416fb35e7&quot;);
vars.put(&quot;GUID&quot;, &quot;c3476422-ec0d-4559-ac89-a42e4d04fca1&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SPS_HOST" elementType="Argument">
              <stringProp name="Argument.name">SPS_HOST</stringProp>
              <stringProp name="Argument.value">https://sps.dev.xyleme.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="N_USERS" elementType="Argument">
              <stringProp name="Argument.name">N_USERS</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAGE_N" elementType="Argument">
              <stringProp name="Argument.name">PAGE_N</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TOKEN_N" elementType="Argument">
              <stringProp name="Argument.name">TOKEN_N</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AVERAGE_DELAY_MS" elementType="Argument">
              <stringProp name="Argument.name">AVERAGE_DELAY_MS</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STD_DEV_MS" elementType="Argument">
              <stringProp name="Argument.name">STD_DEV_MS</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OPEN_STATUS" elementType="Argument">
              <stringProp name="Argument.name">OPEN_STATUS</stringProp>
              <stringProp name="Argument.value">open</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REPLY_STATUS" elementType="Argument">
              <stringProp name="Argument.name">REPLY_STATUS</stringProp>
              <stringProp name="Argument.value">note</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COMPLETED_STATUS" elementType="Argument">
              <stringProp name="Argument.name">COMPLETED_STATUS</stringProp>
              <stringProp name="Argument.value">completed</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FLAGGED_STATUS" elementType="Argument">
              <stringProp name="Argument.name">FLAGGED_STATUS</stringProp>
              <stringProp name="Argument.value">flagged</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REJECTED_STATUS" elementType="Argument">
              <stringProp name="Argument.name">REJECTED_STATUS</stringProp>
              <stringProp name="Argument.value">rejected</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="VU_PREFIX" elementType="Argument">
              <stringProp name="Argument.name">VU_PREFIX</stringProp>
              <stringProp name="Argument.value">perf.user_</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PASSWORD</stringProp>
              <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MAX_ATTEMPTS_TO_SELECT_COMMENT_N" elementType="Argument">
              <stringProp name="Argument.name">MAX_ATTEMPTS_TO_SELECT_COMMENT_N</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OUTPUT_FOLDER" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_FOLDER</stringProp>
              <stringProp name="Argument.value">d:/Xyleme/performance/products/xpe/review_session/output/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DATA_FILES_PATH_LOCAL" elementType="Argument">
              <stringProp name="Argument.name">DATA_FILES_PATH_LOCAL</stringProp>
              <stringProp name="Argument.value">d:/Xyleme/performance/products/xpe/review_session/parsedXmlInfo/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DATA_FILES_PATH" elementType="Argument">
              <stringProp name="Argument.name">DATA_FILES_PATH</stringProp>
              <stringProp name="Argument.value">/home/ubuntu/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MAKE_PAUSE" elementType="Argument">
              <stringProp name="Argument.name">MAKE_PAUSE</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADD_FREQUENCY" elementType="Argument">
              <stringProp name="Argument.name">ADD_FREQUENCY</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REPLY_FREQUENCY" elementType="Argument">
              <stringProp name="Argument.name">REPLY_FREQUENCY</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FLAG_FREQUENCY" elementType="Argument">
              <stringProp name="Argument.name">FLAG_FREQUENCY</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="REJECT_FREQUENCY" elementType="Argument">
              <stringProp name="Argument.name">REJECT_FREQUENCY</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OPEN_FREQUENCY" elementType="Argument">
              <stringProp name="Argument.name">OPEN_FREQUENCY</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COMPLETE_FREQUENCY" elementType="Argument">
              <stringProp name="Argument.name">COMPLETE_FREQUENCY</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FIRST_ADD_COUNT" elementType="Argument">
              <stringProp name="Argument.name">FIRST_ADD_COUNT</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="INITIAL_SET_BEANSHELL_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
String path = vars.get(&quot;DATA_FILES_PATH_LOCAL&quot;);
/*path = vars.get(&quot;DATA_FILES_PATH&quot;);*/
File file = new File(path + vars.get(&quot;GUID&quot;) + &quot;_FRAGMENTS.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
String line;
int i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;fragmentguidSet_&quot; + i, line);
	i++;
}
file = new File(path + vars.get(&quot;GUID&quot;) + &quot;_PAGES.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;pageguidSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;COMMENT_PARAMS.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	String [] paramData = line.split(&quot;,&quot;);
	vars.put(&quot;serializedSet_&quot; + i, paramData[0]);
	vars.put(&quot;positionSet_&quot; + i, paramData[1]);
	i++;
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="initializeActionSequence_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
int firstAddCount = Integer.parseInt(vars.get(&quot;FIRST_ADD_COUNT&quot;));
int addFrequency = Integer.parseInt(vars.get(&quot;ADD_FREQUENCY&quot;));
int replyFrequency = Integer.parseInt(vars.get(&quot;REPLY_FREQUENCY&quot;));
int flagFrequency = Integer.parseInt(vars.get(&quot;FLAG_FREQUENCY&quot;));
int rejectFrequency = Integer.parseInt(vars.get(&quot;REJECT_FREQUENCY&quot;));
int openFrequency = Integer.parseInt(vars.get(&quot;OPEN_FREQUENCY&quot;));
int completeFrequency = Integer.parseInt(vars.get(&quot;COMPLETE_FREQUENCY&quot;));
int loops = Integer.parseInt(vars.get(&quot;LOOPS&quot;));
int addCount = loops * addFrequency / 100;
int replyCount = loops * replyFrequency / 100;
int flagCount = loops * flagFrequency / 100;
int rejectCount = loops * rejectFrequency / 100;
int openCount = loops * openFrequency / 100;
int completeCount = loops * completeFrequency / 100;
if((addCount + replyCount + flagCount + rejectCount + openCount + completeCount) &lt; loops){
	addCount = addCount + loops - (addCount + replyCount + flagCount + rejectCount + openCount + completeCount) - firstAddCount;
}
/*log.info(&quot;FREQUENCY=&quot; + addCount + &quot;:&quot; + replyCount + &quot;:&quot; + flagCount + &quot;:&quot; + rejectCount + &quot;:&quot; + openCount + &quot;:&quot; + completeCount);*/
List pull = new ArrayList();
for (int i = 1; i &lt;= addCount; i++){
	pull.add((byte)0);
}
for (int i = 1; i &lt;= replyCount; i++){
	pull.add((byte)1);
}
for (int i = 1; i &lt;= flagCount; i++){
	pull.add((byte)2);
}
for (int i = 1; i &lt;= rejectCount; i++){
	pull.add((byte)3);
}
for (int i = 1; i &lt;= openCount; i++){
	pull.add((byte)4);
}
for (int i = 1; i &lt;= completeCount; i++){
	pull.add((byte)5);
}
Collections.shuffle(pull);
for (int i = 1; i &lt;= firstAddCount; i++){
	pull.add(0, (byte)0);
}
byte[] action_values = new byte[pull.size()];
for(int i = 0; i &lt; pull.size(); i++){
	action_values[i] = pull.get(i);
	/*log.info(action_values[i] + &quot;&quot;);*/
}
vars.putObject(&quot;action_values&quot;, action_values);
int threadNum = ${__threadNum};
synchronized(props) {
	Boolean reviewInProgress = props.get(threadNum + &quot;_inProgress&quot;);
	if(reviewInProgress == null){
		props.put(threadNum + &quot;_inProgress&quot;, true);
	}
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);
vars.put(&quot;USERNAME&quot;, &quot;yevhen.leshchynskyy&quot;);
vars.put(&quot;PASSWORD&quot;, &quot;Qwerty1234&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS_HOST}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS_HOST}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="wirisServiceURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">wirisServiceURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;wirisServiceURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
vars.putObject(&quot;userNameChecker&quot;, false);
if (userName != null) {
	vars.putObject(&quot;userNameChecker&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If userName is not null" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;userNameChecker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}&amp;wirisServiceURL=${wirisServiceURL}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_sessionChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">boolean userNameChecker = vars.getObject(&quot;userNameChecker&quot;);
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
boolean loggedIn = false;
if(userNameChecker &amp;&amp; jSessionId != null){
	loggedIn = true;
}
vars.putObject(&quot;loggedIn&quot;, loggedIn);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user is logged in" enabled="true">
          <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;loggedIn&quot;))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LOOPS}</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="selectAction_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - add
 * 1 - reply
 * 2 - flag
 * 3 - reject
 * 4 - open
 * 5 - complete
 */
byte[] action_values = (byte[])vars.getObject(&quot;action_values&quot;);
Integer action_increment = (Integer)vars.getObject(&quot;action_INCREMENT&quot;);
if(action_increment == null) {
	action_increment = Integer.valueOf(0);
} else {
	action_increment = Integer.valueOf(action_increment.intValue() + 1);
}

vars.put(&quot;action_SWITCH_VALUE&quot;, new Byte(action_values[action_increment.byteValue()]).toString());
vars.putObject(&quot;action_INCREMENT&quot;, action_increment);
/*log.info(&quot;action_SWITCH_VALUE=&quot; + new Byte(action_values[action_increment.byteValue()]).toString());*/</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${action_SWITCH_VALUE}</stringProp>
            </SwitchController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ADD" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="defineTarget_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
int tokenN = Integer.parseInt(vars.get(&quot;TOKEN_N&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int tokenIndex = new Random().nextInt(tokenN) + 1;
int pageIndex = new Random().nextInt(pageN) + 1;
int sub;
/*
 * pageIndex = 1;
 * tokenIndex = 1;
 */
if(tokenIndex == 1 || tokenIndex == 2){
	sub = 2;
}
if(tokenIndex &gt;= 3 &amp;&amp; tokenIndex &lt;= 6){
	sub = 1;
}
if(tokenIndex &gt;= 7 &amp;&amp; tokenIndex &lt;= 10){
	sub = 0;
}
vars.put(&quot;SERIALIZEDSEL&quot;, vars.get(&quot;serializedSet_&quot; + tokenIndex));
vars.put(&quot;POSITION&quot;, vars.get(&quot;positionSet_&quot; + tokenIndex));
vars.put(&quot;PAGEID&quot;, vars.get(&quot;pageguidSet_&quot; + pageIndex));
vars.put(&quot;FRAGMENTGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 3 - sub)));</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="defineTargetPerUser_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
int threadN = Integer.parseInt(vars.get(&quot;THREADS&quot;));
int tokenN = Integer.parseInt(vars.get(&quot;TOKEN_N&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int tokenIndex = new Random().nextInt(tokenN) + 1;
int threadNum = ${__threadNum};
int min = (threadNum - 1) * pageN / threadN + 1;
int pageIndex = min + new Random().nextInt(pageN / threadN);
int sub;
/*
 * pageIndex = 1;
 * tokenIndex = 1;
 */
if(tokenIndex == 1 || tokenIndex == 2){
	sub = 2;
}
if(tokenIndex &gt;= 3 &amp;&amp; tokenIndex &lt;= 6){
	sub = 1;
}
if(tokenIndex &gt;= 7 &amp;&amp; tokenIndex &lt;= 10){
	sub = 0;
}
vars.put(&quot;SERIALIZEDSEL&quot;, vars.get(&quot;serializedSet_&quot; + tokenIndex));
vars.put(&quot;POSITION&quot;, vars.get(&quot;positionSet_&quot; + tokenIndex));
vars.put(&quot;PAGEID&quot;, vars.get(&quot;pageguidSet_&quot; + pageIndex));
vars.put(&quot;FRAGMENTGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 3 - sub)));
vars.put(&quot;pageIndex&quot;, pageIndex + &quot;&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_add" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;comment&quot;:{&quot;selection&quot;:{&quot;serializedSel&quot;:&quot;${SERIALIZEDSEL}&quot;,&quot;position&quot;:${POSITION},&quot;fragmentGuid&quot;:&quot;${FRAGMENTGUID}&quot;,&quot;type&quot;:&quot;text&quot;},&quot;text&quot;:&quot;comment_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;pageId&quot;:&quot;${PAGEID}&quot;,&quot;status&quot;:&quot;${OPEN_STATUS}&quot;,&quot;createdBy&quot;:{&quot;name&quot;:&quot;${userName}&quot;,&quot;email&quot;:&quot;${userEmail}&quot;,&quot;firstName&quot;:&quot;${userFirstName}&quot;,&quot;lastName&quot;:&quot;${userLastName}&quot;,&quot;fullName&quot;:&quot;${userFirstName} ${userLastName}&quot;,&quot;gravatar&quot;:&quot;dummy&quot;,&quot;client&quot;:&quot;${LCMS_CLIENT}&quot;,&quot;isAdmin&quot;:true},&quot;sessionGuid&quot;:&quot;${RSESSIONGUID}&quot;,&quot;fragmentGuid&quot;:&quot;${FRAGMENTGUID}&quot;},&quot;reviewGuid&quot;:&quot;${RSESSIONGUID}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/api/reviews/comments/add</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfo" enabled="false">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	commentDetails.put(&quot;inProgress&quot;, false);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap comments = sessions.get(sessionGuid);
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfoPerUser" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
String workStatus = vars.get(&quot;OPEN_STATUS&quot;);
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	String pageIndex = vars.get(&quot;pageIndex&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap pages = new HashMap();
			HashMap statuses = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			statuses.put(workStatus, comments);
			pages.put(pageIndex, statuses);
			sessions.put(sessionGuid, pages);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap pages = sessions.get(sessionGuid);
			HashMap statuses;
			HashMap comments;
			if(pages.containsKey(pageIndex)){
				statuses = pages.get(pageIndex);
				comments = statuses.get(workStatus);
			} else {
				statuses = new HashMap();
				comments = new HashMap();
			}
			comments.put(commentGuid, commentDetails);
			statuses.put(workStatus, comments);
			pages.put(pageIndex, statuses);
			sessions.put(sessionGuid, pages);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="REPLY" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="initializeIsStatusOk_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, false);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutReply_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
vars.putObject(&quot;commentExists&quot;, false);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		int size = comments.keySet().size();
		int item = new Random().nextInt(size);
		int i = 0;
		Iterator keySetIterator = comments.keySet().iterator();
		String commentGuid;
		while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
			commentGuid = keySetIterator.next();
			i = i + 1;
		}
		HashMap comment = comments.get(commentGuid);
		String pageId = comment.get(&quot;pageId&quot;);
		vars.put(&quot;commentGuid&quot;, commentGuid);
		vars.put(&quot;pageId&quot;, pageId);
	/*	vars.put(&quot;commentGuid&quot;, &quot;15180356-ff88-4fce-a1a4-7a3bc72a3c7a&quot;);
		vars.put(&quot;pageId&quot;, &quot;7973818a-a5a1-4349-aaf6-4d346ade9323&quot;);
	*/
		vars.putObject(&quot;commentExists&quot;, true);
	}
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutReplyWithCheckin_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
vars.putObject(&quot;commentExists&quot;, false);
int maxAttempts = Integer.parseInt(vars.get(&quot;MAX_ATTEMPTS_TO_SELECT_COMMENT_N&quot;));
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		int size = comments.keySet().size();
		int attemptsPerformed = 1;
		while(attemptsPerformed &lt;= maxAttempts){
			int item = new Random().nextInt(size);
			int i = 0;
			Iterator keySetIterator = comments.keySet().iterator();
			String commentGuid;
			while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
				commentGuid = keySetIterator.next();
				i = i + 1;
			}
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			boolean inProgress = comment.get(&quot;inProgress&quot;);
			if(!inProgress){
				String pageId = comment.get(&quot;pageId&quot;);
				vars.put(&quot;commentGuid&quot;, commentGuid);
				vars.put(&quot;pageId&quot;, pageId);
				vars.putObject(&quot;commentExists&quot;, true);
				comment.put(&quot;inProgress&quot;, true);
				comments.put(commentGuid, comment);
				sessions.put(sessionGuid, comments);
				props.put(&quot;sessions&quot;, sessions);
				ResponseCode = 200;
				IsSuccess = true;
				return true;
			}
			attemptsPerformed = attemptsPerformed + 1;
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutReplyPerUser_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
vars.putObject(&quot;commentExists&quot;, false);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
int threadN = Integer.parseInt(vars.get(&quot;THREADS&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int threadNum = ${__threadNum};
int min = (threadNum - 1) * pageN / threadN + 1;
int max = min + pageN / threadN - 1;
List statusList = new ArrayList();
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		Iterator pagesKeySetIterator = pages.keySet().iterator();
		List availablePages = new ArrayList();
		while(pagesKeySetIterator.hasNext()){
			int pageIndex = Integer.parseInt(pagesKeySetIterator.next());
			if(pageIndex &gt;= min &amp;&amp; pageIndex &lt;= max){
				availablePages.add(pageIndex);
			}
		}
		Collections.shuffle(availablePages);
		String pageIndex = availablePages.get(0).toString();
		HashMap statuses = pages.get(pageIndex);
		Iterator statusIterator = statuses.keySet().iterator();
		HashMap comments;
		String currentStatus;
		while(statusIterator.hasNext()){
			currentStatus = statusIterator.next();
			comments = statuses.get(currentStatus);
			if(comments.keySet().size() &gt; 0){
				statusList.add(currentStatus);
			}
		}
		int statusIndex = new Random().nextInt(statusList.size());
		currentStatus = statusList.get(statusIndex);
		comments = statuses.get(currentStatus);
		int size = comments.keySet().size();
		int item = new Random().nextInt(size);
		int i = 0;
		Iterator keySetIterator = comments.keySet().iterator();
		String commentGuid;
		while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
			commentGuid = keySetIterator.next();
			i = i + 1;
		}
		HashMap comment = comments.get(commentGuid);
		String status = comment.get(&quot;status&quot;);
		String pageId = comment.get(&quot;pageId&quot;);
		vars.put(&quot;commentGuid&quot;, commentGuid);
		vars.put(&quot;pageId&quot;, pageId);
		vars.put(&quot;pageIndex&quot;, pageIndex);
		vars.putObject(&quot;commentExists&quot;, true);
		ResponseCode = 200;
		IsSuccess = true;
		return true;
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check status" enabled="true">
                  <stringProp name="IfController.condition">&quot;${JMeterThread.last_sample_ok}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="putIsStatusOkToTrue_AUX" enabled="true">
                    <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, true);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = true" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_reply" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;text&quot;:&quot;reply_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;status&quot;:&quot;${REPLY_STATUS}&quot;,&quot;createdBy&quot;:{&quot;name&quot;:&quot;${userName}&quot;,&quot;email&quot;:&quot;${userEmail}&quot;,&quot;firstName&quot;:&quot;${userFirstName}&quot;,&quot;lastName&quot;:&quot;${userLastName}&quot;,&quot;fullName&quot;:&quot;${userFirstName} ${userLastName}&quot;,&quot;gravatar&quot;:&quot;dummy&quot;,&quot;client&quot;:&quot;${LCMS_CLIENT}&quot;,&quot;isAdmin&quot;:true},&quot;commentGuid&quot;:&quot;${commentGuid}&quot;,&quot;pageId&quot;:&quot;${pageId}&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/api/reviews/comments/update</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfo" enabled="false">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	commentDetails.put(&quot;inProgress&quot;, false);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap comments = sessions.get(sessionGuid);
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInReply_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		sessions.put(sessionGuid, comments);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInReplyPerUser_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String pageIndex = vars.get(&quot;pageIndex&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
String previousState = vars.get(&quot;PREVIOUS_STATE&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap statuses = pages.get(pageIndex);
		HashMap comments = statuses.get(previousState);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		statuses.put(previousState, comments);
		pages.put(pageIndex, statuses);
		sessions.put(sessionGuid, pages);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment NOT selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="replySkipped" enabled="true">
                      <boolProp name="WAITING">false</boolProp>
                      <boolProp name="SUCCESFULL">true</boolProp>
                      <stringProp name="RESPONSE_CODE">200</stringProp>
                      <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                      <stringProp name="REQUEST_DATA"></stringProp>
                      <stringProp name="RESPONSE_DATA"></stringProp>
                      <stringProp name="RESPONSE_TIME">1</stringProp>
                      <stringProp name="LATENCY">1</stringProp>
                    </kg.apc.jmeter.samplers.DummySampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = false" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="checkOutReplyFails" enabled="true">
                    <boolProp name="WAITING">false</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA"></stringProp>
                    <stringProp name="RESPONSE_DATA"></stringProp>
                    <stringProp name="RESPONSE_TIME">1</stringProp>
                    <stringProp name="LATENCY">1</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FLAG" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="initializeIsStatusOk_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, false);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutFlag_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
vars.putObject(&quot;commentExists&quot;, false);
int maxAttempts = Integer.parseInt(vars.get(&quot;MAX_ATTEMPTS_TO_SELECT_COMMENT_N&quot;));
String openStatus = vars.get(&quot;OPEN_STATUS&quot;);
String completedStatus = vars.get(&quot;COMPLETED_STATUS&quot;);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		int size = comments.keySet().size();
		int attemptsPerformed = 1;
		while(attemptsPerformed &lt;= maxAttempts){
			int item = new Random().nextInt(size);
			int i = 0;
			Iterator keySetIterator = comments.keySet().iterator();
			String commentGuid;
			while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
				commentGuid = keySetIterator.next();
				i = i + 1;
			}
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			boolean inProgress = comment.get(&quot;inProgress&quot;);
			if(!inProgress &amp;&amp; (status.equals(openStatus) || status.equals(completedStatus))){
				String pageId = comment.get(&quot;pageId&quot;);
				vars.put(&quot;commentGuid&quot;, commentGuid);
				vars.put(&quot;pageId&quot;, pageId);
				vars.putObject(&quot;commentExists&quot;, true);
				comment.put(&quot;inProgress&quot;, true);
				comments.put(commentGuid, comment);
				sessions.put(sessionGuid, comments);
				props.put(&quot;sessions&quot;, sessions);
				ResponseCode = 200;
				IsSuccess = true;
				return true;
			}
			attemptsPerformed = attemptsPerformed + 1;
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutFlagPerUser_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
String openStatus = vars.get(&quot;OPEN_STATUS&quot;);
String completedStatus = vars.get(&quot;COMPLETED_STATUS&quot;);
vars.putObject(&quot;commentExists&quot;, false);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
int threadN = Integer.parseInt(vars.get(&quot;THREADS&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int threadNum = ${__threadNum};
int min = (threadNum - 1) * pageN / threadN + 1;
int max = min + pageN / threadN - 1;
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap comments;
		String pageIndex;
		Iterator pagesKeySetIterator = pages.keySet().iterator();
		List availablePages = new ArrayList();
		while(pagesKeySetIterator.hasNext()){
			int pageIndex = Integer.parseInt(pagesKeySetIterator.next());
			if(pageIndex &gt;= min &amp;&amp; pageIndex &lt;= max){
				availablePages.add(pageIndex);
			}
		}
		String commentGuid = &quot;&quot;;
		for(int i = 0; i &lt; availablePages.size(); i++){
			HashMap openComments;
			HashMap completedComments;
			String openCommentGuid = &quot;&quot;;
			String completedCommentGuid = &quot;&quot;;
			pageIndex = availablePages.get(i).toString();
			HashMap statuses = pages.get(pageIndex);
			if(statuses.containsKey(openStatus)){
				openComments = statuses.get(openStatus);
				int commentsSize = openComments.keySet().size();
				if(commentsSize &gt; 0){
					int item = new Random().nextInt(commentsSize);
					int i = 0;
					Iterator keySetIterator = openComments.keySet().iterator();
					while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
						openCommentGuid = keySetIterator.next();
						i = i + 1;
					}
				}
			}
			if(statuses.containsKey(completedStatus)){
				completedComments = statuses.get(completedStatus);
				int commentsSize = completedComments.keySet().size();
				if(commentsSize &gt; 0){
					int item = new Random().nextInt(commentsSize);
					int i = 0;
					Iterator keySetIterator = completedComments.keySet().iterator();
					while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
						completedCommentGuid = keySetIterator.next();
						i = i + 1;
					}
				}
			}
			if(!openCommentGuid.equals(&quot;&quot;) &amp;&amp; !completedCommentGuid.equals(&quot;&quot;)){
				int item = new Random().nextInt(2);
				if(item == 0){
					commentGuid = openCommentGuid;
					comments = openComments;
				} else {
					commentGuid = completedCommentGuid;
					comments = completedComments;
				}
				break;
			}
			if(!openCommentGuid.equals(&quot;&quot;)){
				commentGuid = openCommentGuid;
				comments = openComments;
				break;
			}
			if(!completedCommentGuid.equals(&quot;&quot;)){
				commentGuid = completedCommentGuid;
				comments = completedComments;
				break;
			}
		}
		if(!commentGuid.equals(&quot;&quot;)){
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			vars.put(&quot;PREVIOUS_STATE&quot;, status);
			String pageId = comment.get(&quot;pageId&quot;);
			vars.put(&quot;commentGuid&quot;, commentGuid);
			vars.put(&quot;pageId&quot;, pageId);
			vars.put(&quot;pageIndex&quot;, pageIndex);
			vars.putObject(&quot;commentExists&quot;, true);
			ResponseCode = 200;
			IsSuccess = true;
			return true;
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check status" enabled="true">
                  <stringProp name="IfController.condition">&quot;${JMeterThread.last_sample_ok}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="putIsStatusOkToTrue_AUX" enabled="true">
                    <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, true);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = true" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_flag" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;text&quot;:&quot;reply_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;status&quot;:&quot;${FLAGGED_STATUS}&quot;,&quot;createdBy&quot;:{&quot;name&quot;:&quot;${userName}&quot;,&quot;email&quot;:&quot;${userEmail}&quot;,&quot;firstName&quot;:&quot;${userFirstName}&quot;,&quot;lastName&quot;:&quot;${userLastName}&quot;,&quot;fullName&quot;:&quot;${userFirstName} ${userLastName}&quot;,&quot;gravatar&quot;:&quot;dummy&quot;,&quot;client&quot;:&quot;${LCMS_CLIENT}&quot;,&quot;isAdmin&quot;:true},&quot;commentGuid&quot;:&quot;${commentGuid}&quot;,&quot;pageId&quot;:&quot;${pageId}&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/api/reviews/comments/update</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfo" enabled="false">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	commentDetails.put(&quot;inProgress&quot;, false);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap comments = sessions.get(sessionGuid);
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfoPerUser" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
String workStatus = vars.get(&quot;FLAGGED_STATUS&quot;);
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	String pageIndex = vars.get(&quot;pageIndex&quot;);
	String previousState = vars.get(&quot;PREVIOUS_STATE&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions != null) {
			HashMap pages = sessions.get(sessionGuid);
			HashMap statuses = pages.get(pageIndex);
			statuses.get(previousState).remove(commentGuid);
			HashMap comments;
			if(statuses.containsKey(workStatus)){
				comments = statuses.get(workStatus);
			} else {
				comments = new HashMap();
			}
			comments.put(commentGuid, commentDetails);
			statuses.put(workStatus, comments);
			pages.put(pageIndex, statuses);
			sessions.put(sessionGuid, pages);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInFlag_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		sessions.put(sessionGuid, comments);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInFlagPerUser_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String pageIndex = vars.get(&quot;pageIndex&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
String workStatus = vars.get(&quot;FLAGGED_STATUS&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap statuses = pages.get(pageIndex);
		HashMap comments = statuses.get(workStatus);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		statuses.put(previousState, comments);
		pages.put(pageIndex, statuses);
		sessions.put(sessionGuid, pages);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment NOT selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="flagSkipped" enabled="true">
                      <boolProp name="WAITING">false</boolProp>
                      <boolProp name="SUCCESFULL">true</boolProp>
                      <stringProp name="RESPONSE_CODE">200</stringProp>
                      <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                      <stringProp name="REQUEST_DATA"></stringProp>
                      <stringProp name="RESPONSE_DATA"></stringProp>
                      <stringProp name="RESPONSE_TIME">1</stringProp>
                      <stringProp name="LATENCY">1</stringProp>
                    </kg.apc.jmeter.samplers.DummySampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = false" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="checkOutFlagFails" enabled="true">
                    <boolProp name="WAITING">false</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA"></stringProp>
                    <stringProp name="RESPONSE_DATA"></stringProp>
                    <stringProp name="RESPONSE_TIME">1</stringProp>
                    <stringProp name="LATENCY">1</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="REJECT" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="initializeIsStatusOk_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, false);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutReject_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
vars.putObject(&quot;commentExists&quot;, false);
int maxAttempts = Integer.parseInt(vars.get(&quot;MAX_ATTEMPTS_TO_SELECT_COMMENT_N&quot;));
String openStatus = vars.get(&quot;OPEN_STATUS&quot;);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		int size = comments.keySet().size();
		int attemptsPerformed = 1;
		while(attemptsPerformed &lt;= maxAttempts){
			int item = new Random().nextInt(size);
			int i = 0;
			Iterator keySetIterator = comments.keySet().iterator();
			String commentGuid;
			while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
				commentGuid = keySetIterator.next();
				i = i + 1;
			}
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			boolean inProgress = comment.get(&quot;inProgress&quot;);
			if(!inProgress &amp;&amp; status.equals(openStatus)){
				String pageId = comment.get(&quot;pageId&quot;);
				vars.put(&quot;commentGuid&quot;, commentGuid);
				vars.put(&quot;pageId&quot;, pageId);
				vars.putObject(&quot;commentExists&quot;, true);
				comment.put(&quot;inProgress&quot;, true);
				comments.put(commentGuid, comment);
				sessions.put(sessionGuid, comments);
				props.put(&quot;sessions&quot;, sessions);
				ResponseCode = 200;
				IsSuccess = true;
				return true;
			}
			attemptsPerformed = attemptsPerformed + 1;
		}
	}
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutRejectPerUser_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
String openStatus = vars.get(&quot;OPEN_STATUS&quot;);
vars.putObject(&quot;commentExists&quot;, false);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
int threadN = Integer.parseInt(vars.get(&quot;THREADS&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int threadNum = ${__threadNum};
int min = (threadNum - 1) * pageN / threadN + 1;
int max = min + pageN / threadN - 1;
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap comments;
		String pageIndex;
		Iterator pagesKeySetIterator = pages.keySet().iterator();
		List availablePages = new ArrayList();
		while(pagesKeySetIterator.hasNext()){
			int pageIndex = Integer.parseInt(pagesKeySetIterator.next());
			if(pageIndex &gt;= min &amp;&amp; pageIndex &lt;= max){
				availablePages.add(pageIndex);
			}
		}
		String commentGuid = &quot;&quot;;
		for(int i = 0; i &lt; availablePages.size(); i++){
			HashMap openComments;
			String openCommentGuid = &quot;&quot;;
			pageIndex = availablePages.get(i).toString();
			HashMap statuses = pages.get(pageIndex);
			if(statuses.containsKey(openStatus)){
				openComments = statuses.get(openStatus);
				int commentsSize = openComments.keySet().size();
				if(commentsSize &gt; 0){
					int item = new Random().nextInt(commentsSize);
					int i = 0;
					Iterator keySetIterator = openComments.keySet().iterator();
					while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
						openCommentGuid = keySetIterator.next();
						i = i + 1;
					}
				}
			}
			if(!openCommentGuid.equals(&quot;&quot;)){
				commentGuid = openCommentGuid;
				comments = openComments;
				break;
			}
		}
		if(!commentGuid.equals(&quot;&quot;)){
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			vars.put(&quot;PREVIOUS_STATE&quot;, status);
			String pageId = comment.get(&quot;pageId&quot;);
			vars.put(&quot;commentGuid&quot;, commentGuid);
			vars.put(&quot;pageId&quot;, pageId);
			vars.put(&quot;pageIndex&quot;, pageIndex);
			vars.putObject(&quot;commentExists&quot;, true);
			ResponseCode = 200;
			IsSuccess = true;
			return true;
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check status" enabled="true">
                  <stringProp name="IfController.condition">&quot;${JMeterThread.last_sample_ok}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="putIsStatusOkToTrue_AUX" enabled="true">
                    <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, true);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = true" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_reject" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;text&quot;:&quot;reply_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;status&quot;:&quot;${REJECTED_STATUS}&quot;,&quot;createdBy&quot;:{&quot;name&quot;:&quot;${userName}&quot;,&quot;email&quot;:&quot;${userEmail}&quot;,&quot;firstName&quot;:&quot;${userFirstName}&quot;,&quot;lastName&quot;:&quot;${userLastName}&quot;,&quot;fullName&quot;:&quot;${userFirstName} ${userLastName}&quot;,&quot;gravatar&quot;:&quot;dummy&quot;,&quot;client&quot;:&quot;${LCMS_CLIENT}&quot;,&quot;isAdmin&quot;:true},&quot;commentGuid&quot;:&quot;${commentGuid}&quot;,&quot;pageId&quot;:&quot;${pageId}&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/api/reviews/comments/update</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfo" enabled="false">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	commentDetails.put(&quot;inProgress&quot;, false);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap comments = sessions.get(sessionGuid);
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfoPerUser" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
String workStatus = vars.get(&quot;REJECTED_STATUS&quot;);
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	String pageIndex = vars.get(&quot;pageIndex&quot;);
	String previousState = vars.get(&quot;PREVIOUS_STATE&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions != null) {
			HashMap pages = sessions.get(sessionGuid);
			HashMap statuses = pages.get(pageIndex);
			statuses.get(previousState).remove(commentGuid);
			HashMap comments;
			if(statuses.containsKey(workStatus)){
				comments = statuses.get(workStatus);
			} else {
				comments = new HashMap();
			}
			comments.put(commentGuid, commentDetails);
			statuses.put(workStatus, comments);
			pages.put(pageIndex, statuses);
			sessions.put(sessionGuid, pages);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInReject_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		sessions.put(sessionGuid, comments);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInRejectPerUser_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String pageIndex = vars.get(&quot;pageIndex&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
String workStatus = vars.get(&quot;REJECTED_STATUS&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap statuses = pages.get(pageIndex);
		HashMap comments = statuses.get(workStatus);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		statuses.put(previousState, comments);
		pages.put(pageIndex, statuses);
		sessions.put(sessionGuid, pages);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment NOT selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="rejectSkipped" enabled="true">
                      <boolProp name="WAITING">false</boolProp>
                      <boolProp name="SUCCESFULL">true</boolProp>
                      <stringProp name="RESPONSE_CODE">200</stringProp>
                      <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                      <stringProp name="REQUEST_DATA"></stringProp>
                      <stringProp name="RESPONSE_DATA"></stringProp>
                      <stringProp name="RESPONSE_TIME">1</stringProp>
                      <stringProp name="LATENCY">1</stringProp>
                    </kg.apc.jmeter.samplers.DummySampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = false" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="checkOutRejectFails" enabled="true">
                    <boolProp name="WAITING">false</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA"></stringProp>
                    <stringProp name="RESPONSE_DATA"></stringProp>
                    <stringProp name="RESPONSE_TIME">1</stringProp>
                    <stringProp name="LATENCY">1</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OPEN" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="initializeIsStatusOk_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, false);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutOpen_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
vars.putObject(&quot;commentExists&quot;, false);
int maxAttempts = Integer.parseInt(vars.get(&quot;MAX_ATTEMPTS_TO_SELECT_COMMENT_N&quot;));
String flaggedStatus = vars.get(&quot;FLAGGED_STATUS&quot;);
String rejectedStatus = vars.get(&quot;REJECTED_STATUS&quot;);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		int size = comments.keySet().size();
		int attemptsPerformed = 1;
		while(attemptsPerformed &lt;= maxAttempts){
			int item = new Random().nextInt(size);
			int i = 0;
			Iterator keySetIterator = comments.keySet().iterator();
			String commentGuid;
			while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
				commentGuid = keySetIterator.next();
				i = i + 1;
			}
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			boolean inProgress = comment.get(&quot;inProgress&quot;);
			if(!inProgress &amp;&amp; (status.equals(flaggedStatus) || status.equals(rejectedStatus))){
				String pageId = comment.get(&quot;pageId&quot;);
				vars.put(&quot;commentGuid&quot;, commentGuid);
				vars.put(&quot;pageId&quot;, pageId);
				vars.putObject(&quot;commentExists&quot;, true);
				comment.put(&quot;inProgress&quot;, true);
				comments.put(commentGuid, comment);
				sessions.put(sessionGuid, comments);
				props.put(&quot;sessions&quot;, sessions);
				ResponseCode = 200;
				IsSuccess = true;
				return true;
			}
			attemptsPerformed = attemptsPerformed + 1;
		}
	}
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutOpenPerUser_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
String flaggedStatus = vars.get(&quot;FLAGGED_STATUS&quot;);
String rejectedStatus = vars.get(&quot;REJECTED_STATUS&quot;);
vars.putObject(&quot;commentExists&quot;, false);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
int threadN = Integer.parseInt(vars.get(&quot;THREADS&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int threadNum = ${__threadNum};
int min = (threadNum - 1) * pageN / threadN + 1;
int max = min + pageN / threadN - 1;
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap comments;
		String pageIndex;
		Iterator pagesKeySetIterator = pages.keySet().iterator();
		List availablePages = new ArrayList();
		while(pagesKeySetIterator.hasNext()){
			int pageIndex = Integer.parseInt(pagesKeySetIterator.next());
			if(pageIndex &gt;= min &amp;&amp; pageIndex &lt;= max){
				availablePages.add(pageIndex);
			}
		}
		String commentGuid = &quot;&quot;;
		for(int i = 0; i &lt; availablePages.size(); i++){
			HashMap flaggedComments;
			HashMap rejectedComments;
			String flaggedCommentGuid = &quot;&quot;;
			String rejectedCommentGuid = &quot;&quot;;
			pageIndex = availablePages.get(i).toString();
			HashMap statuses = pages.get(pageIndex);
			if(statuses.containsKey(flaggedStatus)){
				flaggedComments = statuses.get(flaggedStatus);
				int commentsSize = flaggedComments.keySet().size();
				if(commentsSize &gt; 0){
					int item = new Random().nextInt(commentsSize);
					int i = 0;
					Iterator keySetIterator = flaggedComments.keySet().iterator();
					while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
						flaggedCommentGuid = keySetIterator.next();
						i = i + 1;
					}
				}
			}
			if(statuses.containsKey(rejectedStatus)){
				rejectedComments = statuses.get(rejectedStatus);
				int commentsSize = rejectedComments.keySet().size();
				if(commentsSize &gt; 0){
					int item = new Random().nextInt(commentsSize);
					int i = 0;
					Iterator keySetIterator = rejectedComments.keySet().iterator();
					while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
						rejectedCommentGuid = keySetIterator.next();
						i = i + 1;
					}
				}
			}
			if(!flaggedCommentGuid.equals(&quot;&quot;) &amp;&amp; !rejectedCommentGuid.equals(&quot;&quot;)){
				int item = new Random().nextInt(2);
				if(item == 0){
					commentGuid = flaggedCommentGuid;
					comments = flaggedComments;
				} else {
					commentGuid = rejectedCommentGuid;
					comments = rejectedComments;
				}
				break;
			}
			if(!flaggedCommentGuid.equals(&quot;&quot;)){
				commentGuid = flaggedCommentGuid;
				comments = flaggedComments;
				break;
			}
			if(!rejectedCommentGuid.equals(&quot;&quot;)){
				commentGuid = rejectedCommentGuid;
				comments = rejectedComments;
				break;
			}
		}
		if(!commentGuid.equals(&quot;&quot;)){
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			vars.put(&quot;PREVIOUS_STATE&quot;, status);
			String pageId = comment.get(&quot;pageId&quot;);
			vars.put(&quot;commentGuid&quot;, commentGuid);
			vars.put(&quot;pageId&quot;, pageId);
			vars.put(&quot;pageIndex&quot;, pageIndex);
			vars.putObject(&quot;commentExists&quot;, true);
			ResponseCode = 200;
			IsSuccess = true;
			return true;
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check status" enabled="true">
                  <stringProp name="IfController.condition">&quot;${JMeterThread.last_sample_ok}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="putIsStatusOkToTrue_AUX" enabled="true">
                    <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, true);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = true" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_open" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;text&quot;:&quot;reply_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;status&quot;:&quot;${OPEN_STATUS}&quot;,&quot;createdBy&quot;:{&quot;name&quot;:&quot;${userName}&quot;,&quot;email&quot;:&quot;${userEmail}&quot;,&quot;firstName&quot;:&quot;${userFirstName}&quot;,&quot;lastName&quot;:&quot;${userLastName}&quot;,&quot;fullName&quot;:&quot;${userFirstName} ${userLastName}&quot;,&quot;gravatar&quot;:&quot;dummy&quot;,&quot;client&quot;:&quot;${LCMS_CLIENT}&quot;,&quot;isAdmin&quot;:true},&quot;commentGuid&quot;:&quot;${commentGuid}&quot;,&quot;pageId&quot;:&quot;${pageId}&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/api/reviews/comments/update</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfo" enabled="false">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	commentDetails.put(&quot;inProgress&quot;, false);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap comments = sessions.get(sessionGuid);
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfoPerUser" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
String workStatus = vars.get(&quot;OPEN_STATUS&quot;);
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	String pageIndex = vars.get(&quot;pageIndex&quot;);
	String previousState = vars.get(&quot;PREVIOUS_STATE&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions != null) {
			HashMap pages = sessions.get(sessionGuid);
			HashMap statuses = pages.get(pageIndex);
			statuses.get(previousState).remove(commentGuid);
			HashMap comments = statuses.get(workStatus);
			comments.put(commentGuid, commentDetails);
			statuses.put(workStatus, comments);
			pages.put(pageIndex, statuses);
			sessions.put(sessionGuid, pages);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInOpen_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		sessions.put(sessionGuid, comments);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInOpenPerUser_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String pageIndex = vars.get(&quot;pageIndex&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
String workStatus = vars.get(&quot;OPEN_STATUS&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap statuses = pages.get(pageIndex);
		HashMap comments = statuses.get(workStatus);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		statuses.put(previousState, comments);
		pages.put(pageIndex, statuses);
		sessions.put(sessionGuid, pages);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment NOT selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="openSkipped" enabled="true">
                      <boolProp name="WAITING">false</boolProp>
                      <boolProp name="SUCCESFULL">true</boolProp>
                      <stringProp name="RESPONSE_CODE">200</stringProp>
                      <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                      <stringProp name="REQUEST_DATA"></stringProp>
                      <stringProp name="RESPONSE_DATA"></stringProp>
                      <stringProp name="RESPONSE_TIME">1</stringProp>
                      <stringProp name="LATENCY">1</stringProp>
                    </kg.apc.jmeter.samplers.DummySampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = false" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="checkOutOpenFails" enabled="true">
                    <boolProp name="WAITING">false</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA"></stringProp>
                    <stringProp name="RESPONSE_DATA"></stringProp>
                    <stringProp name="RESPONSE_TIME">1</stringProp>
                    <stringProp name="LATENCY">1</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="COMPLETE" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="initializeIsStatusOk_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, false);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutComplete_AUX" enabled="false">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
vars.putObject(&quot;commentExists&quot;, false);
int maxAttempts = Integer.parseInt(vars.get(&quot;MAX_ATTEMPTS_TO_SELECT_COMMENT_N&quot;));
String flaggedStatus = vars.get(&quot;FLAGGED_STATUS&quot;);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		int size = comments.keySet().size();
		int attemptsPerformed = 1;
		while(attemptsPerformed &lt;= maxAttempts){
			int item = new Random().nextInt(size);
			int i = 0;
			Iterator keySetIterator = comments.keySet().iterator();
			String commentGuid;
			while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
				commentGuid = keySetIterator.next();
				i = i + 1;
			}
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			boolean inProgress = comment.get(&quot;inProgress&quot;);
			if(!inProgress &amp;&amp; status.equals(flaggedStatus)){
				String pageId = comment.get(&quot;pageId&quot;);
				vars.put(&quot;commentGuid&quot;, commentGuid);
				vars.put(&quot;pageId&quot;, pageId);
				vars.putObject(&quot;commentExists&quot;, true);
				comment.put(&quot;inProgress&quot;, true);
				comments.put(commentGuid, comment);
				sessions.put(sessionGuid, comments);
				props.put(&quot;sessions&quot;, sessions);
				ResponseCode = 200;
				IsSuccess = true;
				return true;
			}
			attemptsPerformed = attemptsPerformed + 1;
		}
	}
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkOutCompletePerUser_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
String flaggedStatus = vars.get(&quot;FLAGGED_STATUS&quot;);
vars.putObject(&quot;commentExists&quot;, false);
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
int threadN = Integer.parseInt(vars.get(&quot;THREADS&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int threadNum = ${__threadNum};
int min = (threadNum - 1) * pageN / threadN + 1;
int max = min + pageN / threadN - 1;
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap comments;
		String pageIndex;
		Iterator pagesKeySetIterator = pages.keySet().iterator();
		List availablePages = new ArrayList();
		while(pagesKeySetIterator.hasNext()){
			int pageIndex = Integer.parseInt(pagesKeySetIterator.next());
			if(pageIndex &gt;= min &amp;&amp; pageIndex &lt;= max){
				availablePages.add(pageIndex);
			}
		}
		String commentGuid = &quot;&quot;;
		for(int i = 0; i &lt; availablePages.size(); i++){
			HashMap flaggedComments;
			String flaggedCommentGuid = &quot;&quot;;
			pageIndex = availablePages.get(i).toString();
			HashMap statuses = pages.get(pageIndex);
			if(statuses.containsKey(flaggedStatus)){
				flaggedComments = statuses.get(flaggedStatus);
				int commentsSize = flaggedComments.keySet().size();
				if(commentsSize &gt; 0){
					int item = new Random().nextInt(commentsSize);
					int i = 0;
					Iterator keySetIterator = flaggedComments.keySet().iterator();
					while(keySetIterator.hasNext() &amp;&amp; (i &lt;= item)){
						flaggedCommentGuid = keySetIterator.next();
						i = i + 1;
					}
				}
			}
			if(!flaggedCommentGuid.equals(&quot;&quot;)){
				commentGuid = flaggedCommentGuid;
				comments = flaggedComments;
				break;
			}
		}
		if(!commentGuid.equals(&quot;&quot;)){
			HashMap comment = comments.get(commentGuid);
			String status = comment.get(&quot;status&quot;);
			vars.put(&quot;PREVIOUS_STATE&quot;, status);
			String pageId = comment.get(&quot;pageId&quot;);
			vars.put(&quot;commentGuid&quot;, commentGuid);
			vars.put(&quot;pageId&quot;, pageId);
			vars.put(&quot;pageIndex&quot;, pageIndex);
			vars.putObject(&quot;commentExists&quot;, true);
			ResponseCode = 200;
			IsSuccess = true;
			return true;
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check status" enabled="true">
                  <stringProp name="IfController.condition">&quot;${JMeterThread.last_sample_ok}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="putIsStatusOkToTrue_AUX" enabled="true">
                    <stringProp name="BeanShellSampler.query">vars.putObject(&quot;isStatusOK&quot;, true);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = true" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RS_complete" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;text&quot;:&quot;reply_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;status&quot;:&quot;${COMPLETED_STATUS}&quot;,&quot;createdBy&quot;:{&quot;name&quot;:&quot;${userName}&quot;,&quot;email&quot;:&quot;${userEmail}&quot;,&quot;firstName&quot;:&quot;${userFirstName}&quot;,&quot;lastName&quot;:&quot;${userLastName}&quot;,&quot;fullName&quot;:&quot;${userFirstName} ${userLastName}&quot;,&quot;gravatar&quot;:&quot;dummy&quot;,&quot;client&quot;:&quot;${LCMS_CLIENT}&quot;,&quot;isAdmin&quot;:true},&quot;commentGuid&quot;:&quot;${commentGuid}&quot;,&quot;pageId&quot;:&quot;${pageId}&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS_HOST}/${LCMS_CLIENT}/api/reviews/comments/update</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfo" enabled="false">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	commentDetails.put(&quot;inProgress&quot;, false);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions == null) {
			HashMap sessions = new HashMap();
			HashMap comments = new HashMap();
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		} else {
			HashMap comments = sessions.get(sessionGuid);
			comments.put(commentGuid, commentDetails);
			sessions.put(sessionGuid, comments);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="extractCommentInfoPerUser" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import com.eclipsesource.json.*;
import java.util.HashMap;
String jsonString = prev.getResponseDataAsString();
String workStatus = vars.get(&quot;COMPLETED_STATUS&quot;);
try {
	JsonObject comment = JsonObject.readFrom(jsonString);
	String commentGuid = comment.get(&quot;commentGuid&quot;).asString();
	String pageId = comment.get(&quot;pageId&quot;).asString();
	String status = comment.get(&quot;status&quot;).asString();
	HashMap commentDetails = new HashMap();
	commentDetails.put(&quot;pageId&quot;, pageId);
	commentDetails.put(&quot;status&quot;, status);
	String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
	String pageIndex = vars.get(&quot;pageIndex&quot;);
	String previousState = vars.get(&quot;PREVIOUS_STATE&quot;);
	synchronized(props) {
		HashMap sessions = props.get(&quot;sessions&quot;);
		if(sessions != null) {
			HashMap pages = sessions.get(sessionGuid);
			HashMap statuses = pages.get(pageIndex);
			statuses.get(previousState).remove(commentGuid);
			HashMap comments;
			if(statuses.containsKey(workStatus)){
				comments = statuses.get(workStatus);
			} else {
				comments = new HashMap();
			}
			comments.put(commentGuid, commentDetails);
			statuses.put(workStatus, comments);
			pages.put(pageIndex, statuses);
			sessions.put(sessionGuid, pages);
			props.put(&quot;sessions&quot;, sessions);
		}
	}
} catch (Exception e) {
	IsSuccess = false;
	return false;
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInComplete_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap comments = sessions.get(sessionGuid);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		sessions.put(sessionGuid, comments);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkInCompletePerUser_AUX" enabled="false">
                      <stringProp name="BeanShellSampler.query">import java.util.HashMap;
String sessionGuid = vars.get(&quot;RSESSIONGUID&quot;);
String pageIndex = vars.get(&quot;pageIndex&quot;);
String commentGuid = vars.get(&quot;commentGuid&quot;);
String workStatus = vars.get(&quot;COMPLETED_STATUS&quot;);
synchronized(props) {
	HashMap sessions = props.get(&quot;sessions&quot;);
	if(sessions != null) {
		HashMap pages = sessions.get(sessionGuid);
		HashMap statuses = pages.get(pageIndex);
		HashMap comments = statuses.get(workStatus);
		HashMap comment = comments.get(commentGuid);
		comment.put(&quot;inProgress&quot;, false);
		comments.put(commentGuid, comment);
		statuses.put(previousState, comments);
		pages.put(pageIndex, statuses);
		sessions.put(sessionGuid, pages);
		props.put(&quot;sessions&quot;, sessions);
	}
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment NOT selected" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;commentExists&quot;))}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="completeSkipped" enabled="true">
                      <boolProp name="WAITING">false</boolProp>
                      <boolProp name="SUCCESFULL">true</boolProp>
                      <stringProp name="RESPONSE_CODE">200</stringProp>
                      <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                      <stringProp name="REQUEST_DATA"></stringProp>
                      <stringProp name="RESPONSE_DATA"></stringProp>
                      <stringProp name="RESPONSE_TIME">1</stringProp>
                      <stringProp name="LATENCY">1</stringProp>
                    </kg.apc.jmeter.samplers.DummySampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isStatusOK = false" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(!vars.getObject(&quot;isStatusOK&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="checkOutCompleteFails" enabled="true">
                    <boolProp name="WAITING">false</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA"></stringProp>
                    <stringProp name="RESPONSE_DATA"></stringProp>
                    <stringProp name="RESPONSE_TIME">1</stringProp>
                    <stringProp name="LATENCY">1</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
              <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="thinkTime_AUX" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="calculateDelayBeanShell" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;int average = Integer.parseInt(vars.get(&quot;AVERAGE_DELAY_MS&quot;));int std = Integer.parseInt(vars.get(&quot;STD_DEV_MS&quot;));Random r = new Random();double val = r.nextGaussian() * std + average;int millisDelay = (int) Math.round(val);if(millisDelay &lt; 0){	millisDelay = 5000;}vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">${delay}</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="finishReviewSession_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean reviewInProgress = props.get(threadNum + &quot;_inProgress&quot;);
	if(reviewInProgress != null){
		props.put(threadNum + &quot;_inProgress&quot;, false);
	}
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">multipart/form-data</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1465997822000</longProp>
        <longProp name="ThreadGroup.end_time">1465997822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="log_AUX" enabled="false">
          <stringProp name="BeanShellSampler.query">HashMap sessions = props.get(&quot;sessions&quot;);
if(sessions == null) {
	log.info(&quot;##################################print: sessions=NULL&quot;);
} else {
	log.info(&quot;##################################print: sessions is not NULL&quot;);
	HashMap comments;
	for (String sessionGuid : sessions.keySet()) {
		for (String commentGuid : sessions.get(sessionGuid).keySet()) {
			comments = sessions.get(sessionGuid);
			log.info(&quot;sessionGuid=&quot; + sessionGuid + 
			&quot;, commentGuid=&quot; + commentGuid + 
	     	&quot;, pageId=&quot; + comments.get(commentGuid).get(&quot;pageId&quot;) + 
     		&quot;, status=&quot; + comments.get(commentGuid).get(&quot;status&quot;) + 
     		&quot;, inProgress=&quot; + comments.get(commentGuid).get(&quot;inProgress&quot;));
		}
     }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="log_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">HashMap sessions = props.get(&quot;sessions&quot;);
if(sessions == null) {
	log.info(&quot;////////////////////////////TEARDOWN: sessions=NULL&quot;);
} else {
	log.info(&quot;////////////////////////////TEARDOWN: sessions is not NULL&quot;);
	HashMap comments;
	for (String sessionGuid : sessions.keySet()) {
		log.info(&quot;PAGES: &quot; + sessions.get(sessionGuid).keySet().size());
		for (String pageIndex : sessions.get(sessionGuid).keySet()) {
			for (String status : sessions.get(sessionGuid).get(pageIndex).keySet()) {
//				log.info(&quot;COMMENTS: &quot; + sessions.get(sessionGuid).get(pageIndex).get(status).keySet().size());
				for (String commentGuid : sessions.get(sessionGuid).get(pageIndex).get(status).keySet()) {
					comments = sessions.get(sessionGuid).get(pageIndex).get(status);
					log.info(&quot;sessionGuid=&quot; + sessionGuid + 
					&quot;, pageIndex=&quot; + pageIndex + 
					&quot;, category=&quot; + status.toUpperCase() + 
					&quot;, commentGuid=&quot; + commentGuid + 
			     	&quot;, pageId=&quot; + comments.get(commentGuid).get(&quot;pageId&quot;) + 
		     		&quot;, status=&quot; + comments.get(commentGuid).get(&quot;status&quot;));
				}
			}
		}
     }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">multipart/form-data</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${OUTPUT_FOLDER}${__javaScript(new Date().getTime())}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
