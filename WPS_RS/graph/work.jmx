<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="WPS_RS" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="RSESSIONGUID" elementType="Argument">
            <stringProp name="Argument.name">RSESSIONGUID</stringProp>
            <stringProp name="Argument.value">ca17f3e9-3827-4980-8ef8-f1ce6a3eb4ce</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GUID" elementType="Argument">
            <stringProp name="Argument.name">GUID</stringProp>
            <stringProp name="Argument.value">c3476422-ec0d-4559-ac89-a42e4d04fca1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OPEN_STATUS" elementType="Argument">
            <stringProp name="Argument.name">OPEN_STATUS</stringProp>
            <stringProp name="Argument.value">Open</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APPROVED_STATUS" elementType="Argument">
            <stringProp name="Argument.name">APPROVED_STATUS</stringProp>
            <stringProp name="Argument.value">Approved</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REJECTED_STATUS" elementType="Argument">
            <stringProp name="Argument.name">REJECTED_STATUS</stringProp>
            <stringProp name="Argument.value">Rejected</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XPE_HOST" elementType="Argument">
            <stringProp name="Argument.name">XPE_HOST</stringProp>
            <stringProp name="Argument.value">xpe-perf.qa.xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">lcms-isolated.xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LCMS_INSTANCE" elementType="Argument">
            <stringProp name="Argument.name">LCMS_INSTANCE</stringProp>
            <stringProp name="Argument.value">lcms-isolated-10280</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">10280</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="N_USERS" elementType="Argument">
            <stringProp name="Argument.name">N_USERS</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VU_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">VU_PREFIX</stringProp>
            <stringProp name="Argument.value">xpe_perf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MACHINES" elementType="Argument">
            <stringProp name="Argument.name">MACHINES</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TOKEN_N" elementType="Argument">
            <stringProp name="Argument.name">TOKEN_N</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAGE_N" elementType="Argument">
            <stringProp name="Argument.name">PAGE_N</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATA_FILES_PATH" elementType="Argument">
            <stringProp name="Argument.name">DATA_FILES_PATH</stringProp>
            <stringProp name="Argument.value">d:/Xyleme/performance/products/xpe/review_session/22-Feb-2016/TEST_1/graph/data/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1414062625000</longProp>
        <longProp name="ThreadGroup.end_time">1414062625000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);
vars.put(&quot;PASSWORD&quot;, &quot;5oMeTh1n65ecrEt&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVERAGE_DELAY_MS&quot;, &quot;30000&quot;);
vars.put(&quot;STD_DEV_MS&quot;, &quot;10000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="INITIAL_SET_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
String path = vars.get(&quot;DATA_FILES_PATH&quot;);
File file = new File(path + &quot;CONTAINERS.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
String line;
int i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;containerguidSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;FRAGMENTS.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;fragmentguidSet_&quot; + i, line);
	vars.put(&quot;rangestartguidSet_&quot; + i, line);
	vars.put(&quot;rangeendguidSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;RANGESTARTINDEX.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;rangestartindexSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;RANGESTARTPATH.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;rangestartpathSet_&quot; + i, line);
	vars.put(&quot;rangeendpathSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;RANGESTARTINDEX.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;rangestartindexSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;RANGEENDINDEX.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;rangeendindexSet_&quot; + i, line);
	i++;
}
file = new File(path + &quot;SELECTIONTEXT.txt&quot;);
reader = new BufferedReader(new FileReader(file));
i = 1;
while ((line = reader.readLine()) != null) {
	vars.put(&quot;selectiontextSet_&quot; + i, line);
	i++;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=10&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2P5vV5X59jDuLgu4Ifvq9EhNIr0zq3uDDJvQE6rAMLm87BYSIqNSPsNz42%2FbvW16d9luC%2Ft%2B%2BUzHXQjzCudt1GnJT7bVpzOXQL7RgKQ8p%2BQ4197s6LBNby2vyROElSEsZbAoIpgz%2B6jTf%2B%2Ffe%2BzYMgft9zTEt%2Fmsef7BkMISu1Mf9v03%2F7fJwo1LCfNwliCH714VzISxLW0IGqjLPDuTELekiNsYtfU6H8SwzcQSs%2FvJei%2F1jazY5NzlX2HQQt6hdRGha3VWjvvXEEt7kzMFTTqDWQXrWXDl7SfksAxJjLg%2Ftlu%2BJ8lsdrArBqENZklLOOhsVkimNZwH1HyAz%2BSKHOgW6wg8DoCOoFPlU8pj7GRGxxC4ulR4I8ofZRRxq9fkHPHqE6%2F0TsGNRWD9CBe1f3eU85nM7k8yQAiBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz%2B%2FTqPMA5YzsXbHMi9f44kDRI%2B1asui8mlGOOnCTsfkUUFTyPzu5d2izbVnpwlomGK%2B1mJAZR7dnv50JwxckcrGsmexmrsaQzWaM27mimcn7uVC82hoXSN1%2FVPFu5PXwE1HyXJBQEn5yduoJUWzuQfZq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4ve8HmsQB7KfH5jxMnITH5wQKCKYM%2Fuo038GJjJXqIeZ%2FuGgfOh1eDK8H3gH8t%2BBMY5bliCJ6cltQvLnYgm9a5nGNOQtaWllq4Zh0wNPIrRMdqLFNft7fIbZaxLnkCRbGQudwnoGCOOM53wwq%2Fl7m9oLtdafD9kiHPfZ0l42ABy7BaVW6WzhhCxdyzw7J8nyqwVMwth3ZyYYzAwTif%2BMs6%2FreIxd%2FZk7XP%2Bo0BCHIYXUCobIxCY8iOYemeeGhLHn3WZdWk5UNwzNwbHz7%2FVRrftRKWbs5KzuYqlD6agJRvEUjncaCdTSHr1mQC81ZP%2BPkjmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqBYKVda%2B2pPztCuReJFg1uzCz%2BsD2bbpvrsLM1FbA2tKWiGSg2UP6gNPzvqYijw%2BFpu48DINEq92Z%2BZh7wd6aTJIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7Tvkvvnzv2j77RUZwLY3rvWEhS%2B8Ga17ReRw95gzEZxnRCEZn1ydZW%2FNAQp%2B%2B6OYmqGywBRsVkimNZwH1RON5D5rl8MbP%2FdeGHRI5o8EPV2Zd6OqON4SO4yPZ4kHT0rtJIWYwkwZ7xElbqJDYxQANIs3CVkP2EsD2wUvRXKo0cWFO84lhavrPwuYOmWvXj6a8xWIVoUu8f6%2Bo3rgdoPoUJydR8%2BCW8LYAle9m9GkiplG47lQW%2Fe2gQXfix3Gjl5BxeGTWr8TRPeZ0lrw2hqT5hzo9MuX2mQhjoSj9P%2Fp2S5tKGpi1Jqyi5wXGgDuvtZiQGUe3Z7%2BdCcMXJHKxrf4UfKQTmalmjNu5opnJ%2BzNtEcr3Y077G0Q3ZawabhbXjApUJNJbrT%2BoYS0QHDY%2F11Ly%2BnSU3YSNnzvXQ8EK4jiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7fLDS9C3tjo063rFksiyc6usdRsykzhdLjiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1hZYev3uCPNDA4MIivWwSWTbRuod4J4obn3OR6tnGmGlpDZ9OSd0V1NBqvPpTpYo22cJhrEjNYnP1B12WjH3Gv7pLTiKJsuuwjbg1lsIIN63xyO729Aq0Jx69twAVEbozPZspR4Jgqeu4a8uV2M%2F3oWrSYIdfOTM%2BiOcR%2FZ7LbhqQTuzsQzskJZBO7OxDOyQlEjd9UnKDbBdfZmNkm%2FEEUC8jqtd7hPbcwQ9XZl3o6o7BqENZklLOOhsVkimNZwH1OCEC6NQVzmgsms636W51VXA2NuXaYc9%2F7RnLgSzjkiKmp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeYO1MLZtEYRZEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o7x6EnwjRll8hsVkimNZwH1E882HyFCIUBFBxQ16IPYYTiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1pzig3Q2f7xdQcz2eDG7sve6v0UFOc0z9d%2FFEFBtU0SuXSl7VR0WRj7mVJk5G4H5zhfWTnR%2ByMLEwy1iXFDFa52xpSA1FK1HXolOOyP5b4hyQTuzsQzskJZBO7OxDOyQlYdfE%2FLGk7SDTS%2B9qkIM1Z7pO%2FKI39WbmNsTZUrpCQidvdvMgf3sxcqyZ7GauxpDNZozbuaKZyfuzbVnpwlomGFxBJ9c3QG20u0Ap5rmY%2Fydq%2Bs%2FC5g6Za9ePprzFYhWh%2BjHM5UTztnKg%2BhQnJ1Hz4InA7pVRHYO3n3OR6tnGmGlpDZ9OSd0V1CPKVzE5kkxpB3GNVkWdemERlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9RlxwDt0tJ414j0XEPRJaMw%2ForIADPtCy3axheDpL%2BViCgimDP7qNN8sVA8DzMFFHa1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2Fyoso6n49X1yxmbK5SuKXWIrACoUG%2BpF1VqvxE6EKpGKP%2BQTuzsQzskJZBO7OxDOyQleh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfvKRRCUxnhwkbNUIuvk9ITrpqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL1Zb4gz5TRM3l4ULdEV10x7xI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqO8ehJ8I0ZZfIbFZIpjWcB9dQ2AqBq2Y2eRQcUNeiD2GE4kLbo1xV5mxwC56I4Wb%2FrU%2Bll7TZPRzEi3aqP7o50dac4oN0Nn%2B8XUHM9ngxu7L3ur9FBTnNM%2FXfxRBQbVNEr7c%2B%2Bz0NHEjkKv%2B7QMBnfv%2FwriZcRY6J8e3j31JigjkWQTuzsQzskJZBO7OxDOyQlT2DC910U2HatXH873PiCyi1Kd2tRRBraPt7x6VXAyz%2B7w7oAmMNfrRYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B%2BaTx3QpbZL1rnPUoOp4FKmNoZEdsmHptR8JY3s2yVF9tLv60rTRllsgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSh7xk5ZyiXeQJ0cRiFTrRnOhItjFLXpHsAV6cJTITVLVfYdBC3qF1EcY1%2ByIhmX2wRTTVcBFfWG8p1udeIq9I%2BnqdYrVY9%2FTuQTuzsQzskJZBO7OxDOyQl%2FCuJlxFjonwRlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9d1uLGaKBkfnLyOq13uE9tw%2ForIADPtCy%2FLl8ix9wL5xCgimDP7qNN%2B5p78EDGF9LxTIpj2ePSTkaDSBSQUfnvmRPe8k6pxsVfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOBm8FdtwTiQGpIZzrQOFC15Z5bGZyzCfekE7s7EM7JCWQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MbnFJCP83ylN8EPV2Zd6OqON4SO4yPZ4kGdv13cWCb42ZLJ3kvdjW90%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDO%2FDgVzX%2FK5yp%2BzMlzH1K%2F81K4hWYwDOpLCFYNXuT9A3k1nOlGylrbTso3GYxUmV6Ml8JDG%2FmAtP6FDCqS0DMH87%2B2IhRZWuclugLVpNON%2FdnJi0DzD8IPNizyGUksps7YmrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7E9xduE22Q5yYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRubQiNJiT8689%2BZ6iIZX5cHe1udWWdi3N8SN31ScoNsF19mY2Sb8QRQLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBDnUjfzA%2Bzf2%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81w6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQobMnrQFeJOC1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B1LyrLudLKow%2BFpia6N0m%2B6mp3xXB23vSG9UTixAfPRFZhq6jWLfqRrkqemzaLJ0Sp0UvqfAQBPu3wnzAV9YFq6fc5Hq2caYaWkNn05J3RXU780IW1HWDXHUgYjpkgwVToK4%2F9YHRND0w9jxZurWfh6QTuzsQzskJZBO7OxDOyQlUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsi8Pi5U4Nu2JjLvOKp6Btp5jeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i6KI4RjcoTg08gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23HuqH2Y5jzzhBr8KCWGS1IIbFZIpjWcB9RryWaqBL1%2BousIPA6AjqBTWC6MKHqZ%2FAsQuLpUeCPKH2UUcavX5Bzx8GQ%2F6LuSFRK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnmAaXaNHDNHdFzRpAy%2FDcLgUylxvzc8qvdjLAQUhK%2FJIH3Wm7u6wKF%2B9UqCXnCAEEHhl8MIk9x6JQsc9rA6kw0j5cPOIhbjkplkE7s7EM7JCXVb53SsNiJyymT6tKlTDD8ZozbuaKZyfuzbVnpwlomGCWhMtvmawcO0V64oAV2S2TBN8IC%2B8do7K1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargFsGuQQ2GFkUoe8ZOWcol3l4un0BKe2p%2BdKf8f2oqiOrn6vWahNwYRt0ycLrQ3txSCZ%2BedrY6kI%2BafDuOagtADIdd6PkEkvqn7yS0PYo4GbOXwEkIPXGHJQRTTVcBFfWGxwRqY1pt%2BEOSYwI7zhnK0oIXYQVoc1gbn%2BtsV8Lg%2FzvYsV6X5Pq5lWQTuzsQzskJU9gwvddFNh2XX091Vqgbj4tSndrUUQa2lN%2F3FvAR9BVBpcoD%2FaVCnYWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGEigiMya3GbBzkULSUMheSdq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4vcjBIlDPtoVwRWj9UzFTs2vnN%2B4NEbR0km2U1l836uEJ4lXb3L9RZRNI6oTdSafE5LCaWGa%2F3HtV5wPIFyLZ5SnBqENZklLOOhsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFIQ4peiGiBksvw4Fc1%2FyucpIdbkW7SkgviORhd3zM3tGJM8%2BCxFTxgxWOMFEObwQQe6v0UFOc0z9d%2FFEFBtU0SslklZ3KLSGzeTkP8bAAogPrO0tp0ykQ3HOPa9n9A2srmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqMekK66aTmfShPBsC0AFpuRmjNu5opnJ%2B7NtWenCWiYYje2b5UX5LM543UWfYNVRe5gliRCnpu2MejRkFvBAaJuM%2BeBQ%2Bz3mGPgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N08RMDj9jh1uaUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMCUUtV79dTdBlbuaNLtSqLOJV29y%2FUWUTjoF2vbR6Kuby9dJc5zb7oYij3rt80PYgkE7s7EM7JCWQTuzsQzskJScdT5zBSpkSSg2Xdjx2ioDoy96hbC%2FPRJBO7OxDOyQlLfonSTkwMSUvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9abr4xDkBLs6MJDi5Vze8EI4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dZShfr%2BGwV8fZb4gz5TRM3naU3m7V%2FUf%2Fqse%2FmnnI3ogSyfFW%2F0fRgzoTIzTYH13%2BoHEq4TSbdk0C%2BWboHiYQOUTQJpiEYjifPLmJuWVYRpJgBJ10B2KefWsmexmrsaQzWaM27mimcn7aTLTM%2FUee0G778x1k%2FtKTABe3q4FTRy9rJnsZq7GkM1mjNu5opnJ%2B4pX12CyomWrRzA6MMcLjZTXjApUJNJbrbZGijcZojBIacL3llsfJIH4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdPETA4%2FY4dbmkND41Da5ofhj3WCGLEOBrgkMLkG7pV8gkE7s7EM7JCWQTuzsQzskJYTLVyw%2FAs33%2FBChP7JWeP%2FvdnsQYSNnOPs6Hc4oaBiRLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUaHjefbIUhVzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHW4XgTkfroE0%2Fg0pSBliSTmZozbuaKZyfuzbVnpwlomGK%2B1mJAZR7dn0V64oAV2S2SO5vVvQGzhvK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnm4jULk%2Bwqy7gv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5NNi34mWQDYhSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGN%2FESPh0VnOTBD1dmXejqjjeEjuMj2eJBgzqNNKeBnp%2BYuQYRXemzK6Md8ilpAph2jKEU92wLoda%2FDgVzX%2FK5ykh1uRbtKSC%2BI5GF3fMze0Ykzz4LEVPGDFY4wUQ5vBBB7q%2FRQU5zTP138UQUG1TRK8BhuJmL9Xy5ieVaIQcgYlc0Wis6vsXw%2BNvyT%2F%2FNT%2BuMkE7s7EM7JCWQTuzsQzskJV0ESkiO%2BxmSUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfv7lHQx69tYmWRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJytca75%2BH%2F9d3bDCbtRtnHx%2FEWSMZtu2NUs%2FAt7GC8akW2lkoXpFu69GVu74vYBH3A%2Fiv8UXizOL4U82YLYZV5JQpMKinOpAjnw97l%2BE8HfVym2p30VqshN7l92c35LcPtNNhqO7%2FD8Hi8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH1flyDRxgaVnAwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1uF4E5H66BNP4NKUgZYkk5maM27mimcn7s21Z6cJaJhivtZiQGUe3Z9FeuKAFdktkwAGtXPUAaWStca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTQFF9Ck3khpMiq%2BqEhq%2F1TMIWyCxLbIXgGxWSKY1nAfVE43kPmuXwxitZFaWd5SNPESAEJCTn5wA3hI7jI9niQYIWWqQ%2FZqehSs%2BqxzWNwWO7Z32EK9ZUUZYd%2FzsMKA%2B1ox3yKWkCmHYIlWmwcXh3mL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGIYgC8AnbPCIgwILq9KyEGHoOPvKioZjdYRMacunsLdG3pYzTR1pclKQTuzsQzskJctdGqsXnkaTp5PUcFNDLqqwd0H4HtEikZBO7OxDOyQlkE7s7EM7JCUtWRqwAzP%2BG3GsQU4ArKJKbzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyfu35bcbmCUQ8q%2B1mJAZR7dn0V64oAV2S2TdPIONMonzWfWPWvchtoDUENPJ4H0SAskkGQV%2BKiwLfmr6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPgxEuIGpSqUdtLehoLfx1a1os3UfykK%2Bs3H4CB3lnqxD4mrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7HJeV58f5JqoYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtz0t4s2Xl%2FuufPXWHYEsJYu%2B3zIM4qtxRsfgK3JZer0wdxjVZFnXphe%2Frzt17ajQrNJtAKSE6xOcGoQ1mSUs46GxWSKY1nAfXU6zPdpogBRC8jqtd7hPbcP6KyAAz7QstIOLmfiLNwgVLanbMlqgNK7yPB5FVxlyO3Px%2Bsxz5PP0Pvk%2FnEwnVbq3z7%2F9INwElIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7TvkvvtD2IPqqw%2B9aSa8gIBfl7EkWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGHr7F3bBchFy85hX06plzOhq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4CstttdjiS3v6GFm%2BD3PD2sbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBsrDjLlYrA4VMpnuHxPjpXPgJXUkiOxxVQ5ztSHd%2FRhHRtfFcELlzk3ZsnZsKCFAzTCJBOnRIyzWbkbLxJhaoNqyZ7GauxpDNZozbuaKZyfssCEGpjKdAS6Vjk1OkokEYnWBz8Rr6nG5q%2Bs%2FC5g6Za9ePprzFYhWhXJAhqyfL2ueg%2BhQnJ1Hz4NStc7W0X6Yk7zod1XpqKaQv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5PCZW%2FUiEBn95BO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcwQ9XZl3o6o43hI7jI9niQVDxyA%2FDby0QGuPblpLX6BT4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdCY8XoOY9miKl2xBlzgmiC6BZK0pTPGGXPmnemIsAzp3GPzyNQMP%2FHm6TvyiN%2FVm5ico4YntQ4jdQmHJAmd5UpysmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktk7yGbmwt%2FO8utca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kiefsfwOXstNQJzQp6wK0LBa8qPC%2FxDEEcWB3NpWM4QKIWkNZ0xiyLBFZ0jH1%2BQqp%2FtstupfyEfeljWECMsDC%2B0S8Hzo1BPAbeGsmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktkiSIzR3c3H8Ktca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kids88BR4mGh4DFcIQhAkBVOP1rBrFCpPvF06ZSZ%2FxN1p6zOnw1htHUS7Tw3kSlpEBfKz4n81sZjnTmVdmO%2F61Aw9PPpiKAXM5OvtZiQGUe3ZxfMSPCVOg%2FUrJnsZq7GkM1mjNu5opnJ%2Bwg0jZHc%2BOTMwVUd9kAdmnmNoZEdsmHptakyR5rvXrVmqNbKv%2BeXvh4gb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7HydoBt8knSA9z43EYlSvNQ4kLbo1xV5m%2BiAr0LnlUcmiKwYzf2U%2BDoGneyoLQQ3KncKH4N3Dh0bNcfXPYkpP3CzUe30FNdyEKcql6NmB55GO%2FlTB2UvYcoSfE6PXnjtxDj5%2F1TUAe5Q1IGI6ZIMFU6QTuzsQzskJZBO7OxDOyQlimbEWl4Pvpygsu3g%2BmRQ%2BemzMCI4ksq1UY46cJOx%2BRRQVPI%2FO7l3aLNtWenCWiYYr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyft08SeHxsP%2F92Ryo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJzbiHlkLYwPfJuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZNG1%2FxvgZO5LrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJInF4%2FZXGSVxMmc0KesCtCwWlopP2YhhG4hhoR8a8vCUoIdZcJm29lFyf5IFwDC%2ByN1txQ1G4Ww9pLUgYjpkgwVTvTz6YigFzOTr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfs1J5QAlxjb4WRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJxQtEf4uo4M6TmVdmO%2F61AwT7ecal%2BRuTzBD1dmXejqjvHoSfCNGWXyGxWSKY1nAfUEMnsct6psNkuErSvsSFTgdSmxHcRFBdei53B6tNISWIP573ETd6j8SK9M6t7gwyb0BOqwDC5vO9vxHoptW3D%2BqidOopC26W9ExjO%2Fe21buSY8XoOY9miKl2xBlzgmiC4jlo9wKE4PzorADQibvuH4uk78ojf1ZuZJjAjvOGcrSpBO7OxDOyQlkE7s7EM7JCWmak2dfrNEhuvVan1JFB%2FsFBP5nAsy2xQRO%2BYvOdBKKvucf3WKEIY%2FPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUv2wmVs47FSzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHWUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMYbUwdTyiyCWnzH0o6uSPPUVqooLjumayM%2FIDMa%2BpQsRfMFF1FNwkqKSRk%2Bsw4i9IFkST%2FJboPlkmrKLnBcaAO6%2B1mJAZR7dnQLwHLf67UWesmexmrsaQzWaM27mimcn7j7hHfSwb3dIP7GWZEaaXvODput4%2Fwc2pIG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2FyolUH37tU864NUKdj9pG%2BugfkUX8XPN50AwdhVkqO%2BA6k%3D</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-manager/j_spring_security_check</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XYSESSIONID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">XYSESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">XYSESSIONID=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkXYSESSIONID_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">String XYSESSIONID = vars.get(&quot;XYSESSIONID&quot;);
if (XYSESSIONID == null) {
	vars.put(&quot;XYSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${XYSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findlastreview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sdoc-review/comments/findlastreview?fragmentguid=${GUID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SWITCH_VALUE_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - add 80%
 * 1 - subcomment 5%
 * 2 - flag 5%
 * 3 - reject 5%
 * 4 - reopen 5%
 */
int[] action_values = (int[])vars.getObject(&quot;action_RANDOM_VALUES&quot;);
if(action_values == null) {
	action_values = new int[]{0,0,0,0,1,0,0,0,0,2,0,0,0,0,3,0,0,0,0,4};
	vars.putObject(&quot;action_RANDOM_VALUES&quot;, action_values);
	vars.put(&quot;action_N_GROUPS&quot;, &quot;&quot; + action_values.length);
}
Integer action_increment = (Integer)vars.getObject(&quot;action_INCREMENT&quot;);
if(action_increment == null) {
	action_increment = Integer.valueOf(0);
} else {
	int action_nGroups = Integer.parseInt(vars.get(&quot;action_N_GROUPS&quot;));
	action_increment = Integer.valueOf((action_increment.intValue() + 1) % action_nGroups);
}
vars.put(&quot;action_SWITCH_VALUE&quot;, new Integer(action_values[action_increment.intValue()]).toString());
vars.putObject(&quot;action_INCREMENT&quot;, action_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
            <stringProp name="SwitchController.value">${action_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ADD" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="setComment_AUX" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
int tokenN = Integer.parseInt(vars.get(&quot;TOKEN_N&quot;));
int pageN = Integer.parseInt(vars.get(&quot;PAGE_N&quot;));
int tokenIndex = new Random().nextInt(tokenN) + 1;
int pageIndex = new Random().nextInt(pageN) + 1;
//int pageIndex = 3;
//int tokenIndex = 7;
if(tokenIndex == 1){
	vars.put(&quot;FRAGMENTGUID&quot;, vars.get(&quot;containerguidSet_&quot; + pageIndex));
	vars.put(&quot;CONTAINERGUID&quot;, vars.get(&quot;containerguidSet_&quot; + pageIndex));
	vars.put(&quot;RANGESTARTGUID&quot;, vars.get(&quot;containerguidSet_&quot; + pageIndex));
	vars.put(&quot;RANGESTARTINDEX&quot;, vars.get(&quot;rangestartindexSet_&quot; + tokenIndex));
	vars.put(&quot;RANGESTARTPATH&quot;, vars.get(&quot;rangestartpathSet_&quot; + tokenIndex));
	vars.put(&quot;RANGEENDGUID&quot;, vars.get(&quot;containerguidSet_&quot; + pageIndex));
	vars.put(&quot;RANGEENDINDEX&quot;, vars.get(&quot;rangeendindexSet_&quot; + tokenIndex));
	vars.put(&quot;RANGEENDPATH&quot;, vars.get(&quot;rangeendpathSet_&quot; + tokenIndex));
	vars.put(&quot;SELECTIONTEXT&quot;, vars.get(&quot;selectiontextSet_&quot; + tokenIndex));
}
if(tokenIndex == 2 || tokenIndex == 3 || tokenIndex == 4){
	vars.put(&quot;FRAGMENTGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 2 - 1)));
	vars.put(&quot;CONTAINERGUID&quot;, vars.get(&quot;containerguidSet_&quot; + pageIndex));
	vars.put(&quot;RANGESTARTGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 2 - 1)));
	vars.put(&quot;RANGESTARTINDEX&quot;, vars.get(&quot;rangestartindexSet_&quot; + tokenIndex));
	vars.put(&quot;RANGESTARTPATH&quot;, vars.get(&quot;rangestartpathSet_&quot; + tokenIndex));
	vars.put(&quot;RANGEENDGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 2 - 1)));
	vars.put(&quot;RANGEENDINDEX&quot;, vars.get(&quot;rangeendindexSet_&quot; + tokenIndex));
	vars.put(&quot;RANGEENDPATH&quot;, vars.get(&quot;rangeendpathSet_&quot; + tokenIndex));
	vars.put(&quot;SELECTIONTEXT&quot;, vars.get(&quot;selectiontextSet_&quot; + tokenIndex));
}
if(tokenIndex == 5 || tokenIndex == 6 || tokenIndex == 7){
	vars.put(&quot;FRAGMENTGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 2)));
	vars.put(&quot;CONTAINERGUID&quot;, vars.get(&quot;containerguidSet_&quot; + pageIndex));
	vars.put(&quot;RANGESTARTGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 2)));
	vars.put(&quot;RANGESTARTINDEX&quot;, vars.get(&quot;rangestartindexSet_&quot; + tokenIndex));
	vars.put(&quot;RANGESTARTPATH&quot;, vars.get(&quot;rangestartpathSet_&quot; + tokenIndex));
	vars.put(&quot;RANGEENDGUID&quot;, vars.get(&quot;fragmentguidSet_&quot; + (pageIndex * 2)));
	vars.put(&quot;RANGEENDINDEX&quot;, vars.get(&quot;rangeendindexSet_&quot; + tokenIndex));
	vars.put(&quot;RANGEENDPATH&quot;, vars.get(&quot;rangeendpathSet_&quot; + tokenIndex));
	vars.put(&quot;SELECTIONTEXT&quot;, vars.get(&quot;selectiontextSet_&quot; + tokenIndex));
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addComment" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/sdoc-review/comments/add?fragmentguid=${CONTAINERGUID}&amp;sessionguid=${RSESSIONGUID}&amp;commenttext=${__RandomString(20, _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&amp;containerguid=${CONTAINERGUID}&amp;type=2&amp;rangestartguid=${RANGESTARTGUID}&amp;rangestartindex=${RANGESTARTINDEX}&amp;rangestartpath=${RANGESTARTPATH}&amp;rangestartpage=&amp;rangeendguid=${RANGEENDGUID}&amp;rangeendindex=${RANGEENDINDEX}&amp;rangeendpath=${RANGEENDPATH}&amp;rangeendpage=&amp;selectiontext=${SELECTIONTEXT}&amp;status=Open</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="listAfterAdd" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/sdoc-review/comments/list?fragmentguid=${GUID}&amp;fsession=${RSESSIONGUID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SUBCOMMENT" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="listGetComment" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/sdoc-review/comments/list?fragmentguid=${GUID}&amp;fsession=${RSESSIONGUID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="commentDetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">commentDetails</stringProp>
                  <stringProp name="RegexExtractor.regex">{&quot;author-id&quot;:&quot;.+?&quot;,&quot;rangestart-guid&quot;:&quot;.+?&quot;,&quot;status-set-on&quot;:&quot;.+?&quot;,&quot;status&quot;:&quot;(.+?)&quot;,&quot;review-guid&quot;:&quot;.+?&quot;,&quot;type&quot;:.+?,&quot;date&quot;:&quot;.+?&quot;,&quot;comment-id&quot;:.+?,&quot;selection-text&quot;:&quot;(.+?)&quot;,&quot;rangeend-index&quot;:(.+?),&quot;container-guid&quot;:&quot;(.+?)&quot;,&quot;comment-guid&quot;:&quot;(.+?)&quot;,&quot;rangeend-page&quot;:&quot;.*?&quot;,&quot;comment-text&quot;:&quot;.+?&quot;,&quot;rangestart-path&quot;:&quot;(.+?)&quot;,&quot;rangestart-page&quot;:&quot;.*?&quot;,&quot;reply-to&quot;:&quot;&quot;,&quot;rangeend-path&quot;:&quot;(.+?)&quot;,&quot;status-set-by&quot;:&quot;.+?&quot;,&quot;rangestart-index&quot;:(.+?),&quot;rangeend-guid&quot;:&quot;.+?&quot;}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$||$2$||$3$||$4$||$5$||$6$||$7$||$8$</stringProp>
                  <stringProp name="RegexExtractor.default">EMPTY</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getCommentDetails_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String commentDetails = vars.get(&quot;commentDetails&quot;);
//log.info(&quot;COMMENT: &quot; + vars.get(&quot;commentDetails&quot;));
vars.put(&quot;COMMENT_EXISTS&quot;, &quot;false&quot;);
if(!commentDetails.equals(&quot;EMPTY&quot;)){
	String[] parts = commentDetails.split(&quot;\\|\\|&quot;);
	/*
     for(int i = 0; i &lt;= parts.length - 1; i++){
     	log.info(&quot;PART[&quot; + (i + 1) + &quot;]: &quot; + parts[i]);
     }
     */
     vars.put(&quot;_status&quot;, parts[0]);
     vars.put(&quot;_selectiontext&quot;, parts[1]);
     vars.put(&quot;_rangeendindex&quot;, parts[2]);
     vars.put(&quot;_container-guid&quot;, parts[3]);
     vars.put(&quot;_fragment-guid&quot;, parts[3]);
     vars.put(&quot;_comment-guid&quot;, parts[4]);
     vars.put(&quot;_rangestartpath&quot;, parts[5]);
     vars.put(&quot;_rangeendpath&quot;, parts[6]);
     vars.put(&quot;_rangestartindex&quot;, parts[7]);
     vars.put(&quot;COMMENT_EXISTS&quot;, &quot;true&quot;);
//     log.info(&quot;_status: &quot; + parts[1]);
}
log.info(vars.get(&quot;COMMENT_EXISTS&quot;));</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment exists" enabled="true">
                <stringProp name="IfController.condition">${COMMENT_EXISTS} == true</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSubcomment" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/add?fragmentguid=${_fragment-guid}&amp;sessionguid=${RSESSIONGUID}&amp;commenttext=${__RandomString(20, _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&amp;containerguid=${_container-guid}&amp;type=2&amp;rangestartguid=${_fragment-guid}&amp;rangestartindex=${_rangestartindex}&amp;rangestartpath=${_rangestartpath}&amp;rangestartpage=&amp;rangeendguid=${_fragment-guid}&amp;rangeendindex=${_rangeendindex}&amp;rangeendpath=${_rangeendpath}&amp;rangeendpage=&amp;selectiontext=${_selectiontext}&amp;replyto=${_comment-guid}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FLAG" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="listGetComment" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/sdoc-review/comments/list?fragmentguid=${GUID}&amp;fsession=${RSESSIONGUID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="commentDetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">commentDetails</stringProp>
                  <stringProp name="RegexExtractor.regex">{&quot;author-id&quot;:&quot;.+?&quot;,&quot;rangestart-guid&quot;:&quot;.+?&quot;,&quot;status-set-on&quot;:&quot;.+?&quot;,&quot;status&quot;:&quot;(${OPEN_STATUS})&quot;,&quot;review-guid&quot;:&quot;.+?&quot;,&quot;type&quot;:.+?,&quot;date&quot;:&quot;.+?&quot;,&quot;comment-id&quot;:.+?,&quot;selection-text&quot;:&quot;(.+?)&quot;,&quot;rangeend-index&quot;:(.+?),&quot;container-guid&quot;:&quot;(.+?)&quot;,&quot;comment-guid&quot;:&quot;(.+?)&quot;,&quot;rangeend-page&quot;:&quot;.*?&quot;,&quot;comment-text&quot;:&quot;.+?&quot;,&quot;rangestart-path&quot;:&quot;(.+?)&quot;,&quot;rangestart-page&quot;:&quot;.*?&quot;,&quot;reply-to&quot;:&quot;&quot;,&quot;rangeend-path&quot;:&quot;(.+?)&quot;,&quot;status-set-by&quot;:&quot;.+?&quot;,&quot;rangestart-index&quot;:(.+?),&quot;rangeend-guid&quot;:&quot;.+?&quot;}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$||$2$||$3$||$4$||$5$||$6$||$7$||$8$</stringProp>
                  <stringProp name="RegexExtractor.default">EMPTY</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getCommentDetails_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String commentDetails = vars.get(&quot;commentDetails&quot;);
//log.info(&quot;COMMENT: &quot; + vars.get(&quot;commentDetails&quot;));
vars.put(&quot;COMMENT_EXISTS&quot;, &quot;false&quot;);
if(!commentDetails.equals(&quot;EMPTY&quot;)){
	String[] parts = commentDetails.split(&quot;\\|\\|&quot;);
	/*
     for(int i = 0; i &lt;= parts.length - 1; i++){
     	log.info(&quot;PART[&quot; + (i + 1) + &quot;]: &quot; + parts[i]);
     }
     */
     vars.put(&quot;_status&quot;, parts[0]);
     vars.put(&quot;_selectiontext&quot;, parts[1]);
     vars.put(&quot;_rangeendindex&quot;, parts[2]);
     vars.put(&quot;_container-guid&quot;, parts[3]);
     vars.put(&quot;_fragment-guid&quot;, parts[3]);
     vars.put(&quot;_comment-guid&quot;, parts[4]);
     vars.put(&quot;_rangestartpath&quot;, parts[5]);
     vars.put(&quot;_rangeendpath&quot;, parts[6]);
     vars.put(&quot;_rangestartindex&quot;, parts[7]);
     vars.put(&quot;COMMENT_EXISTS&quot;, &quot;true&quot;);
//     log.info(&quot;_status: &quot; + parts[1]);
}
log.info(vars.get(&quot;COMMENT_EXISTS&quot;));</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment exists &amp;&amp; status==Open" enabled="true">
                <stringProp name="IfController.condition">${COMMENT_EXISTS} == true &amp;&amp; &quot;${_status}&quot; == &quot;${OPEN_STATUS}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addFlag" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/add?fragmentguid=${_fragment-guid}&amp;sessionguid=${RSESSIONGUID}&amp;commenttext=${__RandomString(20, _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&amp;containerguid=${_container-guid}&amp;type=2&amp;rangestartguid=${_fragment-guid}&amp;rangestartindex=${_rangestartindex}&amp;rangestartpath=${_rangestartpath}&amp;rangestartpage=&amp;rangeendguid=${_fragment-guid}&amp;rangeendindex=${_rangeendindex}&amp;rangeendpath=${_rangeendpath}&amp;rangeendpage=&amp;selectiontext=${_selectiontext}&amp;replyto=${_comment-guid}&amp;status=${APPROVED_STATUS}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateFlag" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/update?status=${APPROVED_STATUS}&amp;fragmentguid=${_fragment-guid}&amp;commentguid=${_comment-guid}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="REJECT" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="listGetComment" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/sdoc-review/comments/list?fragmentguid=${GUID}&amp;fsession=${RSESSIONGUID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="commentDetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">commentDetails</stringProp>
                  <stringProp name="RegexExtractor.regex">{&quot;author-id&quot;:&quot;.+?&quot;,&quot;rangestart-guid&quot;:&quot;.+?&quot;,&quot;status-set-on&quot;:&quot;.+?&quot;,&quot;status&quot;:&quot;(${OPEN_STATUS})&quot;,&quot;review-guid&quot;:&quot;.+?&quot;,&quot;type&quot;:.+?,&quot;date&quot;:&quot;.+?&quot;,&quot;comment-id&quot;:.+?,&quot;selection-text&quot;:&quot;(.+?)&quot;,&quot;rangeend-index&quot;:(.+?),&quot;container-guid&quot;:&quot;(.+?)&quot;,&quot;comment-guid&quot;:&quot;(.+?)&quot;,&quot;rangeend-page&quot;:&quot;.*?&quot;,&quot;comment-text&quot;:&quot;.+?&quot;,&quot;rangestart-path&quot;:&quot;(.+?)&quot;,&quot;rangestart-page&quot;:&quot;.*?&quot;,&quot;reply-to&quot;:&quot;&quot;,&quot;rangeend-path&quot;:&quot;(.+?)&quot;,&quot;status-set-by&quot;:&quot;.+?&quot;,&quot;rangestart-index&quot;:(.+?),&quot;rangeend-guid&quot;:&quot;.+?&quot;}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$||$2$||$3$||$4$||$5$||$6$||$7$||$8$</stringProp>
                  <stringProp name="RegexExtractor.default">EMPTY</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getCommentDetails_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String commentDetails = vars.get(&quot;commentDetails&quot;);
//log.info(&quot;COMMENT: &quot; + vars.get(&quot;commentDetails&quot;));
vars.put(&quot;COMMENT_EXISTS&quot;, &quot;false&quot;);
if(!commentDetails.equals(&quot;EMPTY&quot;)){
	String[] parts = commentDetails.split(&quot;\\|\\|&quot;);
	/*
     for(int i = 0; i &lt;= parts.length - 1; i++){
     	log.info(&quot;PART[&quot; + (i + 1) + &quot;]: &quot; + parts[i]);
     }
     */
     vars.put(&quot;_status&quot;, parts[0]);
     vars.put(&quot;_selectiontext&quot;, parts[1]);
     vars.put(&quot;_rangeendindex&quot;, parts[2]);
     vars.put(&quot;_container-guid&quot;, parts[3]);
     vars.put(&quot;_fragment-guid&quot;, parts[3]);
     vars.put(&quot;_comment-guid&quot;, parts[4]);
     vars.put(&quot;_rangestartpath&quot;, parts[5]);
     vars.put(&quot;_rangeendpath&quot;, parts[6]);
     vars.put(&quot;_rangestartindex&quot;, parts[7]);
     vars.put(&quot;COMMENT_EXISTS&quot;, &quot;true&quot;);
//     log.info(&quot;_status: &quot; + parts[1]);
}
log.info(vars.get(&quot;COMMENT_EXISTS&quot;));</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment exists &amp;&amp; status==Open" enabled="true">
                <stringProp name="IfController.condition">${COMMENT_EXISTS} == true &amp;&amp; &quot;${_status}&quot; == &quot;${OPEN_STATUS}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addReject" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/add?fragmentguid=${_fragment-guid}&amp;sessionguid=${RSESSIONGUID}&amp;commenttext=${__RandomString(20, _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&amp;containerguid=${_container-guid}&amp;type=2&amp;rangestartguid=${_fragment-guid}&amp;rangestartindex=${_rangestartindex}&amp;rangestartpath=${_rangestartpath}&amp;rangestartpage=&amp;rangeendguid=${_fragment-guid}&amp;rangeendindex=${_rangeendindex}&amp;rangeendpath=${_rangeendpath}&amp;rangeendpage=&amp;selectiontext=${_selectiontext}&amp;replyto=${_comment-guid}&amp;status=${REJECTED_STATUS}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateReject" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/update?status=${REJECTED_STATUS}&amp;fragmentguid=${_fragment-guid}&amp;commentguid=${_comment-guid}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="REOPEN" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="listGetComment" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/sdoc-review/comments/list?fragmentguid=${GUID}&amp;fsession=${RSESSIONGUID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="commentDetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">commentDetails</stringProp>
                  <stringProp name="RegexExtractor.regex">{&quot;author-id&quot;:&quot;.+?&quot;,&quot;rangestart-guid&quot;:&quot;.+?&quot;,&quot;status-set-on&quot;:&quot;.+?&quot;,&quot;status&quot;:&quot;(${APPROVED_STATUS}|${REJECTED_STATUS})&quot;,&quot;review-guid&quot;:&quot;.+?&quot;,&quot;type&quot;:.+?,&quot;date&quot;:&quot;.+?&quot;,&quot;comment-id&quot;:.+?,&quot;selection-text&quot;:&quot;(.+?)&quot;,&quot;rangeend-index&quot;:(.+?),&quot;container-guid&quot;:&quot;(.+?)&quot;,&quot;comment-guid&quot;:&quot;(.+?)&quot;,&quot;rangeend-page&quot;:&quot;.*?&quot;,&quot;comment-text&quot;:&quot;.+?&quot;,&quot;rangestart-path&quot;:&quot;(.+?)&quot;,&quot;rangestart-page&quot;:&quot;.*?&quot;,&quot;reply-to&quot;:&quot;&quot;,&quot;rangeend-path&quot;:&quot;(.+?)&quot;,&quot;status-set-by&quot;:&quot;.+?&quot;,&quot;rangestart-index&quot;:(.+?),&quot;rangeend-guid&quot;:&quot;.+?&quot;}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$||$2$||$3$||$4$||$5$||$6$||$7$||$8$</stringProp>
                  <stringProp name="RegexExtractor.default">EMPTY</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getCommentDetails_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String commentDetails = vars.get(&quot;commentDetails&quot;);
//log.info(&quot;COMMENT: &quot; + vars.get(&quot;commentDetails&quot;));
vars.put(&quot;COMMENT_EXISTS&quot;, &quot;false&quot;);
if(!commentDetails.equals(&quot;EMPTY&quot;)){
	String[] parts = commentDetails.split(&quot;\\|\\|&quot;);
	/*
     for(int i = 0; i &lt;= parts.length - 1; i++){
     	log.info(&quot;PART[&quot; + (i + 1) + &quot;]: &quot; + parts[i]);
     }
     */
     vars.put(&quot;_status&quot;, parts[0]);
     vars.put(&quot;_selectiontext&quot;, parts[1]);
     vars.put(&quot;_rangeendindex&quot;, parts[2]);
     vars.put(&quot;_container-guid&quot;, parts[3]);
     vars.put(&quot;_fragment-guid&quot;, parts[3]);
     vars.put(&quot;_comment-guid&quot;, parts[4]);
     vars.put(&quot;_rangestartpath&quot;, parts[5]);
     vars.put(&quot;_rangeendpath&quot;, parts[6]);
     vars.put(&quot;_rangestartindex&quot;, parts[7]);
     vars.put(&quot;COMMENT_EXISTS&quot;, &quot;true&quot;);
//     log.info(&quot;_status: &quot; + parts[1]);
}
log.info(vars.get(&quot;COMMENT_EXISTS&quot;));</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If comment exists &amp;&amp; (status==Approved || Rejected)" enabled="true">
                <stringProp name="IfController.condition">${COMMENT_EXISTS} == true &amp;&amp; (&quot;${_status}&quot; == &quot;${APPROVED_STATUS}&quot; || &quot;${_status}&quot; == &quot;${REJECTED_STATUS}&quot;)</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addReopen" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/add?fragmentguid=${_fragment-guid}&amp;sessionguid=${RSESSIONGUID}&amp;commenttext=${__RandomString(20, _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&amp;containerguid=${_container-guid}&amp;type=2&amp;rangestartguid=${_fragment-guid}&amp;rangestartindex=${_rangestartindex}&amp;rangestartpath=${_rangestartpath}&amp;rangestartpage=&amp;rangeendguid=${_fragment-guid}&amp;rangeendindex=${_rangeendindex}&amp;rangeendpath=${_rangeendpath}&amp;rangeendpage=&amp;selectiontext=${_selectiontext}&amp;replyto=${_comment-guid}&amp;status=${OPEN_STATUS}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateReopen" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/sdoc-review/comments/update?status=${OPEN_STATUS}&amp;fragmentguid=${_fragment-guid}&amp;commentguid=${_comment-guid}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVERAGE_DELAY_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_DEV_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">multipart/form-data</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Clean" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1430318351000</longProp>
        <longProp name="ThreadGroup.end_time">1430318351000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UNIQUE_CONTAINERS_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashSet;
import java.util.Set;
File file = new File(vars.get(&quot;DATA_FILES_PATH&quot;) + &quot;CONTAINERS.txt&quot;);
BufferedReader reader = new BufferedReader(new FileReader(file));
String line;
int i = 1;
Set uniqueContainers = new HashSet();
while ((line = reader.readLine()) != null) {
	if(!uniqueContainers.contains(line)){
		uniqueContainers.add(line);
		vars.put(&quot;containerguid_&quot; + i, line);
		i++;
	}
}
uniqueContainers.clear();
vars.put(&quot;UNIQUE_CONTAINERS_N&quot;, &quot;&quot; + (i - 1));</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);
vars.put(&quot;PASSWORD&quot;, &quot;5oMeTh1n65ecrEt&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=10&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2P5vV5X59jDuLgu4Ifvq9EhNIr0zq3uDDJvQE6rAMLm87BYSIqNSPsNz42%2FbvW16d9luC%2Ft%2B%2BUzHXQjzCudt1GnJT7bVpzOXQL7RgKQ8p%2BQ4197s6LBNby2vyROElSEsZbAoIpgz%2B6jTf%2B%2Ffe%2BzYMgft9zTEt%2Fmsef7BkMISu1Mf9v03%2F7fJwo1LCfNwliCH714VzISxLW0IGqjLPDuTELekiNsYtfU6H8SwzcQSs%2FvJei%2F1jazY5NzlX2HQQt6hdRGha3VWjvvXEEt7kzMFTTqDWQXrWXDl7SfksAxJjLg%2Ftlu%2BJ8lsdrArBqENZklLOOhsVkimNZwH1HyAz%2BSKHOgW6wg8DoCOoFPlU8pj7GRGxxC4ulR4I8ofZRRxq9fkHPHqE6%2F0TsGNRWD9CBe1f3eU85nM7k8yQAiBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz%2B%2FTqPMA5YzsXbHMi9f44kDRI%2B1asui8mlGOOnCTsfkUUFTyPzu5d2izbVnpwlomGK%2B1mJAZR7dnv50JwxckcrGsmexmrsaQzWaM27mimcn7uVC82hoXSN1%2FVPFu5PXwE1HyXJBQEn5yduoJUWzuQfZq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4ve8HmsQB7KfH5jxMnITH5wQKCKYM%2Fuo038GJjJXqIeZ%2FuGgfOh1eDK8H3gH8t%2BBMY5bliCJ6cltQvLnYgm9a5nGNOQtaWllq4Zh0wNPIrRMdqLFNft7fIbZaxLnkCRbGQudwnoGCOOM53wwq%2Fl7m9oLtdafD9kiHPfZ0l42ABy7BaVW6WzhhCxdyzw7J8nyqwVMwth3ZyYYzAwTif%2BMs6%2FreIxd%2FZk7XP%2Bo0BCHIYXUCobIxCY8iOYemeeGhLHn3WZdWk5UNwzNwbHz7%2FVRrftRKWbs5KzuYqlD6agJRvEUjncaCdTSHr1mQC81ZP%2BPkjmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqBYKVda%2B2pPztCuReJFg1uzCz%2BsD2bbpvrsLM1FbA2tKWiGSg2UP6gNPzvqYijw%2BFpu48DINEq92Z%2BZh7wd6aTJIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7Tvkvvnzv2j77RUZwLY3rvWEhS%2B8Ga17ReRw95gzEZxnRCEZn1ydZW%2FNAQp%2B%2B6OYmqGywBRsVkimNZwH1RON5D5rl8MbP%2FdeGHRI5o8EPV2Zd6OqON4SO4yPZ4kHT0rtJIWYwkwZ7xElbqJDYxQANIs3CVkP2EsD2wUvRXKo0cWFO84lhavrPwuYOmWvXj6a8xWIVoUu8f6%2Bo3rgdoPoUJydR8%2BCW8LYAle9m9GkiplG47lQW%2Fe2gQXfix3Gjl5BxeGTWr8TRPeZ0lrw2hqT5hzo9MuX2mQhjoSj9P%2Fp2S5tKGpi1Jqyi5wXGgDuvtZiQGUe3Z7%2BdCcMXJHKxrf4UfKQTmalmjNu5opnJ%2BzNtEcr3Y077G0Q3ZawabhbXjApUJNJbrT%2BoYS0QHDY%2F11Ly%2BnSU3YSNnzvXQ8EK4jiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7fLDS9C3tjo063rFksiyc6usdRsykzhdLjiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1hZYev3uCPNDA4MIivWwSWTbRuod4J4obn3OR6tnGmGlpDZ9OSd0V1NBqvPpTpYo22cJhrEjNYnP1B12WjH3Gv7pLTiKJsuuwjbg1lsIIN63xyO729Aq0Jx69twAVEbozPZspR4Jgqeu4a8uV2M%2F3oWrSYIdfOTM%2BiOcR%2FZ7LbhqQTuzsQzskJZBO7OxDOyQlEjd9UnKDbBdfZmNkm%2FEEUC8jqtd7hPbcwQ9XZl3o6o7BqENZklLOOhsVkimNZwH1OCEC6NQVzmgsms636W51VXA2NuXaYc9%2F7RnLgSzjkiKmp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeYO1MLZtEYRZEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o7x6EnwjRll8hsVkimNZwH1E882HyFCIUBFBxQ16IPYYTiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1pzig3Q2f7xdQcz2eDG7sve6v0UFOc0z9d%2FFEFBtU0SuXSl7VR0WRj7mVJk5G4H5zhfWTnR%2ByMLEwy1iXFDFa52xpSA1FK1HXolOOyP5b4hyQTuzsQzskJZBO7OxDOyQlYdfE%2FLGk7SDTS%2B9qkIM1Z7pO%2FKI39WbmNsTZUrpCQidvdvMgf3sxcqyZ7GauxpDNZozbuaKZyfuzbVnpwlomGFxBJ9c3QG20u0Ap5rmY%2Fydq%2Bs%2FC5g6Za9ePprzFYhWh%2BjHM5UTztnKg%2BhQnJ1Hz4InA7pVRHYO3n3OR6tnGmGlpDZ9OSd0V1CPKVzE5kkxpB3GNVkWdemERlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9RlxwDt0tJ414j0XEPRJaMw%2ForIADPtCy3axheDpL%2BViCgimDP7qNN8sVA8DzMFFHa1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2Fyoso6n49X1yxmbK5SuKXWIrACoUG%2BpF1VqvxE6EKpGKP%2BQTuzsQzskJZBO7OxDOyQleh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfvKRRCUxnhwkbNUIuvk9ITrpqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL1Zb4gz5TRM3l4ULdEV10x7xI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqO8ehJ8I0ZZfIbFZIpjWcB9dQ2AqBq2Y2eRQcUNeiD2GE4kLbo1xV5mxwC56I4Wb%2FrU%2Bll7TZPRzEi3aqP7o50dac4oN0Nn%2B8XUHM9ngxu7L3ur9FBTnNM%2FXfxRBQbVNEr7c%2B%2Bz0NHEjkKv%2B7QMBnfv%2FwriZcRY6J8e3j31JigjkWQTuzsQzskJZBO7OxDOyQlT2DC910U2HatXH873PiCyi1Kd2tRRBraPt7x6VXAyz%2B7w7oAmMNfrRYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B%2BaTx3QpbZL1rnPUoOp4FKmNoZEdsmHptR8JY3s2yVF9tLv60rTRllsgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSh7xk5ZyiXeQJ0cRiFTrRnOhItjFLXpHsAV6cJTITVLVfYdBC3qF1EcY1%2ByIhmX2wRTTVcBFfWG8p1udeIq9I%2BnqdYrVY9%2FTuQTuzsQzskJZBO7OxDOyQl%2FCuJlxFjonwRlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9d1uLGaKBkfnLyOq13uE9tw%2ForIADPtCy%2FLl8ix9wL5xCgimDP7qNN%2B5p78EDGF9LxTIpj2ePSTkaDSBSQUfnvmRPe8k6pxsVfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOBm8FdtwTiQGpIZzrQOFC15Z5bGZyzCfekE7s7EM7JCWQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MbnFJCP83ylN8EPV2Zd6OqON4SO4yPZ4kGdv13cWCb42ZLJ3kvdjW90%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDO%2FDgVzX%2FK5yp%2BzMlzH1K%2F81K4hWYwDOpLCFYNXuT9A3k1nOlGylrbTso3GYxUmV6Ml8JDG%2FmAtP6FDCqS0DMH87%2B2IhRZWuclugLVpNON%2FdnJi0DzD8IPNizyGUksps7YmrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7E9xduE22Q5yYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRubQiNJiT8689%2BZ6iIZX5cHe1udWWdi3N8SN31ScoNsF19mY2Sb8QRQLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBDnUjfzA%2Bzf2%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81w6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQobMnrQFeJOC1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B1LyrLudLKow%2BFpia6N0m%2B6mp3xXB23vSG9UTixAfPRFZhq6jWLfqRrkqemzaLJ0Sp0UvqfAQBPu3wnzAV9YFq6fc5Hq2caYaWkNn05J3RXU780IW1HWDXHUgYjpkgwVToK4%2F9YHRND0w9jxZurWfh6QTuzsQzskJZBO7OxDOyQlUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsi8Pi5U4Nu2JjLvOKp6Btp5jeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i6KI4RjcoTg08gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23HuqH2Y5jzzhBr8KCWGS1IIbFZIpjWcB9RryWaqBL1%2BousIPA6AjqBTWC6MKHqZ%2FAsQuLpUeCPKH2UUcavX5Bzx8GQ%2F6LuSFRK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnmAaXaNHDNHdFzRpAy%2FDcLgUylxvzc8qvdjLAQUhK%2FJIH3Wm7u6wKF%2B9UqCXnCAEEHhl8MIk9x6JQsc9rA6kw0j5cPOIhbjkplkE7s7EM7JCXVb53SsNiJyymT6tKlTDD8ZozbuaKZyfuzbVnpwlomGCWhMtvmawcO0V64oAV2S2TBN8IC%2B8do7K1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargFsGuQQ2GFkUoe8ZOWcol3l4un0BKe2p%2BdKf8f2oqiOrn6vWahNwYRt0ycLrQ3txSCZ%2BedrY6kI%2BafDuOagtADIdd6PkEkvqn7yS0PYo4GbOXwEkIPXGHJQRTTVcBFfWGxwRqY1pt%2BEOSYwI7zhnK0oIXYQVoc1gbn%2BtsV8Lg%2FzvYsV6X5Pq5lWQTuzsQzskJU9gwvddFNh2XX091Vqgbj4tSndrUUQa2lN%2F3FvAR9BVBpcoD%2FaVCnYWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGEigiMya3GbBzkULSUMheSdq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4vcjBIlDPtoVwRWj9UzFTs2vnN%2B4NEbR0km2U1l836uEJ4lXb3L9RZRNI6oTdSafE5LCaWGa%2F3HtV5wPIFyLZ5SnBqENZklLOOhsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFIQ4peiGiBksvw4Fc1%2FyucpIdbkW7SkgviORhd3zM3tGJM8%2BCxFTxgxWOMFEObwQQe6v0UFOc0z9d%2FFEFBtU0SslklZ3KLSGzeTkP8bAAogPrO0tp0ykQ3HOPa9n9A2srmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqMekK66aTmfShPBsC0AFpuRmjNu5opnJ%2B7NtWenCWiYYje2b5UX5LM543UWfYNVRe5gliRCnpu2MejRkFvBAaJuM%2BeBQ%2Bz3mGPgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N08RMDj9jh1uaUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMCUUtV79dTdBlbuaNLtSqLOJV29y%2FUWUTjoF2vbR6Kuby9dJc5zb7oYij3rt80PYgkE7s7EM7JCWQTuzsQzskJScdT5zBSpkSSg2Xdjx2ioDoy96hbC%2FPRJBO7OxDOyQlLfonSTkwMSUvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9abr4xDkBLs6MJDi5Vze8EI4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dZShfr%2BGwV8fZb4gz5TRM3naU3m7V%2FUf%2Fqse%2FmnnI3ogSyfFW%2F0fRgzoTIzTYH13%2BoHEq4TSbdk0C%2BWboHiYQOUTQJpiEYjifPLmJuWVYRpJgBJ10B2KefWsmexmrsaQzWaM27mimcn7aTLTM%2FUee0G778x1k%2FtKTABe3q4FTRy9rJnsZq7GkM1mjNu5opnJ%2B4pX12CyomWrRzA6MMcLjZTXjApUJNJbrbZGijcZojBIacL3llsfJIH4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdPETA4%2FY4dbmkND41Da5ofhj3WCGLEOBrgkMLkG7pV8gkE7s7EM7JCWQTuzsQzskJYTLVyw%2FAs33%2FBChP7JWeP%2FvdnsQYSNnOPs6Hc4oaBiRLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUaHjefbIUhVzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHW4XgTkfroE0%2Fg0pSBliSTmZozbuaKZyfuzbVnpwlomGK%2B1mJAZR7dn0V64oAV2S2SO5vVvQGzhvK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnm4jULk%2Bwqy7gv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5NNi34mWQDYhSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGN%2FESPh0VnOTBD1dmXejqjjeEjuMj2eJBgzqNNKeBnp%2BYuQYRXemzK6Md8ilpAph2jKEU92wLoda%2FDgVzX%2FK5ykh1uRbtKSC%2BI5GF3fMze0Ykzz4LEVPGDFY4wUQ5vBBB7q%2FRQU5zTP138UQUG1TRK8BhuJmL9Xy5ieVaIQcgYlc0Wis6vsXw%2BNvyT%2F%2FNT%2BuMkE7s7EM7JCWQTuzsQzskJV0ESkiO%2BxmSUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfv7lHQx69tYmWRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJytca75%2BH%2F9d3bDCbtRtnHx%2FEWSMZtu2NUs%2FAt7GC8akW2lkoXpFu69GVu74vYBH3A%2Fiv8UXizOL4U82YLYZV5JQpMKinOpAjnw97l%2BE8HfVym2p30VqshN7l92c35LcPtNNhqO7%2FD8Hi8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH1flyDRxgaVnAwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1uF4E5H66BNP4NKUgZYkk5maM27mimcn7s21Z6cJaJhivtZiQGUe3Z9FeuKAFdktkwAGtXPUAaWStca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTQFF9Ck3khpMiq%2BqEhq%2F1TMIWyCxLbIXgGxWSKY1nAfVE43kPmuXwxitZFaWd5SNPESAEJCTn5wA3hI7jI9niQYIWWqQ%2FZqehSs%2BqxzWNwWO7Z32EK9ZUUZYd%2FzsMKA%2B1ox3yKWkCmHYIlWmwcXh3mL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGIYgC8AnbPCIgwILq9KyEGHoOPvKioZjdYRMacunsLdG3pYzTR1pclKQTuzsQzskJctdGqsXnkaTp5PUcFNDLqqwd0H4HtEikZBO7OxDOyQlkE7s7EM7JCUtWRqwAzP%2BG3GsQU4ArKJKbzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyfu35bcbmCUQ8q%2B1mJAZR7dn0V64oAV2S2TdPIONMonzWfWPWvchtoDUENPJ4H0SAskkGQV%2BKiwLfmr6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPgxEuIGpSqUdtLehoLfx1a1os3UfykK%2Bs3H4CB3lnqxD4mrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7HJeV58f5JqoYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtz0t4s2Xl%2FuufPXWHYEsJYu%2B3zIM4qtxRsfgK3JZer0wdxjVZFnXphe%2Frzt17ajQrNJtAKSE6xOcGoQ1mSUs46GxWSKY1nAfXU6zPdpogBRC8jqtd7hPbcP6KyAAz7QstIOLmfiLNwgVLanbMlqgNK7yPB5FVxlyO3Px%2Bsxz5PP0Pvk%2FnEwnVbq3z7%2F9INwElIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7TvkvvtD2IPqqw%2B9aSa8gIBfl7EkWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGHr7F3bBchFy85hX06plzOhq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4CstttdjiS3v6GFm%2BD3PD2sbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBsrDjLlYrA4VMpnuHxPjpXPgJXUkiOxxVQ5ztSHd%2FRhHRtfFcELlzk3ZsnZsKCFAzTCJBOnRIyzWbkbLxJhaoNqyZ7GauxpDNZozbuaKZyfssCEGpjKdAS6Vjk1OkokEYnWBz8Rr6nG5q%2Bs%2FC5g6Za9ePprzFYhWhXJAhqyfL2ueg%2BhQnJ1Hz4NStc7W0X6Yk7zod1XpqKaQv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5PCZW%2FUiEBn95BO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcwQ9XZl3o6o43hI7jI9niQVDxyA%2FDby0QGuPblpLX6BT4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdCY8XoOY9miKl2xBlzgmiC6BZK0pTPGGXPmnemIsAzp3GPzyNQMP%2FHm6TvyiN%2FVm5ico4YntQ4jdQmHJAmd5UpysmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktk7yGbmwt%2FO8utca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kiefsfwOXstNQJzQp6wK0LBa8qPC%2FxDEEcWB3NpWM4QKIWkNZ0xiyLBFZ0jH1%2BQqp%2FtstupfyEfeljWECMsDC%2B0S8Hzo1BPAbeGsmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktkiSIzR3c3H8Ktca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kids88BR4mGh4DFcIQhAkBVOP1rBrFCpPvF06ZSZ%2FxN1p6zOnw1htHUS7Tw3kSlpEBfKz4n81sZjnTmVdmO%2F61Aw9PPpiKAXM5OvtZiQGUe3ZxfMSPCVOg%2FUrJnsZq7GkM1mjNu5opnJ%2Bwg0jZHc%2BOTMwVUd9kAdmnmNoZEdsmHptakyR5rvXrVmqNbKv%2BeXvh4gb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7HydoBt8knSA9z43EYlSvNQ4kLbo1xV5m%2BiAr0LnlUcmiKwYzf2U%2BDoGneyoLQQ3KncKH4N3Dh0bNcfXPYkpP3CzUe30FNdyEKcql6NmB55GO%2FlTB2UvYcoSfE6PXnjtxDj5%2F1TUAe5Q1IGI6ZIMFU6QTuzsQzskJZBO7OxDOyQlimbEWl4Pvpygsu3g%2BmRQ%2BemzMCI4ksq1UY46cJOx%2BRRQVPI%2FO7l3aLNtWenCWiYYr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyft08SeHxsP%2F92Ryo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJzbiHlkLYwPfJuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZNG1%2FxvgZO5LrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJInF4%2FZXGSVxMmc0KesCtCwWlopP2YhhG4hhoR8a8vCUoIdZcJm29lFyf5IFwDC%2ByN1txQ1G4Ww9pLUgYjpkgwVTvTz6YigFzOTr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfs1J5QAlxjb4WRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJxQtEf4uo4M6TmVdmO%2F61AwT7ecal%2BRuTzBD1dmXejqjvHoSfCNGWXyGxWSKY1nAfUEMnsct6psNkuErSvsSFTgdSmxHcRFBdei53B6tNISWIP573ETd6j8SK9M6t7gwyb0BOqwDC5vO9vxHoptW3D%2BqidOopC26W9ExjO%2Fe21buSY8XoOY9miKl2xBlzgmiC4jlo9wKE4PzorADQibvuH4uk78ojf1ZuZJjAjvOGcrSpBO7OxDOyQlkE7s7EM7JCWmak2dfrNEhuvVan1JFB%2FsFBP5nAsy2xQRO%2BYvOdBKKvucf3WKEIY%2FPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUv2wmVs47FSzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHWUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMYbUwdTyiyCWnzH0o6uSPPUVqooLjumayM%2FIDMa%2BpQsRfMFF1FNwkqKSRk%2Bsw4i9IFkST%2FJboPlkmrKLnBcaAO6%2B1mJAZR7dnQLwHLf67UWesmexmrsaQzWaM27mimcn7j7hHfSwb3dIP7GWZEaaXvODput4%2Fwc2pIG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2FyolUH37tU864NUKdj9pG%2BugfkUX8XPN50AwdhVkqO%2BA6k%3D</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-manager/j_spring_security_check</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XYSESSIONID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">XYSESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">XYSESSIONID=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="checkXYSESSIONID_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">String XYSESSIONID = vars.get(&quot;XYSESSIONID&quot;);
if (XYSESSIONID == null) {
	vars.put(&quot;XYSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${XYSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${UNIQUE_CONTAINERS_N}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">iteration</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sdoc-review/comments/deletesession?fragmentguid=${__BeanShell(vars.get(&quot;containerguid_&quot; + ${iteration}))}&amp;sessionguid=${RSESSIONGUID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="reporter" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;deleted &quot; + ${iteration} + &quot; out of &quot; + ${UNIQUE_CONTAINERS_N});</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
