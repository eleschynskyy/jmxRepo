<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SPS PT" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="MACHINES" elementType="Argument">
            <stringProp name="Argument.name">MACHINES</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LCMS_HOST" elementType="Argument">
            <stringProp name="Argument.name">LCMS_HOST</stringProp>
            <stringProp name="Argument.value">https://studio-perf2.qa.xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LCMS_CLIENT" elementType="Argument">
            <stringProp name="Argument.name">LCMS_CLIENT</stringProp>
            <stringProp name="Argument.value">studio-perf2.qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPS" elementType="Argument">
            <stringProp name="Argument.name">SPS</stringProp>
            <stringProp name="Argument.value">https://sps-perf.qa.xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME_M" elementType="Argument">
            <stringProp name="Argument.name">USERNAME_M</stringProp>
            <stringProp name="Argument.value">yevhen.leshchynskyy@xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD_M" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD_M</stringProp>
            <stringProp name="Argument.value">Qwerty1234</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="N_USERS" elementType="Argument">
            <stringProp name="Argument.name">N_USERS</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VU_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">VU_PREFIX</stringProp>
            <stringProp name="Argument.value">perf.user_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">5PsPeRf0rMaNcEU5eR</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CREATED_AFTER_THRESHOLD" elementType="Argument">
            <stringProp name="Argument.name">CREATED_AFTER_THRESHOLD</stringProp>
            <stringProp name="Argument.value">2011-09-04T10:17:00Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CREATED_BEFORE_THRESHOLD" elementType="Argument">
            <stringProp name="Argument.name">CREATED_BEFORE_THRESHOLD</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UPLOAD_SOURCE_DIR" elementType="Argument">
            <stringProp name="Argument.name">UPLOAD_SOURCE_DIR</stringProp>
            <stringProp name="Argument.value">D:\Xyleme\performance\products\sps\upload\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUTPUT_FOLDER" elementType="Argument">
            <stringProp name="Argument.name">OUTPUT_FOLDER</stringProp>
            <stringProp name="Argument.value">D:\Xyleme\performance\products\sps\output\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOLD_LOAD_FOR_SEC" elementType="Argument">
            <stringProp name="Argument.name">HOLD_LOAD_FOR_SEC</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_UP_TIME_SEC" elementType="Argument">
            <stringProp name="Argument.name">START_UP_TIME_SEC</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">https://sps-perf.qa.xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMPORT_FILE_PREFIX_WORD" elementType="Argument">
            <stringProp name="Argument.name">IMPORT_FILE_PREFIX_WORD</stringProp>
            <stringProp name="Argument.value">word</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMPORT_FILE_PREFIX_PP" elementType="Argument">
            <stringProp name="Argument.name">IMPORT_FILE_PREFIX_PP</stringProp>
            <stringProp name="Argument.value">pptx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMPORT_FILE_PREFIX_XML" elementType="Argument">
            <stringProp name="Argument.name">IMPORT_FILE_PREFIX_XML</stringProp>
            <stringProp name="Argument.value">importXML</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMPORT_FILE_WORD_N" elementType="Argument">
            <stringProp name="Argument.name">IMPORT_FILE_WORD_N</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMPORT_FILE_PP_N" elementType="Argument">
            <stringProp name="Argument.name">IMPORT_FILE_PP_N</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMPORT_FILE_XML_N" elementType="Argument">
            <stringProp name="Argument.name">IMPORT_FILE_XML_N</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORK_FOLDER" elementType="Argument">
            <stringProp name="Argument.name">WORK_FOLDER</stringProp>
            <stringProp name="Argument.value">SpsPerformanceTestsFolder</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CDS_FOLDER_TO_PUBLISH_ID" elementType="Argument">
            <stringProp name="Argument.name">CDS_FOLDER_TO_PUBLISH_ID</stringProp>
            <stringProp name="Argument.value">58899</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DOCUMENT_TO_EXPORT_GUID" elementType="Argument">
            <stringProp name="Argument.name">DOCUMENT_TO_EXPORT_GUID</stringProp>
            <stringProp name="Argument.value">23423c44-e99c-4d55-97ed-3747fdc757ac</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RS cleaner" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get USER" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOGIN" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="userNameChecker" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="autologin" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="userNameChecker" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cancel Generating" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getReviewsList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random review" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
ArrayList reviewGuids = new ArrayList();
ArrayList documentGuids = new ArrayList();
for(int i = 0; i &lt;= reviews.size() - 1; i++){
	String documentGuid = reviews.get(i).asObject().get(&quot;documentGuid&quot;).asString();
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;generating&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		reviewGuids.add(guid);
		documentGuids.add(documentGuid);
	}
}
vars.putObject(&quot;reviewGuids&quot;, reviewGuids);
vars.putObject(&quot;documentGuids&quot;, documentGuids);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
                <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}rs.txt</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">false</boolProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__BeanShell(vars.getObject(&quot;reviewGuids&quot;).size())}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
                <stringProp name="CounterConfig.start">0</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">iteration</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="getreviewGuid" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">int iteration = Integer.parseInt(vars.get(&quot;iteration&quot;));
int size = vars.getObject(&quot;reviewGuids&quot;).size();
String reviewGuid = vars.getObject(&quot;reviewGuids&quot;).get(iteration);
vars.put(&quot;reviewGuid&quot;, reviewGuid);
String documentGuid = vars.getObject(&quot;documentGuids&quot;).get(iteration);
log.info(&quot;Canceling item #&quot; + (iteration + 1) + &quot; out of &quot; + size + &quot;: reviewGuid=&quot; + reviewGuid + &quot;; documentGuid=&quot; + documentGuid);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cancel_cancelReview_SPS" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;status&quot;:&quot;canceled&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewGuid}/status</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close Review" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getReviewsList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random review" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
ArrayList reviewGuids = new ArrayList();
ArrayList documentGuids = new ArrayList();
for(int i = 0; i &lt;= reviews.size() - 1; i++){
	String documentGuid = reviews.get(i).asObject().get(&quot;documentGuid&quot;).asString();
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;open&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		reviewGuids.add(guid);
		documentGuids.add(documentGuid);
	}
}
vars.putObject(&quot;reviewGuids&quot;, reviewGuids);
vars.putObject(&quot;documentGuids&quot;, documentGuids);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
                <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}rs.txt</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">false</boolProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__BeanShell(vars.getObject(&quot;reviewGuids&quot;).size())}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration" enabled="true">
                <stringProp name="CounterConfig.start">0</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">iteration</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="forceCheckIn" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
int iteration = Integer.parseInt(vars.get(&quot;iteration&quot;));
int size = vars.getObject(&quot;reviewGuids&quot;).size();
String reviewGuid = vars.getObject(&quot;reviewGuids&quot;).get(iteration);
vars.put(&quot;reviewGuid&quot;, reviewGuid);
String documentGuid = vars.getObject(&quot;documentGuids&quot;).get(iteration);
log.info(&quot;Processing item #&quot; + (iteration + 1) + &quot; out of &quot; + size + &quot;: reviewGuid=&quot; + reviewGuid + &quot;; documentGuid=&quot; + documentGuid);
String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
try {
	client.forcecheckin(documentGuid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (Exception e) {
	ResponseCode = 400;
	IsSuccess = false;
	return false;
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Lock_lockReview_SPS" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;status&quot;:&quot;locked&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewGuid}/status</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_closeReview_SPS" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;status&quot;:&quot;closed&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewGuid}/status</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="delete" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.search.SDocQuery;
import com.xyleme.sdoc.client.search.PropertyTerm;
import com.xyleme.sdoc.client.search.BooleanTerm;
import com.xyleme.sdoc.client.SDocInfo;
String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
PropertyTerm sdocTypeTerm = new PropertyTerm(&quot;sdoctype&quot;, &quot;SYSTEM/review-docs/ReviewSessionDef.xml&quot;);
BooleanTerm andTerm = new BooleanTerm();
andTerm.add(sdocTypeTerm);
SDocQuery query = new SDocQuery(andTerm, null, null);
SDocInfo info = client.search(query, null, 2816, -1);
int size = info.getGuids().size();
int iteration = 1;
for (String reviewGuid: info.getGuids()){
	log.info(&quot;Processing item #&quot; + iteration + &quot; out of &quot; + size + &quot;: reviewGuid=&quot; + reviewGuid);
	client.delete(reviewGuid, true);
	iteration++;
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get Publications List" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetPublicationsList_setMineParameter_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] GetPublicationsList1_values = (int[])vars.getObject(&quot;GetPublicationsList1_RANDOM_VALUES&quot;);
if(GetPublicationsList1_values==null) {
	GetPublicationsList1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;GetPublicationsList1_RANDOM_VALUES&quot;,GetPublicationsList1_values);
	vars.put(&quot;GetPublicationsList1_N_GROUPS&quot;, &quot;&quot; + GetPublicationsList1_values.length);
}
Integer GetPublicationsList1_increment = (Integer)vars.getObject(&quot;GetPublicationsList1_INCREMENT&quot;);
if(GetPublicationsList1_increment==null) {
	GetPublicationsList1_increment = Integer.valueOf(0);
} else {
	int GetPublicationsList1_nGroups = Integer.parseInt(vars.get(&quot;GetPublicationsList1_N_GROUPS&quot;));
	GetPublicationsList1_increment = Integer.valueOf((GetPublicationsList1_increment.intValue()+1) % GetPublicationsList1_nGroups);
}
vars.put(&quot;GetPublicationsList1_SWITCH_VALUE&quot;, new Integer(GetPublicationsList1_values[GetPublicationsList1_increment.intValue()]).toString());
vars.putObject(&quot;GetPublicationsList1_INCREMENT&quot;, GetPublicationsList1_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${GetPublicationsList1_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetPublicationsList_setMineTrue_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetPublicationsList_setMineFalse_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetPublicationsList_setRecentParameter_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] GetPublicationsList2_values = (int[])vars.getObject(&quot;GetPublicationsList2_RANDOM_VALUES&quot;);
if(GetPublicationsList2_values==null) {
	GetPublicationsList2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;GetPublicationsList2_RANDOM_VALUES&quot;,GetPublicationsList2_values);
	vars.put(&quot;GetPublicationsList2_N_GROUPS&quot;, &quot;&quot; + GetPublicationsList2_values.length);
}
Integer GetPublicationsList2_increment = (Integer)vars.getObject(&quot;GetPublicationsList2_INCREMENT&quot;);
if(GetPublicationsList2_increment==null) {
	GetPublicationsList2_increment = Integer.valueOf(0);
} else {
	int GetPublicationsList2_nGroups = Integer.parseInt(vars.get(&quot;GetPublicationsList2_N_GROUPS&quot;));
	GetPublicationsList2_increment = Integer.valueOf((GetPublicationsList2_increment.intValue()+1) % GetPublicationsList2_nGroups);
}
vars.put(&quot;GetPublicationsList2_SWITCH_VALUE&quot;, new Integer(GetPublicationsList2_values[GetPublicationsList2_increment.intValue()]).toString());
vars.putObject(&quot;GetPublicationsList2_INCREMENT&quot;, GetPublicationsList2_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${GetPublicationsList2_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetPublicationsList_setRecentTrue_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;recent&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetPublicationsList_setRecentFalse_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;recent&quot;, &quot;false&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPublicationsList_getList_MINE_${mine}_RECENT_${recent}_SPS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments?mine=${mine}&amp;recent=${recent}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get Reviews List" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetReviewsList_setMineParameter_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] GetReviewsList1_values = (int[])vars.getObject(&quot;GetReviewsList1_RANDOM_VALUES&quot;);
if(GetReviewsList1_values==null) {
	GetReviewsList1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;GetReviewsList1_RANDOM_VALUES&quot;,GetReviewsList1_values);
	vars.put(&quot;GetReviewsList1_N_GROUPS&quot;, &quot;&quot; + GetReviewsList1_values.length);
}
Integer GetReviewsList1_increment = (Integer)vars.getObject(&quot;GetReviewsList1_INCREMENT&quot;);
if(GetReviewsList1_increment==null) {
	GetReviewsList1_increment = Integer.valueOf(0);
} else {
	int GetReviewsList1_nGroups = Integer.parseInt(vars.get(&quot;GetReviewsList1_N_GROUPS&quot;));
	GetReviewsList1_increment = Integer.valueOf((GetReviewsList1_increment.intValue()+1) % GetReviewsList1_nGroups);
}
vars.put(&quot;GetReviewsList1_SWITCH_VALUE&quot;, new Integer(GetReviewsList1_values[GetReviewsList1_increment.intValue()]).toString());
vars.putObject(&quot;GetReviewsList1_INCREMENT&quot;, GetReviewsList1_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${GetReviewsList1_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetReviewsList_setMineTrue_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetReviewsList_setMineFalse_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetReviewsList_setStatusParameter_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] GetReviewsList2_values = (int[])vars.getObject(&quot;GetReviewsList2_RANDOM_VALUES&quot;);
if(GetReviewsList2_values==null) {
	GetReviewsList2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;GetReviewsList2_RANDOM_VALUES&quot;,GetReviewsList2_values);
	vars.put(&quot;GetReviewsList2_N_GROUPS&quot;, &quot;&quot; + GetReviewsList2_values.length);
}
Integer GetReviewsList2_increment = (Integer)vars.getObject(&quot;GetReviewsList2_INCREMENT&quot;);
if(GetReviewsList2_increment==null) {
	GetReviewsList2_increment = Integer.valueOf(0);
} else {
	int GetReviewsList2_nGroups = Integer.parseInt(vars.get(&quot;GetReviewsList2_N_GROUPS&quot;));
	GetReviewsList2_increment = Integer.valueOf((GetReviewsList2_increment.intValue()+1) % GetReviewsList2_nGroups);
}
vars.put(&quot;GetReviewsList2_SWITCH_VALUE&quot;, new Integer(GetReviewsList2_values[GetReviewsList2_increment.intValue()]).toString());
vars.putObject(&quot;GetReviewsList2_INCREMENT&quot;, GetReviewsList2_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${GetReviewsList2_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetReviewsList_setStatusTrue_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;status&quot;, &quot;&amp;status=open&quot;);
vars.put(&quot;statusTitle&quot;, &quot;_STATUS_open&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetReviewsList_setStatusFalse_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;status&quot;, &quot;&quot;);
vars.put(&quot;statusTitle&quot;, &quot;&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetReviewsList_getList_MINE_${mine}${statusTitle}_SPS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=${mine}${status}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get Imports List" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetImportsList_setMineParameter_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] GetImportsList1_values = (int[])vars.getObject(&quot;GetImportsList1_RANDOM_VALUES&quot;);
if(GetImportsList1_values==null) {
	GetImportsList1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;GetImportsList1_RANDOM_VALUES&quot;,GetImportsList1_values);
	vars.put(&quot;GetImportsList1_N_GROUPS&quot;, &quot;&quot; + GetImportsList1_values.length);
}
Integer GetImportsList1_increment = (Integer)vars.getObject(&quot;GetImportsList1_INCREMENT&quot;);
if(GetImportsList1_increment==null) {
	GetImportsList1_increment = Integer.valueOf(0);
} else {
	int GetImportsList1_nGroups = Integer.parseInt(vars.get(&quot;GetImportsList1_N_GROUPS&quot;));
	GetImportsList1_increment = Integer.valueOf((GetImportsList1_increment.intValue()+1) % GetImportsList1_nGroups);
}
vars.put(&quot;GetImportsList1_SWITCH_VALUE&quot;, new Integer(GetImportsList1_values[GetImportsList1_increment.intValue()]).toString());
vars.putObject(&quot;GetImportsList1_INCREMENT&quot;, GetImportsList1_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${GetImportsList1_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetImportsList_setMineTrue_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetImportsList_setMineFalse_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetImportsList_setRecentParameter_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] GetImportsList2_values = (int[])vars.getObject(&quot;GetImportsList2_RANDOM_VALUES&quot;);
if(GetImportsList2_values==null) {
	GetImportsList2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;GetImportsList2_RANDOM_VALUES&quot;,GetImportsList2_values);
	vars.put(&quot;GetImportsList2_N_GROUPS&quot;, &quot;&quot; + GetImportsList2_values.length);
}
Integer GetImportsList2_increment = (Integer)vars.getObject(&quot;GetImportsList2_INCREMENT&quot;);
if(GetImportsList2_increment==null) {
	GetImportsList2_increment = Integer.valueOf(0);
} else {
	int GetImportsList2_nGroups = Integer.parseInt(vars.get(&quot;GetImportsList2_N_GROUPS&quot;));
	GetImportsList2_increment = Integer.valueOf((GetImportsList2_increment.intValue()+1) % GetImportsList2_nGroups);
}
vars.put(&quot;GetImportsList2_SWITCH_VALUE&quot;, new Integer(GetImportsList2_values[GetImportsList2_increment.intValue()]).toString());
vars.putObject(&quot;GetImportsList2_INCREMENT&quot;, GetImportsList2_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${GetImportsList2_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetImportsList_setRecentTrue_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;recent&quot;, &quot;true&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GetImportsList_setRecentFalse_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;recent&quot;, &quot;false&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetImportsList_getList_MINE_${mine}_RECENT_${recent}_SPS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/imports?mine=${mine}&amp;recent=${recent}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Publication Wizard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_DOCUMENTS_config_AUX" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;DOCUMENT_GUID_1&quot;, &quot;84407dd8-9013-4823-b527-0d1b1c86da78&quot;);
vars.put(&quot;DOCUMENT_GUID_2&quot;, &quot;8b85f2d9-6552-4825-b411-b10eecbfbf03&quot;);
vars.put(&quot;DOCUMENT_GUID_3&quot;, &quot;06012f1f-2ac3-4c2f-9f25-0b4ad6b72d6e&quot;);
vars.put(&quot;DOCUMENT_GUID_4&quot;, &quot;7ee2233b-0b76-43c1-bc8b-6e51732aca98&quot;);
vars.put(&quot;DOCUMENT_GUID_5&quot;, &quot;7dc66abf-5fbf-4561-bcaa-dbbfc647bf38&quot;);
vars.put(&quot;DOCUMENT_GUID_6&quot;, &quot;88022818-5659-45a8-b16c-521184519afa&quot;);
vars.put(&quot;DOCUMENT_GUID_7&quot;, &quot;68cba436-327c-40fb-81ed-c14d8ab22df6&quot;);
vars.put(&quot;DOCUMENT_GUID_8&quot;, &quot;18800665-c127-4adf-b798-da6f15ebd584&quot;);
vars.put(&quot;DOCUMENT_GUID_9&quot;, &quot;fe32c1c2-7211-4b7b-bf02-319862913c40&quot;);
vars.put(&quot;DOCUMENT_GUID_10&quot;, &quot;08148f8f-18f9-46b7-8f1c-d4e65aa89ea1&quot;);
vars.put(&quot;DOCUMENT_GUID_11&quot;, &quot;f0d61ecc-66d1-4b82-83fd-88fe44270494&quot;);
vars.put(&quot;DOCUMENT_GUID_12&quot;, &quot;358c04b0-ad60-40cc-bd78-b4d9eb9775c4&quot;);
vars.put(&quot;DOCUMENT_GUID_13&quot;, &quot;e167d1f6-5533-4009-b795-c0d605293e83&quot;);
vars.put(&quot;DOCUMENT_GUID_14&quot;, &quot;8b6f217a-e94d-43bb-b84a-446e381713ba&quot;);
vars.put(&quot;DOCUMENT_GUID_15&quot;, &quot;82a2a36e-f5ac-4cba-8627-a5739a927452&quot;);
vars.put(&quot;DOCUMENT_GUID_16&quot;, &quot;ef847b31-d492-424c-a7b3-f6c4ed1aca0a&quot;);
vars.put(&quot;DOCUMENT_GUID_17&quot;, &quot;73c64ee8-f5ac-428a-9092-7afa3793dc52&quot;);
vars.put(&quot;DOCUMENT_GUID_18&quot;, &quot;7ea88af0-42dc-4ba9-91b7-a2a00a30fc81&quot;);
vars.put(&quot;DOCUMENT_GUID_19&quot;, &quot;f7dfac25-1cc9-4727-8df9-35722722d374&quot;);
vars.put(&quot;DOCUMENT_GUID_20&quot;, &quot;dfa24f79-42b6-4fea-9d26-7bd3d764c073&quot;);
vars.put(&quot;DOCUMENT_GUID_21&quot;, &quot;be4385a3-6827-462d-941d-7fc2a1db7b30&quot;);
vars.put(&quot;DOCUMENT_GUID_22&quot;, &quot;95ad046e-3715-49d2-813b-699ade127ac4&quot;);
vars.put(&quot;DOCUMENT_GUID_23&quot;, &quot;13a8c7a1-be94-49b2-a49f-c13544ed8a4a&quot;);
vars.put(&quot;DOCUMENT_GUID_24&quot;, &quot;83cbe411-e316-402c-8601-f0a67fc5ebef&quot;);
vars.put(&quot;DOCUMENT_GUID_25&quot;, &quot;0f72ed2a-a779-4099-84eb-a21c3849c66d&quot;);
vars.put(&quot;DOCUMENT_GUID_26&quot;, &quot;8dd910e0-820b-4970-a680-7acbdd1f9762&quot;);
vars.put(&quot;DOCUMENT_GUID_27&quot;, &quot;5f6e0c81-bdb8-47f0-8ccc-e92c19c298b8&quot;);
vars.put(&quot;DOCUMENT_GUID_28&quot;, &quot;79b681b2-1bb7-4ee2-90f7-d4cc5a563678&quot;);
vars.put(&quot;DOCUMENT_GUID_29&quot;, &quot;85356ff6-86a7-40f2-ae46-59cfc8e12f5c&quot;);
vars.put(&quot;DOCUMENT_GUID_30&quot;, &quot;22d95acc-4403-47ef-b2c2-623daef69b2c&quot;);
vars.put(&quot;DOCUMENT_GUID_31&quot;, &quot;9c93f9cf-8de1-4457-8b92-9f4b3a64498b&quot;);
vars.put(&quot;DOCUMENT_GUID_32&quot;, &quot;1f1b54aa-4010-4e18-9dc1-c9f8b3ab94ca&quot;);
vars.put(&quot;DOCUMENT_GUID_33&quot;, &quot;bee689ad-6220-4f0f-992c-7857736e4719&quot;);
vars.put(&quot;DOCUMENT_GUID_34&quot;, &quot;5d917436-743a-427b-a087-57f971d06c49&quot;);
vars.put(&quot;DOCUMENT_GUID_35&quot;, &quot;a32e6a04-5cd2-4288-ba4f-db9cb9bcd98b&quot;);
vars.put(&quot;DOCUMENT_GUID_36&quot;, &quot;a8778985-7c70-4986-b9e8-7fc9b603930f&quot;);
vars.put(&quot;DOCUMENT_GUID_37&quot;, &quot;d2258c86-0a22-4132-aaa2-4b50cbbb5fda&quot;);
vars.put(&quot;DOCUMENT_GUID_38&quot;, &quot;c296cd6b-b5d9-4fd7-ad1c-a33646da868d&quot;);
vars.put(&quot;DOCUMENT_GUID_39&quot;, &quot;842c5a04-6dd3-4f04-845f-455a282c0d9b&quot;);
vars.put(&quot;DOCUMENT_GUID_40&quot;, &quot;00224132-66a3-43c6-924d-d8b169c79a34&quot;);
vars.put(&quot;DOCUMENT_GUID_41&quot;, &quot;e2bf8c29-d7c3-4c86-9439-eb2ab0af0f30&quot;);
vars.put(&quot;DOCUMENT_GUID_42&quot;, &quot;dbdf9dfe-ec90-42fc-9ee8-d526c4933888&quot;);
vars.put(&quot;DOCUMENT_GUID_43&quot;, &quot;45e5c5ac-905f-4155-918e-3bfea19763c6&quot;);
vars.put(&quot;DOCUMENT_GUID_44&quot;, &quot;9f1d56d4-1cbc-478d-bd69-41b3895395ec&quot;);
vars.put(&quot;DOCUMENT_GUID_45&quot;, &quot;fc1e54fa-eb16-4928-9215-268e664e9f07&quot;);
vars.put(&quot;DOCUMENT_GUID_46&quot;, &quot;a7cbc4c7-f0dc-4340-8e68-60027ee079de&quot;);
vars.put(&quot;DOCUMENT_GUID_47&quot;, &quot;d1009334-7874-488c-a221-f4810bb8b654&quot;);
vars.put(&quot;DOCUMENT_GUID_48&quot;, &quot;ecb019f5-13f0-4aef-9f6a-9c77da7089b6&quot;);
vars.put(&quot;DOCUMENT_GUID_49&quot;, &quot;44d5f411-03b9-4369-9928-541e777c80f5&quot;);
vars.put(&quot;DOCUMENT_GUID_50&quot;, &quot;c4d3b31e-6817-4633-a02e-054cc8dc99c2&quot;);
vars.put(&quot;DOCUMENT_GUID_51&quot;, &quot;16e8af8f-895b-4431-a0e3-a06558283525&quot;);
vars.put(&quot;DOCUMENT_GUID_52&quot;, &quot;4296013f-af98-4582-8057-548b2cf26439&quot;);
vars.put(&quot;DOCUMENT_GUID_53&quot;, &quot;1096a9f9-a411-41c1-9290-91be935c0c6f&quot;);
vars.put(&quot;DOCUMENT_GUID_54&quot;, &quot;433eba74-e07f-4ece-b094-cb0cca12b9c1&quot;);
vars.put(&quot;DOCUMENT_GUID_55&quot;, &quot;6da7660d-3452-4583-870f-c95d4ee98aec&quot;);
vars.put(&quot;DOCUMENT_GUID_56&quot;, &quot;d425ab3f-b625-4692-83fc-dfbd81174687&quot;);
vars.put(&quot;DOCUMENT_GUID_57&quot;, &quot;c811e023-a2f3-47a6-9edc-8aee6aae9979&quot;);
vars.put(&quot;DOCUMENT_GUID_58&quot;, &quot;626a8dc8-1fd7-4924-83ed-f4e33bf00840&quot;);
vars.put(&quot;DOCUMENT_GUID_59&quot;, &quot;6496929e-47a4-4be5-a033-478dbfbb5c7c&quot;);
vars.put(&quot;DOCUMENT_GUID_60&quot;, &quot;c1e0904e-1134-4b26-bb4c-4278e56fdb66&quot;);
vars.put(&quot;DOCUMENT_GUID_61&quot;, &quot;ed625702-a85c-4eb1-b838-53cfb4a1d571&quot;);
vars.put(&quot;DOCUMENT_GUID_62&quot;, &quot;4772749d-8b99-4b8f-8e7a-065192daa53b&quot;);
vars.put(&quot;DOCUMENT_GUID_63&quot;, &quot;146144ab-b95a-4629-a7c8-a2008c32b7b3&quot;);
vars.put(&quot;DOCUMENT_GUID_64&quot;, &quot;2797ad1a-4986-47c7-9788-365d16f35adf&quot;);
vars.put(&quot;DOCUMENT_GUID_65&quot;, &quot;46a94045-8f3a-41f3-81ce-945a95c16d7d&quot;);
vars.put(&quot;DOCUMENT_GUID_66&quot;, &quot;794fa38c-9afe-4a47-b3cc-9d407fa9965f&quot;);
vars.put(&quot;DOCUMENT_GUID_67&quot;, &quot;c9a51e30-fd4d-433f-be54-3dfdc06936fe&quot;);
vars.put(&quot;DOCUMENT_GUID_68&quot;, &quot;bee295c5-5344-4d4e-ade6-7f26473d08d5&quot;);
vars.put(&quot;DOCUMENT_GUID_69&quot;, &quot;bf85133d-2876-43a6-845e-6b79eec89594&quot;);
vars.put(&quot;DOCUMENT_GUID_70&quot;, &quot;cbff7980-b46a-4204-a378-76929d31acd8&quot;);
vars.put(&quot;DOCUMENT_GUID_71&quot;, &quot;adf33b12-60c7-4a54-aef1-a5410f876b05&quot;);
vars.put(&quot;DOCUMENT_GUID_72&quot;, &quot;58f1ea06-2c40-4c40-9290-5bd1bfb1cc7a&quot;);
vars.put(&quot;DOCUMENT_GUID_73&quot;, &quot;a7262463-467f-4660-abfa-2df82780acc2&quot;);
vars.put(&quot;DOCUMENT_GUID_74&quot;, &quot;562a68c9-8455-40dd-b462-c3da7d32f0be&quot;);
vars.put(&quot;DOCUMENT_GUID_75&quot;, &quot;d2870fa8-c3df-43a2-8af2-14fa59616fd8&quot;);
vars.put(&quot;DOCUMENT_GUID_76&quot;, &quot;550c5a87-cf16-4f11-9d93-1fe5e83d1cf0&quot;);
vars.put(&quot;DOCUMENT_GUID_77&quot;, &quot;f36a16fb-66e6-4aad-883b-63f9a877db6f&quot;);
vars.put(&quot;DOCUMENT_GUID_78&quot;, &quot;73a90729-9926-4d70-85c1-a2de5f0ec052&quot;);
vars.put(&quot;DOCUMENT_GUID_79&quot;, &quot;3f1f20af-5336-4963-a5cc-263074a8b6cc&quot;);
vars.put(&quot;DOCUMENT_GUID_80&quot;, &quot;94d35bcd-7bc0-439c-a61d-f2fdedc94bec&quot;);
vars.put(&quot;DOCUMENT_GUID_81&quot;, &quot;b73a14f2-d7fe-416d-add9-84fdac19eda2&quot;);
vars.put(&quot;DOCUMENT_GUID_82&quot;, &quot;34f99e39-4697-449c-92e7-6c477cad2a53&quot;);
vars.put(&quot;DOCUMENT_GUID_83&quot;, &quot;49566104-145b-453f-b0d7-1a2f80837bf1&quot;);
vars.put(&quot;DOCUMENT_GUID_84&quot;, &quot;d1236fff-cc99-4443-9b55-83e337efff6c&quot;);
vars.put(&quot;DOCUMENT_GUID_85&quot;, &quot;05c531f4-4f45-4483-b174-9d234985ffc7&quot;);
vars.put(&quot;DOCUMENT_GUID_86&quot;, &quot;a82a6329-1f66-4ee7-b37d-cf2f37bf1e8e&quot;);
vars.put(&quot;DOCUMENT_GUID_87&quot;, &quot;59a10517-5e00-4cca-b3ec-3fe8af540ab4&quot;);
vars.put(&quot;DOCUMENT_GUID_88&quot;, &quot;ee28851f-bd72-4c29-b714-5bfdebc1f3a0&quot;);
vars.put(&quot;DOCUMENT_GUID_89&quot;, &quot;5ca7bfa7-8fa8-46e3-8fb3-fe6a9266d3bf&quot;);
vars.put(&quot;DOCUMENT_GUID_90&quot;, &quot;b36ab65d-79f1-46e9-973f-873b300fe202&quot;);
vars.put(&quot;DOCUMENT_GUID_91&quot;, &quot;1573672b-5fe4-4e0c-9a8e-36a9895d24e9&quot;);
vars.put(&quot;DOCUMENT_GUID_92&quot;, &quot;4e7bb0cf-a78d-4b9e-b396-155afe530d20&quot;);
vars.put(&quot;DOCUMENT_GUID_93&quot;, &quot;38b0583d-d795-40d4-9376-3c74f586d191&quot;);
vars.put(&quot;DOCUMENT_GUID_94&quot;, &quot;e9439d5e-7fb0-4095-b819-561cb22c2b54&quot;);
vars.put(&quot;DOCUMENT_GUID_95&quot;, &quot;10ebaa1e-6412-4271-a119-5451cb9c5576&quot;);
vars.put(&quot;DOCUMENT_GUID_96&quot;, &quot;2044d8a9-240e-4dca-8881-94cbffae72d5&quot;);
vars.put(&quot;DOCUMENT_GUID_97&quot;, &quot;b40a2fac-37d4-4579-975c-b6d4b6592edc&quot;);
vars.put(&quot;DOCUMENT_GUID_98&quot;, &quot;6c0595a8-ef5f-484c-9b44-c9e94d7f2a3c&quot;);
vars.put(&quot;DOCUMENT_GUID_99&quot;, &quot;f8fc86b9-0a77-4100-865e-11efc99e968e&quot;);
vars.put(&quot;DOCUMENT_GUID_100&quot;, &quot;d68a732a-ddf1-4431-b2b2-5fcc813b24f2&quot;);
vars.put(&quot;N_DOCUMENTS&quot;, &quot;100&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=10&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2P5vV5X59jDuLgu4Ifvq9EhNIr0zq3uDDJvQE6rAMLm87BYSIqNSPsNz42%2FbvW16d9luC%2Ft%2B%2BUzHXQjzCudt1GnJT7bVpzOXQL7RgKQ8p%2BQ4197s6LBNby2vyROElSEsZbAoIpgz%2B6jTf%2B%2Ffe%2BzYMgft9zTEt%2Fmsef7BkMISu1Mf9v03%2F7fJwo1LCfNwliCH714VzISxLW0IGqjLPDuTELekiNsYtfU6H8SwzcQSs%2FvJei%2F1jazY5NzlX2HQQt6hdRGha3VWjvvXEEt7kzMFTTqDWQXrWXDl7SfksAxJjLg%2Ftlu%2BJ8lsdrArBqENZklLOOhsVkimNZwH1HyAz%2BSKHOgW6wg8DoCOoFPlU8pj7GRGxxC4ulR4I8ofZRRxq9fkHPHqE6%2F0TsGNRWD9CBe1f3eU85nM7k8yQAiBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz%2B%2FTqPMA5YzsXbHMi9f44kDRI%2B1asui8mlGOOnCTsfkUUFTyPzu5d2izbVnpwlomGK%2B1mJAZR7dnv50JwxckcrGsmexmrsaQzWaM27mimcn7uVC82hoXSN1%2FVPFu5PXwE1HyXJBQEn5yduoJUWzuQfZq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4ve8HmsQB7KfH5jxMnITH5wQKCKYM%2Fuo038GJjJXqIeZ%2FuGgfOh1eDK8H3gH8t%2BBMY5bliCJ6cltQvLnYgm9a5nGNOQtaWllq4Zh0wNPIrRMdqLFNft7fIbZaxLnkCRbGQudwnoGCOOM53wwq%2Fl7m9oLtdafD9kiHPfZ0l42ABy7BaVW6WzhhCxdyzw7J8nyqwVMwth3ZyYYzAwTif%2BMs6%2FreIxd%2FZk7XP%2Bo0BCHIYXUCobIxCY8iOYemeeGhLHn3WZdWk5UNwzNwbHz7%2FVRrftRKWbs5KzuYqlD6agJRvEUjncaCdTSHr1mQC81ZP%2BPkjmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqBYKVda%2B2pPztCuReJFg1uzCz%2BsD2bbpvrsLM1FbA2tKWiGSg2UP6gNPzvqYijw%2BFpu48DINEq92Z%2BZh7wd6aTJIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7Tvkvvnzv2j77RUZwLY3rvWEhS%2B8Ga17ReRw95gzEZxnRCEZn1ydZW%2FNAQp%2B%2B6OYmqGywBRsVkimNZwH1RON5D5rl8MbP%2FdeGHRI5o8EPV2Zd6OqON4SO4yPZ4kHT0rtJIWYwkwZ7xElbqJDYxQANIs3CVkP2EsD2wUvRXKo0cWFO84lhavrPwuYOmWvXj6a8xWIVoUu8f6%2Bo3rgdoPoUJydR8%2BCW8LYAle9m9GkiplG47lQW%2Fe2gQXfix3Gjl5BxeGTWr8TRPeZ0lrw2hqT5hzo9MuX2mQhjoSj9P%2Fp2S5tKGpi1Jqyi5wXGgDuvtZiQGUe3Z7%2BdCcMXJHKxrf4UfKQTmalmjNu5opnJ%2BzNtEcr3Y077G0Q3ZawabhbXjApUJNJbrT%2BoYS0QHDY%2F11Ly%2BnSU3YSNnzvXQ8EK4jiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7fLDS9C3tjo063rFksiyc6usdRsykzhdLjiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1hZYev3uCPNDA4MIivWwSWTbRuod4J4obn3OR6tnGmGlpDZ9OSd0V1NBqvPpTpYo22cJhrEjNYnP1B12WjH3Gv7pLTiKJsuuwjbg1lsIIN63xyO729Aq0Jx69twAVEbozPZspR4Jgqeu4a8uV2M%2F3oWrSYIdfOTM%2BiOcR%2FZ7LbhqQTuzsQzskJZBO7OxDOyQlEjd9UnKDbBdfZmNkm%2FEEUC8jqtd7hPbcwQ9XZl3o6o7BqENZklLOOhsVkimNZwH1OCEC6NQVzmgsms636W51VXA2NuXaYc9%2F7RnLgSzjkiKmp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeYO1MLZtEYRZEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o7x6EnwjRll8hsVkimNZwH1E882HyFCIUBFBxQ16IPYYTiQtujXFXmbHALnojhZv%2BtT6WXtNk9HMSLdqo%2FujnR1pzig3Q2f7xdQcz2eDG7sve6v0UFOc0z9d%2FFEFBtU0SuXSl7VR0WRj7mVJk5G4H5zhfWTnR%2ByMLEwy1iXFDFa52xpSA1FK1HXolOOyP5b4hyQTuzsQzskJZBO7OxDOyQlYdfE%2FLGk7SDTS%2B9qkIM1Z7pO%2FKI39WbmNsTZUrpCQidvdvMgf3sxcqyZ7GauxpDNZozbuaKZyfuzbVnpwlomGFxBJ9c3QG20u0Ap5rmY%2Fydq%2Bs%2FC5g6Za9ePprzFYhWh%2BjHM5UTztnKg%2BhQnJ1Hz4InA7pVRHYO3n3OR6tnGmGlpDZ9OSd0V1CPKVzE5kkxpB3GNVkWdemERlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9RlxwDt0tJ414j0XEPRJaMw%2ForIADPtCy3axheDpL%2BViCgimDP7qNN8sVA8DzMFFHa1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2Fyoso6n49X1yxmbK5SuKXWIrACoUG%2BpF1VqvxE6EKpGKP%2BQTuzsQzskJZBO7OxDOyQleh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfvKRRCUxnhwkbNUIuvk9ITrpqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL1Zb4gz5TRM3l4ULdEV10x7xI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqO8ehJ8I0ZZfIbFZIpjWcB9dQ2AqBq2Y2eRQcUNeiD2GE4kLbo1xV5mxwC56I4Wb%2FrU%2Bll7TZPRzEi3aqP7o50dac4oN0Nn%2B8XUHM9ngxu7L3ur9FBTnNM%2FXfxRBQbVNEr7c%2B%2Bz0NHEjkKv%2B7QMBnfv%2FwriZcRY6J8e3j31JigjkWQTuzsQzskJZBO7OxDOyQlT2DC910U2HatXH873PiCyi1Kd2tRRBraPt7x6VXAyz%2B7w7oAmMNfrRYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B%2BaTx3QpbZL1rnPUoOp4FKmNoZEdsmHptR8JY3s2yVF9tLv60rTRllsgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSh7xk5ZyiXeQJ0cRiFTrRnOhItjFLXpHsAV6cJTITVLVfYdBC3qF1EcY1%2ByIhmX2wRTTVcBFfWG8p1udeIq9I%2BnqdYrVY9%2FTuQTuzsQzskJZBO7OxDOyQl%2FCuJlxFjonwRlJz6B0fT8lv%2B%2F6Uo%2FQKJwahDWZJSzjobFZIpjWcB9d1uLGaKBkfnLyOq13uE9tw%2ForIADPtCy%2FLl8ix9wL5xCgimDP7qNN%2B5p78EDGF9LxTIpj2ePSTkaDSBSQUfnvmRPe8k6pxsVfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOBm8FdtwTiQGpIZzrQOFC15Z5bGZyzCfekE7s7EM7JCWQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MbnFJCP83ylN8EPV2Zd6OqON4SO4yPZ4kGdv13cWCb42ZLJ3kvdjW90%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDO%2FDgVzX%2FK5yp%2BzMlzH1K%2F81K4hWYwDOpLCFYNXuT9A3k1nOlGylrbTso3GYxUmV6Ml8JDG%2FmAtP6FDCqS0DMH87%2B2IhRZWuclugLVpNON%2FdnJi0DzD8IPNizyGUksps7YmrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7E9xduE22Q5yYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRubQiNJiT8689%2BZ6iIZX5cHe1udWWdi3N8SN31ScoNsF19mY2Sb8QRQLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBDnUjfzA%2Bzf2%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81w6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQobMnrQFeJOC1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2B1LyrLudLKow%2BFpia6N0m%2B6mp3xXB23vSG9UTixAfPRFZhq6jWLfqRrkqemzaLJ0Sp0UvqfAQBPu3wnzAV9YFq6fc5Hq2caYaWkNn05J3RXU780IW1HWDXHUgYjpkgwVToK4%2F9YHRND0w9jxZurWfh6QTuzsQzskJZBO7OxDOyQlUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsi8Pi5U4Nu2JjLvOKp6Btp5jeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i6KI4RjcoTg08gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23HuqH2Y5jzzhBr8KCWGS1IIbFZIpjWcB9RryWaqBL1%2BousIPA6AjqBTWC6MKHqZ%2FAsQuLpUeCPKH2UUcavX5Bzx8GQ%2F6LuSFRK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnmAaXaNHDNHdFzRpAy%2FDcLgUylxvzc8qvdjLAQUhK%2FJIH3Wm7u6wKF%2B9UqCXnCAEEHhl8MIk9x6JQsc9rA6kw0j5cPOIhbjkplkE7s7EM7JCXVb53SsNiJyymT6tKlTDD8ZozbuaKZyfuzbVnpwlomGCWhMtvmawcO0V64oAV2S2TBN8IC%2B8do7K1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargFsGuQQ2GFkUoe8ZOWcol3l4un0BKe2p%2BdKf8f2oqiOrn6vWahNwYRt0ycLrQ3txSCZ%2BedrY6kI%2BafDuOagtADIdd6PkEkvqn7yS0PYo4GbOXwEkIPXGHJQRTTVcBFfWGxwRqY1pt%2BEOSYwI7zhnK0oIXYQVoc1gbn%2BtsV8Lg%2FzvYsV6X5Pq5lWQTuzsQzskJU9gwvddFNh2XX091Vqgbj4tSndrUUQa2lN%2F3FvAR9BVBpcoD%2FaVCnYWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGEigiMya3GbBzkULSUMheSdq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4PR74TahdmvemN5nAaeLXK%2F%2FcIeffVx4vcjBIlDPtoVwRWj9UzFTs2vnN%2B4NEbR0km2U1l836uEJ4lXb3L9RZRNI6oTdSafE5LCaWGa%2F3HtV5wPIFyLZ5SnBqENZklLOOhsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFIQ4peiGiBksvw4Fc1%2FyucpIdbkW7SkgviORhd3zM3tGJM8%2BCxFTxgxWOMFEObwQQe6v0UFOc0z9d%2FFEFBtU0SslklZ3KLSGzeTkP8bAAogPrO0tp0ykQ3HOPa9n9A2srmaM27mimcn7s21Z6cJaJhi9vTKkZqkhqMekK66aTmfShPBsC0AFpuRmjNu5opnJ%2B7NtWenCWiYYje2b5UX5LM543UWfYNVRe5gliRCnpu2MejRkFvBAaJuM%2BeBQ%2Bz3mGPgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N08RMDj9jh1uaUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMCUUtV79dTdBlbuaNLtSqLOJV29y%2FUWUTjoF2vbR6Kuby9dJc5zb7oYij3rt80PYgkE7s7EM7JCWQTuzsQzskJScdT5zBSpkSSg2Xdjx2ioDoy96hbC%2FPRJBO7OxDOyQlLfonSTkwMSUvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9abr4xDkBLs6MJDi5Vze8EI4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dZShfr%2BGwV8fZb4gz5TRM3naU3m7V%2FUf%2Fqse%2FmnnI3ogSyfFW%2F0fRgzoTIzTYH13%2BoHEq4TSbdk0C%2BWboHiYQOUTQJpiEYjifPLmJuWVYRpJgBJ10B2KefWsmexmrsaQzWaM27mimcn7aTLTM%2FUee0G778x1k%2FtKTABe3q4FTRy9rJnsZq7GkM1mjNu5opnJ%2B4pX12CyomWrRzA6MMcLjZTXjApUJNJbrbZGijcZojBIacL3llsfJIH4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdPETA4%2FY4dbmkND41Da5ofhj3WCGLEOBrgkMLkG7pV8gkE7s7EM7JCWQTuzsQzskJYTLVyw%2FAs33%2FBChP7JWeP%2FvdnsQYSNnOPs6Hc4oaBiRLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUaHjefbIUhVzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHW4XgTkfroE0%2Fg0pSBliSTmZozbuaKZyfuzbVnpwlomGK%2B1mJAZR7dn0V64oAV2S2SO5vVvQGzhvK1xrvn4f%2F13IG%2Fiz3TPJL3w7DZMe%2FargLRpfywSDpnm4jULk%2Bwqy7gv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5NNi34mWQDYhSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGN%2FESPh0VnOTBD1dmXejqjjeEjuMj2eJBgzqNNKeBnp%2BYuQYRXemzK6Md8ilpAph2jKEU92wLoda%2FDgVzX%2FK5ykh1uRbtKSC%2BI5GF3fMze0Ykzz4LEVPGDFY4wUQ5vBBB7q%2FRQU5zTP138UQUG1TRK8BhuJmL9Xy5ieVaIQcgYlc0Wis6vsXw%2BNvyT%2F%2FNT%2BuMkE7s7EM7JCWQTuzsQzskJV0ESkiO%2BxmSUY46cJOx%2BRR3bNYTIiyULPnLMNR3isHzr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfv7lHQx69tYmWRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJytca75%2BH%2F9d3bDCbtRtnHx%2FEWSMZtu2NUs%2FAt7GC8akW2lkoXpFu69GVu74vYBH3A%2Fiv8UXizOL4U82YLYZV5JQpMKinOpAjnw97l%2BE8HfVym2p30VqshN7l92c35LcPtNNhqO7%2FD8Hi8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH1flyDRxgaVnAwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1uF4E5H66BNP4NKUgZYkk5maM27mimcn7s21Z6cJaJhivtZiQGUe3Z9FeuKAFdktkwAGtXPUAaWStca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4C0aX8sEg6Z5uI1C5PsKsu4L%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTQFF9Ck3khpMiq%2BqEhq%2F1TMIWyCxLbIXgGxWSKY1nAfVE43kPmuXwxitZFaWd5SNPESAEJCTn5wA3hI7jI9niQYIWWqQ%2FZqehSs%2BqxzWNwWO7Z32EK9ZUUZYd%2FzsMKA%2B1ox3yKWkCmHYIlWmwcXh3mL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGIYgC8AnbPCIgwILq9KyEGHoOPvKioZjdYRMacunsLdG3pYzTR1pclKQTuzsQzskJctdGqsXnkaTp5PUcFNDLqqwd0H4HtEikZBO7OxDOyQlkE7s7EM7JCUtWRqwAzP%2BG3GsQU4ArKJKbzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyfu35bcbmCUQ8q%2B1mJAZR7dn0V64oAV2S2TdPIONMonzWfWPWvchtoDUENPJ4H0SAskkGQV%2BKiwLfmr6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPgxEuIGpSqUdtLehoLfx1a1os3UfykK%2Bs3H4CB3lnqxD4mrKLnBcaAO6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7HJeV58f5JqoYy7ziqegbaeY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtz0t4s2Xl%2FuufPXWHYEsJYu%2B3zIM4qtxRsfgK3JZer0wdxjVZFnXphe%2Frzt17ajQrNJtAKSE6xOcGoQ1mSUs46GxWSKY1nAfXU6zPdpogBRC8jqtd7hPbcP6KyAAz7QstIOLmfiLNwgVLanbMlqgNK7yPB5FVxlyO3Px%2Bsxz5PP0Pvk%2FnEwnVbq3z7%2F9INwElIr0zq3uDDJvQE6rAMLm87o8C%2FfJwOw0tv6kp7TvkvvtD2IPqqw%2B9aSa8gIBfl7EkWClXWvtqT87Z4Xa%2Bia8WaZozbuaKZyfuzbVnpwlomGHr7F3bBchFy85hX06plzOhq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4CstttdjiS3v6GFm%2BD3PD2sbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBsrDjLlYrA4VMpnuHxPjpXPgJXUkiOxxVQ5ztSHd%2FRhHRtfFcELlzk3ZsnZsKCFAzTCJBOnRIyzWbkbLxJhaoNqyZ7GauxpDNZozbuaKZyfssCEGpjKdAS6Vjk1OkokEYnWBz8Rr6nG5q%2Bs%2FC5g6Za9ePprzFYhWhXJAhqyfL2ueg%2BhQnJ1Hz4NStc7W0X6Yk7zod1XpqKaQv9YIUL9sBeNsLjLlKUdjP0bXxXBC5c5PCZW%2FUiEBn95BO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcwQ9XZl3o6o43hI7jI9niQVDxyA%2FDby0QGuPblpLX6BT4CV1JIjscVUOc7Uh3f0YRvk9a5OsihFoOpbsFDX%2BjdCY8XoOY9miKl2xBlzgmiC6BZK0pTPGGXPmnemIsAzp3GPzyNQMP%2FHm6TvyiN%2FVm5ico4YntQ4jdQmHJAmd5UpysmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktk7yGbmwt%2FO8utca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kiefsfwOXstNQJzQp6wK0LBa8qPC%2FxDEEcWB3NpWM4QKIWkNZ0xiyLBFZ0jH1%2BQqp%2FtstupfyEfeljWECMsDC%2B0S8Hzo1BPAbeGsmexmrsaQzWaM27mimcn7LiKDm977qT6vtZiQGUe3Z9FeuKAFdktkiSIzR3c3H8Ktca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qIJbJZvI3Wv%2Fpqd8Vwdt70hXtltt2OuCpmxadiRu5Vd56%2BcnYo24kids88BR4mGh4DFcIQhAkBVOP1rBrFCpPvF06ZSZ%2FxN1p6zOnw1htHUS7Tw3kSlpEBfKz4n81sZjnTmVdmO%2F61Aw9PPpiKAXM5OvtZiQGUe3ZxfMSPCVOg%2FUrJnsZq7GkM1mjNu5opnJ%2Bwg0jZHc%2BOTMwVUd9kAdmnmNoZEdsmHptakyR5rvXrVmqNbKv%2BeXvh4gb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7HydoBt8knSA9z43EYlSvNQ4kLbo1xV5m%2BiAr0LnlUcmiKwYzf2U%2BDoGneyoLQQ3KncKH4N3Dh0bNcfXPYkpP3CzUe30FNdyEKcql6NmB55GO%2FlTB2UvYcoSfE6PXnjtxDj5%2F1TUAe5Q1IGI6ZIMFU6QTuzsQzskJZBO7OxDOyQlimbEWl4Pvpygsu3g%2BmRQ%2BemzMCI4ksq1UY46cJOx%2BRRQVPI%2FO7l3aLNtWenCWiYYr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyft08SeHxsP%2F92Ryo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJzbiHlkLYwPfJuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZNG1%2FxvgZO5LrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJInF4%2FZXGSVxMmc0KesCtCwWlopP2YhhG4hhoR8a8vCUoIdZcJm29lFyf5IFwDC%2ByN1txQ1G4Ww9pLUgYjpkgwVTvTz6YigFzOTr7WYkBlHt2e%2FnQnDFyRysayZ7GauxpDNZozbuaKZyfs1J5QAlxjb4WRyo305OTDfpqd8Vwdt70hvVE4sQHz0ReiXtKZQYcklwcYjfdMKxJxQtEf4uo4M6TmVdmO%2F61AwT7ecal%2BRuTzBD1dmXejqjvHoSfCNGWXyGxWSKY1nAfUEMnsct6psNkuErSvsSFTgdSmxHcRFBdei53B6tNISWIP573ETd6j8SK9M6t7gwyb0BOqwDC5vO9vxHoptW3D%2BqidOopC26W9ExjO%2Fe21buSY8XoOY9miKl2xBlzgmiC4jlo9wKE4PzorADQibvuH4uk78ojf1ZuZJjAjvOGcrSpBO7OxDOyQlkE7s7EM7JCWmak2dfrNEhuvVan1JFB%2FsFBP5nAsy2xQRO%2BYvOdBKKvucf3WKEIY%2FPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9twRIAQkJOfnAMGoQ1mSUs46GxWSKY1nAfUv2wmVs47FSzCQ4uVc3vBCOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHWUoX6%2FhsFfH2W%2BIM%2BU0TN52lN5u1f1H%2F6rHv5p5yN6IEsnxVv9H0YMYbUwdTyiyCWnzH0o6uSPPUVqooLjumayM%2FIDMa%2BpQsRfMFF1FNwkqKSRk%2Bsw4i9IFkST%2FJboPlkmrKLnBcaAO6%2B1mJAZR7dnQLwHLf67UWesmexmrsaQzWaM27mimcn7j7hHfSwb3dIP7GWZEaaXvODput4%2Fwc2pIG%2Fiz3TPJL3w7DZMe%2FargDc9wQmGz%2FyolUH37tU864NUKdj9pG%2BugfkUX8XPN50AwdhVkqO%2BA6k%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS_HOST}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS_HOST}/auth-proxy/service/web-publishing/${LCMS_CLIENT}/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="wirisServiceURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">wirisServiceURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;wirisServiceURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
vars.putObject(&quot;userNameChecker&quot;, false);
if (userName != null) {
	vars.putObject(&quot;userNameChecker&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If userName is not null" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;userNameChecker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}&amp;wirisServiceURL=${wirisServiceURL}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="login_sessionChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">boolean userNameChecker = vars.getObject(&quot;userNameChecker&quot;);
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
boolean loggedIn = false;
if(userNameChecker &amp;&amp; jSessionId != null){
	loggedIn = true;
}
vars.putObject(&quot;loggedIn&quot;, loggedIn);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user is logged in" enabled="true">
          <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;loggedIn&quot;))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Publication" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Deployment ZIP" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_get_DOCUMENT_AUX" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int nDocuments = Integer.parseInt(vars.get(&quot;N_DOCUMENTS&quot;));
vars.put(&quot;DOCUMENT_GUID&quot;, vars.get(&quot;DOCUMENT_GUID_&quot; + (new Random().nextInt(nDocuments) + 1)));</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_get DOCUMENT_LCMS_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.SDocProperties;
import com.xyleme.sdoc.client.FolderInfo;
import com.xyleme.sdoc.client.search.PropertyRangeTerm;
import com.xyleme.sdoc.client.search.SDocQuery;
import com.xyleme.sdoc.client.SDocInfo;
import com.xyleme.sdoc.client.SSConstants;
import com.xyleme.sdoc.client.properties.FragmentProperties;
import java.util.Random;

String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
String workFolder = vars.get(&quot;WORK_FOLDER&quot;);
SDocService client = SDocService.login(url, username, password);
vars.putObject(&quot;client&quot;, client);
PropertyRangeTerm pt = new PropertyRangeTerm(FragmentProperties.FRAGMENT_ROOT_OF_DOCUMENT, true, true);
SDocQuery sQuery = new SDocQuery(pt, null, null);
//SDocInfo sInfo = client.search(new FolderInfo(), sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
FolderInfo fInfo = client.folderget(new FolderInfo(), workFolder);
SDocInfo sInfo = client.search(fInfo, sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
int docsCount = sInfo.getGuids().size();
//log.info(&quot;# documents in / is &quot; + docsCount);
//make 3 attempts to choose the document which is not in ReviewMode
boolean inReview;
vars.put(&quot;inReviewMode&quot;, &quot;false&quot;);
vars.put(&quot;DOCUMENT_GUID&quot;, &quot;null&quot;);
for(int i = 1; i &lt;= 3; i++){
	String guid = sInfo.getGuids().get(new Random().nextInt(docsCount));
	SDocInfo sDocInfo = client.get(guid, null, SSConstants.GET_PROPS, SSConstants.FULL_RESOLVE);
	SDocProperties docProperties = sDocInfo.getProperties(guid);
	inReview = docProperties.getBooleanProperty(FragmentProperties.PROP_IN_REVIEW_3_6) ? true : false;
	vars.put(&quot;DOCUMENT_GUID&quot;, guid);
	if(!inReview) {
		break;
	}
}
if(inReview){
	vars.put(&quot;inReviewMode&quot;, &quot;true&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_OPTIONS_config_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;OPTION_1&quot;, &quot;backupXml&quot;);
vars.put(&quot;OPTION_2&quot;, &quot;siblingMedia&quot;);
vars.put(&quot;OPTION_3&quot;, &quot;mediaFolders&quot;);
vars.put(&quot;N_OPTIONS&quot;, &quot;3&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="StartPublication" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;DOCUMENT_GUID&quot;))}&quot; != &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_document" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setFalse_PubWiz_output_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;PubWiz_output&quot;, &quot;false&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_outputprofiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments/${DOCUMENT_GUID}/outputprofiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random output" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray outputs = JsonArray.readFrom(jsonString);
Random rnd = new Random();
if(outputs.size() &gt; 0){
	JsonObject output = outputs.get(rnd.nextInt(outputs.size())).asObject();
	vars.put(&quot;output&quot;, &quot;&quot; + output);
} else {
	vars.put(&quot;output&quot;, &quot;&quot;);
}
vars.put(&quot;PubWiz_output&quot;, &quot;true&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_outputprofiles" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}/outputprofiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">411</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random output" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray outputs = JsonArray.readFrom(jsonString);
Random rnd = new Random();
if(outputs.size() &gt; 0){
	JsonObject output = outputs.get(rnd.nextInt(outputs.size())).asObject();
	vars.put(&quot;output&quot;, &quot;&quot; + output);
} else {
	vars.put(&quot;output&quot;, &quot;&quot;);
}
vars.put(&quot;PubWiz_output&quot;, &quot;true&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_outputprofilesCheckerTrue" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_output&quot;))}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_cdsavailable" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;outputs&quot;:[${output}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/cdsavailable</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_defineOptions_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">import java.util.Random;
int nOptions = Integer.parseInt(vars.get(&quot;N_OPTIONS&quot;));
ArrayList availableSet = new ArrayList();
ArrayList options = new ArrayList();
for(int i = 1; i &lt;= nOptions; i++){
	availableSet.add(vars.get(&quot;OPTION_&quot; + i));
}
String optionsStr = &quot;[&quot;;
nOptions = new Random().nextInt(nOptions + 1);
if(nOptions &gt; 0){
	for(int i = 1; i &lt;= nOptions; i++){
		int r = new Random().nextInt(availableSet.size());
		options.add(availableSet.get(r));
		availableSet.remove(r);
		optionsStr = optionsStr + &quot;\&quot;&quot; + options.get(i - 1) + &quot;\&quot;,&quot;;
//	     log.info(&quot;ADDED #&quot; + i+ &quot;: &quot; + options.get(i - 1));
	}
	optionsStr = optionsStr.substring(0, optionsStr.length() - 1) + &quot;]&quot;;
} else {
	optionsStr = optionsStr + &quot;]&quot;;
}
//log.info(&quot;OPTIONS: &quot; + optionsStr);
vars.put(&quot;options&quot;, optionsStr);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&apos;${output}&apos; != &quot;&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_startDeployment_SPS" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;guid&quot;:&quot;${DOCUMENT_GUID}&quot;,&quot;outputs&quot;:[${output}],&quot;options&quot;:${options},&quot;type&quot;:&quot;zip&quot;,&quot;folder&quot;:0}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PubWiz_setMineParameter_AUX" enabled="true">
                      <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] PubWiz1_values = (int[])vars.getObject(&quot;PubWiz1_RANDOM_VALUES&quot;);
if(PubWiz1_values==null) {
	PubWiz1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;PubWiz1_RANDOM_VALUES&quot;,PubWiz1_values);
	vars.put(&quot;PubWiz1_N_GROUPS&quot;, &quot;&quot; + PubWiz1_values.length);
}
Integer PubWiz1_increment = (Integer)vars.getObject(&quot;PubWiz1_INCREMENT&quot;);
if(PubWiz1_increment==null) {
	PubWiz1_increment = Integer.valueOf(0);
} else {
	int PubWiz1_nGroups = Integer.parseInt(vars.get(&quot;PubWiz1_N_GROUPS&quot;));
	PubWiz1_increment = Integer.valueOf((PubWiz1_increment.intValue()+1) % PubWiz1_nGroups);
}
vars.put(&quot;PubWiz1_SWITCH_VALUE&quot;, new Integer(PubWiz1_values[PubWiz1_increment.intValue()]).toString());
vars.putObject(&quot;PubWiz1_INCREMENT&quot;, PubWiz1_increment);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                      <stringProp name="SwitchController.value">${PubWiz1_SWITCH_VALUE}</stringProp>
                    </SwitchController>
                    <hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setMineTrue_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setMineFalse_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PubWiz_setRecentParameter_AUX" enabled="true">
                      <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] PubWiz2_values = (int[])vars.getObject(&quot;PubWiz2_RANDOM_VALUES&quot;);
if(PubWiz2_values==null) {
	PubWiz2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;PubWiz2_RANDOM_VALUES&quot;,PubWiz2_values);
	vars.put(&quot;PubWiz2_N_GROUPS&quot;, &quot;&quot; + PubWiz2_values.length);
}
Integer PubWiz2_increment = (Integer)vars.getObject(&quot;PubWiz2_INCREMENT&quot;);
if(PubWiz2_increment==null) {
	PubWiz2_increment = Integer.valueOf(0);
} else {
	int PubWiz2_nGroups = Integer.parseInt(vars.get(&quot;PubWiz2_N_GROUPS&quot;));
	PubWiz2_increment = Integer.valueOf((PubWiz2_increment.intValue()+1) % PubWiz2_nGroups);
}
vars.put(&quot;PubWiz2_SWITCH_VALUE&quot;, new Integer(PubWiz2_values[PubWiz2_increment.intValue()]).toString());
vars.putObject(&quot;PubWiz2_INCREMENT&quot;, PubWiz2_increment);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                      <stringProp name="SwitchController.value">${PubWiz2_SWITCH_VALUE}</stringProp>
                    </SwitchController>
                    <hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setRecentTrue_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;recent&quot;, &quot;true&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setRecentFalse_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;recent&quot;, &quot;false&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_getList_MINE_${mine}_RECENT_${recent}_SPS" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments?mine=${mine}&amp;recent=${recent}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_outputprofilesCheckerFalse" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_output&quot;))}&quot; == &quot;false&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_outputprofilesChecker" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Deployment CDS" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_OPTIONS_config_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;OPTION_1&quot;, &quot;siblingMedia&quot;);
vars.put(&quot;OPTION_2&quot;, &quot;mediaFolders&quot;);
vars.put(&quot;N_OPTIONS&quot;, &quot;2&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_get_DOCUMENT_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">//import java.util.Random;
//int nDocuments = Integer.parseInt(vars.get(&quot;N_DOCUMENTS&quot;));
//vars.put(&quot;DOCUMENT_GUID&quot;, vars.get(&quot;DOCUMENT_GUID_&quot; + (new Random().nextInt(nDocuments) + 1)));
vars.put(&quot;DOCUMENT_GUID&quot;, &quot;${DOCUMENT_TO_EXPORT_GUID}&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="StartPublication" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;DOCUMENT_GUID&quot;))}&quot; != &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_document" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setFalse_PubWiz_output_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;PubWiz_output&quot;, &quot;false&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_outputprofiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments/${DOCUMENT_GUID}/outputprofiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random output" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray outputs = JsonArray.readFrom(jsonString);
Random rnd = new Random();
if(outputs.size() &gt; 0){
	JsonObject output = outputs.get(rnd.nextInt(outputs.size())).asObject();
	vars.put(&quot;output&quot;, &quot;&quot; + output);
} else {
	vars.put(&quot;output&quot;, &quot;&quot;);
}
vars.put(&quot;PubWiz_output&quot;, &quot;true&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PubWiz_getPredefinedOutputProfile_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">/*
 * 0 - xpe
 * 1 - msis
 */
int[] PubWiz_getPredefinedOutputProfile_values = (int[])vars.getObject(&quot;PubWiz_getPredefinedOutputProfile_RANDOM_VALUES&quot;);
if(PubWiz_getPredefinedOutputProfile_values==null) {
	PubWiz_getPredefinedOutputProfile_values = new int[]{0,1,0,1,0,1,0,1,0,1};
	vars.putObject(&quot;PubWiz_getPredefinedOutputProfile_RANDOM_VALUES&quot;,PubWiz_getPredefinedOutputProfile_values);
	vars.put(&quot;PubWiz_getPredefinedOutputProfile_N_GROUPS&quot;, &quot;&quot; + PubWiz_getPredefinedOutputProfile_values.length);
}
Integer PubWiz_getPredefinedOutputProfile_increment = (Integer)vars.getObject(&quot;PubWiz_getPredefinedOutputProfile_INCREMENT&quot;);
if(PubWiz_getPredefinedOutputProfile_increment==null) {
	PubWiz_getPredefinedOutputProfile_increment = Integer.valueOf(0);
} else {
	int PubWiz_getPredefinedOutputProfile_nGroups = Integer.parseInt(vars.get(&quot;PubWiz_getPredefinedOutputProfile_N_GROUPS&quot;));
	PubWiz_getPredefinedOutputProfile_increment = Integer.valueOf((PubWiz_getPredefinedOutputProfile_increment.intValue()+1) % PubWiz_getPredefinedOutputProfile_nGroups);
}
vars.put(&quot;PubWiz_getPredefinedOutputProfile_SWITCH_VALUE&quot;, new Integer(PubWiz_getPredefinedOutputProfile_values[PubWiz_getPredefinedOutputProfile_increment.intValue()]).toString());
vars.putObject(&quot;PubWiz_getPredefinedOutputProfile_INCREMENT&quot;, PubWiz_getPredefinedOutputProfile_increment);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                  <stringProp name="SwitchController.value">${PubWiz_getPredefinedOutputProfile_SWITCH_VALUE}</stringProp>
                </SwitchController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_set_XPE_Output_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;output&quot;, &quot;{\&quot;guid\&quot;:\&quot;7cc4794b-5c20-4d61-bcd5-a98f11db4096\&quot;,\&quot;mmlProfile\&quot;:true,\&quot;name\&quot;:\&quot;Dynamic SCORM\&quot;,\&quot;profileType\&quot;:\&quot;xpe\&quot;}&quot;);
vars.put(&quot;publishToCdsOutput&quot;, &quot;XpeOutput&quot;);
vars.put(&quot;PubWiz_output&quot;, &quot;true&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_set_MSIS_Output_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;output&quot;, &quot;{\&quot;guid\&quot;:\&quot;240a88c7-a0d4-406e-8438-07597185a1e6\&quot;,\&quot;mmlProfile\&quot;:true,\&quot;name\&quot;:\&quot;Student Guide\&quot;,\&quot;profileType\&quot;:\&quot;msis\&quot;}&quot;);
vars.put(&quot;publishToCdsOutput&quot;, &quot;MsisOutput&quot;);
vars.put(&quot;PubWiz_output&quot;, &quot;true&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_outputprofilesCheckerTrue" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_output&quot;))}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setFalse_PubWiz_cdsavailable_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;PubWiz_cdsavailable&quot;, &quot;false&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_cdsavailable" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;outputs&quot;:[${output}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/cdsavailable</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="extract available" enabled="true">
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
JsonObject cdsAvailableJson = JsonObject.readFrom(jsonString);
boolean cdsAvailable = cdsAvailableJson.asObject().get(&quot;available&quot;).asBoolean();
if(cdsAvailable){
	vars.put(&quot;PubWiz_cdsavailable&quot;, &quot;true&quot;);
}</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_cdsavailableCheckerTrue" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_cdsavailable&quot;))}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_defineOptions_AUX" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import java.util.Random;
int nOptions = Integer.parseInt(vars.get(&quot;N_OPTIONS&quot;));
ArrayList availableSet = new ArrayList();
ArrayList options = new ArrayList();
for(int i = 1; i &lt;= nOptions; i++){
	availableSet.add(vars.get(&quot;OPTION_&quot; + i));
}
String optionsStr = &quot;[&quot;;
nOptions = new Random().nextInt(nOptions + 1);
if(nOptions &gt; 0){
	for(int i = 1; i &lt;= nOptions; i++){
		int r = new Random().nextInt(availableSet.size());
		options.add(availableSet.get(r));
		availableSet.remove(r);
		optionsStr = optionsStr + &quot;\&quot;&quot; + options.get(i - 1) + &quot;\&quot;,&quot;;
//	     log.info(&quot;ADDED #&quot; + i+ &quot;: &quot; + options.get(i - 1));
	}
	optionsStr = optionsStr.substring(0, optionsStr.length() - 1) + &quot;]&quot;;
} else {
	optionsStr = optionsStr + &quot;]&quot;;
}
//log.info(&quot;OPTIONS: &quot; + optionsStr);
vars.put(&quot;options&quot;, optionsStr);</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_cdsfolders" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/cdsfolders</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="get root id" enabled="false">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject cdsFolders = JsonObject.readFrom(jsonString);
String rootId = &quot;&quot; + cdsFolders.asObject().get(&quot;id&quot;).asInt();
if(!rootId.equals(&quot;&quot;)){
	vars.put(&quot;ROOT_ID&quot;, rootId);
} else {
	vars.put(&quot;ROOT_ID&quot;, &quot;null&quot;);
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Publish to CDS" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_cdsdocuments" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;guid&quot;:&quot;${DOCUMENT_GUID}&quot;,&quot;outputs&quot;:[${output}],&quot;options&quot;:${options},&quot;type&quot;:&quot;cds&quot;,&quot;folder&quot;:${CDS_FOLDER_TO_PUBLISH_ID}}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/cdsdocuments</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_publishToCDS_${publishToCdsOutput}_SPS" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;guid&quot;:&quot;${DOCUMENT_GUID}&quot;,&quot;outputs&quot;:[${output}],&quot;options&quot;:${options},&quot;type&quot;:&quot;cds&quot;,&quot;folder&quot;:${CDS_FOLDER_TO_PUBLISH_ID}}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PubWiz_setMineParameter_AUX" enabled="true">
                        <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] PubWizCDS1_values = (int[])vars.getObject(&quot;PubWizCDS1_RANDOM_VALUES&quot;);
if(PubWizCDS1_values==null) {
	PubWizCDS1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;PubWizCDS1_RANDOM_VALUES&quot;,PubWizCDS1_values);
	vars.put(&quot;PubWizCDS1_N_GROUPS&quot;, &quot;&quot; + PubWizCDS1_values.length);
}
Integer PubWizCDS1_increment = (Integer)vars.getObject(&quot;PubWizCDS1_INCREMENT&quot;);
if(PubWizCDS1_increment==null) {
	PubWizCDS1_increment = Integer.valueOf(0);
} else {
	int PubWizCDS1_nGroups = Integer.parseInt(vars.get(&quot;PubWizCDS1_N_GROUPS&quot;));
	PubWizCDS1_increment = Integer.valueOf((PubWizCDS1_increment.intValue()+1) % PubWizCDS1_nGroups);
}
vars.put(&quot;PubWizCDS1_SWITCH_VALUE&quot;, new Integer(PubWizCDS1_values[PubWizCDS1_increment.intValue()]).toString());
vars.putObject(&quot;PubWizCDS1_INCREMENT&quot;, PubWizCDS1_increment);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                        <stringProp name="SwitchController.value">${PubWizCDS1_SWITCH_VALUE}</stringProp>
                      </SwitchController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setMineTrue_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setMineFalse_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                      </hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PubWiz_setRecentParameter_AUX" enabled="true">
                        <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] PubWizCDS2_values = (int[])vars.getObject(&quot;PubWizCDS2_RANDOM_VALUES&quot;);
if(PubWizCDS2_values==null) {
	PubWizCDS2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;PubWizCDS2_RANDOM_VALUES&quot;,PubWizCDS2_values);
	vars.put(&quot;PubWizCDS2_N_GROUPS&quot;, &quot;&quot; + PubWizCDS2_values.length);
}
Integer PubWizCDS2_increment = (Integer)vars.getObject(&quot;PubWizCDS2_INCREMENT&quot;);
if(PubWizCDS2_increment==null) {
	PubWizCDS2_increment = Integer.valueOf(0);
} else {
	int PubWizCDS2_nGroups = Integer.parseInt(vars.get(&quot;PubWizCDS2_N_GROUPS&quot;));
	PubWizCDS2_increment = Integer.valueOf((PubWizCDS2_increment.intValue()+1) % PubWizCDS2_nGroups);
}
vars.put(&quot;PubWizCDS2_SWITCH_VALUE&quot;, new Integer(PubWizCDS2_values[PubWizCDS2_increment.intValue()]).toString());
vars.putObject(&quot;PubWizCDS2_INCREMENT&quot;, PubWizCDS2_increment);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                        <stringProp name="SwitchController.value">${PubWizCDS2_SWITCH_VALUE}</stringProp>
                      </SwitchController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setRecentTrue_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">vars.put(&quot;recent&quot;, &quot;true&quot;);</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setRecentFalse_AUX" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">vars.put(&quot;recent&quot;, &quot;false&quot;);</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_getList_MINE_${mine}_RECENT_${recent}_SPS" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments?mine=${mine}&amp;recent=${recent}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_cdsavailableCheckerFalse" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_cdsavailable&quot;))}&quot; == &quot;false&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_cdsavailableChecker" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_outputprofilesCheckerFalse" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_output&quot;))}&quot; == &quot;false&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_outputprofilesChecker" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Download Deployment" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDeployments" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="get random deployment" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
import java.util.Random;

String username = vars.get(&quot;USERNAME&quot;);
String jsonString = prev.getResponseDataAsString();
JsonArray deployments = JsonArray.readFrom(jsonString);
ArrayList deploymentGuids = new ArrayList();
for(int i = 0; i &lt;= deployments.size() - 1; i++){
	String name = deployments.get(i).asObject().get(&quot;createdBy&quot;).asObject().get(&quot;name&quot;).asString();
	String status = deployments.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;success&quot;) &amp;&amp; name.equals(username)){
		String deploymentGuid = deployments.get(i).asObject().get(&quot;guid&quot;).asString();
		deploymentGuids.add(deploymentGuid);
	}
}
if(deploymentGuids.size() &gt; 0){
	Random rnd = new Random();
	vars.put(&quot;DEPLOYMENT_GUID&quot;, deploymentGuids.get(rnd.nextInt(deploymentGuids.size())));
} else {
	vars.put(&quot;DEPLOYMENT_GUID&quot;, &quot;null&quot;);
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
                <stringProp name="IfController.condition">&quot;${DEPLOYMENT_GUID}&quot; != &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="downloadDeployment" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments/${DEPLOYMENT_GUID}/download</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cancel Publication" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PubWiz_setCancel_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - false
 * 1 - true
 */
int[] PubWiz_Cancel_values = (int[])vars.getObject(&quot;PubWiz_Cancel_RANDOM_VALUES&quot;);
if(PubWiz_Cancel_values==null) {
	PubWiz_Cancel_values = new int[]{0,0,0,0,1,0,0,0,0,1};
	vars.putObject(&quot;PubWiz_Cancel_RANDOM_VALUES&quot;,PubWiz_Cancel_values);
	vars.put(&quot;PubWiz_Cancel_N_GROUPS&quot;, &quot;&quot; + PubWiz_Cancel_values.length);
}
Integer PubWiz_Cancel_increment = (Integer)vars.getObject(&quot;PubWiz_Cancel_INCREMENT&quot;);
if(PubWiz_Cancel_increment==null) {
	PubWiz_Cancel_increment = Integer.valueOf(0);
} else {
	int PubWiz_Cancel_nGroups = Integer.parseInt(vars.get(&quot;PubWiz_Cancel_N_GROUPS&quot;));
	PubWiz_Cancel_increment = Integer.valueOf((PubWiz_Cancel_increment.intValue()+1) % PubWiz_Cancel_nGroups);
}
vars.put(&quot;PubWiz_Cancel_SWITCH_VALUE&quot;, new Integer(PubWiz_Cancel_values[PubWiz_Cancel_increment.intValue()]).toString());
vars.putObject(&quot;PubWiz_Cancel_INCREMENT&quot;, PubWiz_Cancel_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Cancel" enabled="true">
              <stringProp name="IfController.condition">&quot;${PubWiz_Cancel_SWITCH_VALUE}&quot; == &quot;1&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_setFalse_PubWiz_PublicationInProgress_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;PubWiz_PublicationInProgress&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_getList_MINE_false_RECENT_false_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments?mine=false&amp;recent=false</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get publication in progress" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray publications = JsonArray.readFrom(jsonString);
ArrayList publicationsGuids = new ArrayList();
for(int i = 0; i &lt;= publications.size() - 1; i++){
//	String documentGuid = reviews.get(i).asObject().get(&quot;documentGuid&quot;).asString();
	String status = publications.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;in_progress&quot;)){
		String guid = publications.get(i).asObject().get(&quot;guid&quot;).asString();
		publicationsGuids.add(guid);
	}
}
if(publicationsGuids.size() &gt; 0){
	vars.put(&quot;publicationId&quot;, publicationsGuids.get(new Random().nextInt(publicationsGuids.size())));
} else {
	vars.put(&quot;publicationId&quot;, &quot;null&quot;);
}
if(!vars.get(&quot;publicationId&quot;).equals(&quot;null&quot;)){
	vars.put(&quot;PubWiz_PublicationInProgress&quot;, &quot;true&quot;);
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_publicationInProgressCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_PublicationInProgress&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PubWiz_publicationInProgressChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PubWiz_publicationInProgressCheckerTrue" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;PubWiz_PublicationInProgress&quot;))}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PubWiz_cancelPublication_SPS" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments/${publicationId}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="false">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Publication Checker" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPublicationsList_getList_MAIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/deployments</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract createdAt" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">createdAtStatus</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;createdAt&quot;:&quot;(.+?)&quot;,.+?,&quot;status&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$||$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="check publications" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.io.File;
import java.io.FileWriter;
int createdAtStatus_matchNr = Integer.parseInt(vars.get(&quot;createdAtStatus_matchNr&quot;));
String[] pair;
int successN = 0;
int errorN = 0;
int in_progressN = 0;
Date createdAtAfterThresholdDate;
Date createdAtBeforeThresholdDate;
SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
if(createdAtStatus_matchNr &gt; 0){
try {
	createdAtAfterThresholdDate = formatter.parse(vars.get(&quot;CREATED_AFTER_THRESHOLD&quot;));
	String createdAtBeforeThresholdStr = vars.get(&quot;CREATED_BEFORE_THRESHOLD&quot;);
	// if upper boundary is not defined it&apos;s being defined as current time
	if(createdAtBeforeThresholdStr.equals(&quot;&quot;)){
		DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
		Date date = new Date();
		createdAtBeforeThresholdStr = dateFormat.format(date);
	}
	createdAtBeforeThresholdDate = formatter.parse(createdAtBeforeThresholdStr);
	log.info(&quot;UPPER: &quot; + createdAtBeforeThresholdDate);
} catch (ParseException e) {
	log.info(&quot;Can&apos;t parse the template into Date object&quot;);
}
for(int i = 1; i &lt;= createdAtStatus_matchNr; i++){
	pair = vars.get(&quot;createdAtStatus_&quot; + i).split(&quot;\\|\\|&quot;);
	try {
		Date date = formatter.parse(pair[0]);
		if (date.after(createdAtAfterThresholdDate) &amp;&amp; date.before(createdAtBeforeThresholdDate)) {
			switch (pair[1]) {
				case &apos;success&apos;: successN++;
				break;
				case &apos;error&apos;: errorN++;
				break;
				case &apos;generating&apos;: in_progressN++;
				break;
			}
		}
	} catch (ParseException e) {
		log.info(&quot;Can&apos;t parse the string into Date object&quot;);
	}
}
}
log.info(&quot;SUCCESS: &quot; + successN);
log.info(&quot;ERROR: &quot; + errorN);
log.info(&quot;IN_PROGRESS: &quot; + in_progressN);
File outputFile = new File(vars.get(&quot;OUTPUT_FOLDER&quot;) + &quot;importStatistic.txt&quot;);
if (outputFile.exists()) {
	outputFile.delete();
}
FileWriter writer = new FileWriter(outputFile);
writer.write(&quot;time range: [&quot; + createdAtAfterThresholdDate +
	&quot; - &quot; + createdAtBeforeThresholdDate + &quot;]\n&quot; +
	&quot;total: &quot; + (successN + errorN + in_progressN) + &quot;\n&quot; +
	&quot;success: &quot; + successN + &quot;\n&quot; +
	&quot;error: &quot; + errorN + &quot;\n&quot; +
	&quot;in_progress: &quot; + in_progressN + &quot;\n&quot;
	);
writer.close();</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Review Wizard" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_DOCUMENTS_config_AUX" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;DOCUMENT_GUID_1&quot;, &quot;9abafaed-f857-4fe2-a5ba-530c27bea6a6&quot;);
vars.put(&quot;DOCUMENT_GUID_2&quot;, &quot;a880d426-adf3-4dab-9e45-9f1dec996097&quot;);
vars.put(&quot;DOCUMENT_GUID_3&quot;, &quot;9d31fc14-1414-4afc-8e3b-3cd65cf4a4ed&quot;);
vars.put(&quot;DOCUMENT_GUID_4&quot;, &quot;90917f38-a007-40b9-be64-a981d53be8e4&quot;);
vars.put(&quot;DOCUMENT_GUID_5&quot;, &quot;3bacd2fb-8dfa-4661-9473-4125bcbe5f72&quot;);
vars.put(&quot;DOCUMENT_GUID_6&quot;, &quot;aa5d96d0-0318-4bf0-a46a-0e1e5a1744fd&quot;);
vars.put(&quot;DOCUMENT_GUID_7&quot;, &quot;c19f0392-0676-4885-b160-1ef17c4811d3&quot;);
vars.put(&quot;DOCUMENT_GUID_8&quot;, &quot;e5970214-8cce-4ab0-9fe1-ea4ec561ff1c&quot;);
vars.put(&quot;DOCUMENT_GUID_9&quot;, &quot;5b7185a3-d921-4605-a79b-0331067cb9b1&quot;);
vars.put(&quot;DOCUMENT_GUID_10&quot;, &quot;d11b5cef-b4c9-4356-b4c7-f65e632c2651&quot;);
vars.put(&quot;DOCUMENT_GUID_11&quot;, &quot;41f91074-63d8-45c8-8778-1035607418a2&quot;);
vars.put(&quot;DOCUMENT_GUID_12&quot;, &quot;4c3042e2-1af5-419a-8a30-10aa0ae6ad3d&quot;);
vars.put(&quot;DOCUMENT_GUID_13&quot;, &quot;5387752f-23d3-43c0-a019-0b824f602b0f&quot;);
vars.put(&quot;DOCUMENT_GUID_14&quot;, &quot;f9719afb-553e-402b-92da-c328962a662e&quot;);
vars.put(&quot;DOCUMENT_GUID_15&quot;, &quot;66a0a283-6546-43d1-bb8d-b5cd010794d1&quot;);
vars.put(&quot;DOCUMENT_GUID_16&quot;, &quot;a784371e-c622-4a6c-978a-a29fa4e38b0f&quot;);
vars.put(&quot;DOCUMENT_GUID_17&quot;, &quot;bf01cdb3-2757-47aa-9971-b18c1ae49553&quot;);
vars.put(&quot;DOCUMENT_GUID_18&quot;, &quot;a2f83e88-90cf-4f36-a346-0fb88b042c56&quot;);
vars.put(&quot;DOCUMENT_GUID_19&quot;, &quot;8b1a5d71-09bf-45a9-8c3f-556a8da88f29&quot;);
vars.put(&quot;DOCUMENT_GUID_20&quot;, &quot;fadad688-0d92-4ba3-8e77-4dedd869f94f&quot;);
vars.put(&quot;DOCUMENT_GUID_21&quot;, &quot;6716de34-e0a8-4764-8b4c-1336d21b01eb&quot;);
vars.put(&quot;DOCUMENT_GUID_22&quot;, &quot;67ededfb-0f16-4226-b7d5-acc4fc00760b&quot;);
vars.put(&quot;DOCUMENT_GUID_23&quot;, &quot;f129262f-ffe4-4a7a-835c-1ff39c689fcb&quot;);
vars.put(&quot;DOCUMENT_GUID_24&quot;, &quot;317d8f41-60a6-4eb9-9599-8da86cda59b1&quot;);
vars.put(&quot;DOCUMENT_GUID_25&quot;, &quot;312ac0db-0ee2-469a-b1a8-558c79634911&quot;);
vars.put(&quot;DOCUMENT_GUID_26&quot;, &quot;dc90683a-7bab-4de6-96a1-b7756ce2ae6d&quot;);
vars.put(&quot;DOCUMENT_GUID_27&quot;, &quot;6444e76d-66a5-430d-84b3-3835eb8b6d06&quot;);
vars.put(&quot;DOCUMENT_GUID_28&quot;, &quot;8e999c54-bc57-4456-b41a-dd09f2285845&quot;);
vars.put(&quot;DOCUMENT_GUID_29&quot;, &quot;fc977fea-ae95-421f-97a3-da48623a235c&quot;);
vars.put(&quot;DOCUMENT_GUID_30&quot;, &quot;c7a9b0c1-a171-43f3-8013-049a5ec1c78a&quot;);
vars.put(&quot;DOCUMENT_GUID_31&quot;, &quot;047686ce-12a5-494b-9f73-f6261337e2fe&quot;);
vars.put(&quot;DOCUMENT_GUID_32&quot;, &quot;c1c3f507-b190-40a7-ae02-fcb4629da7ee&quot;);
vars.put(&quot;DOCUMENT_GUID_33&quot;, &quot;41f0db74-94a6-43fb-a6bb-bb2b2547f4ba&quot;);
vars.put(&quot;DOCUMENT_GUID_34&quot;, &quot;127add46-ce5b-4276-980e-284cf5d98724&quot;);
vars.put(&quot;DOCUMENT_GUID_35&quot;, &quot;90e7b1f4-475e-4d5a-a8a0-acec0a73c946&quot;);
vars.put(&quot;DOCUMENT_GUID_36&quot;, &quot;ac6c95c3-5246-4993-ae27-47a378d55bf6&quot;);
vars.put(&quot;DOCUMENT_GUID_37&quot;, &quot;d1f03b0f-83e9-4dcc-b8d9-129769da9991&quot;);
vars.put(&quot;DOCUMENT_GUID_38&quot;, &quot;509aca0e-fe53-4c7e-979e-c0da42c31bf9&quot;);
vars.put(&quot;DOCUMENT_GUID_39&quot;, &quot;98dc9210-05e4-4dd2-9262-d4b9e259cf29&quot;);
vars.put(&quot;DOCUMENT_GUID_40&quot;, &quot;cb09d918-b640-4b69-8d35-3d3415349f73&quot;);
vars.put(&quot;DOCUMENT_GUID_41&quot;, &quot;e413cdfe-ae22-4929-81c3-b8db8f1f376d&quot;);
vars.put(&quot;DOCUMENT_GUID_42&quot;, &quot;f7c48d03-1d9e-4192-b971-34dbe991ebfb&quot;);
vars.put(&quot;DOCUMENT_GUID_43&quot;, &quot;1622039c-d486-4140-a9ff-e5debf11ab7f&quot;);
vars.put(&quot;DOCUMENT_GUID_44&quot;, &quot;b28b098a-a763-4d9c-bd20-3a2a45eef887&quot;);
vars.put(&quot;DOCUMENT_GUID_45&quot;, &quot;42749452-2cc7-419a-9c5c-23c1316063ae&quot;);
vars.put(&quot;DOCUMENT_GUID_46&quot;, &quot;640f7eeb-2900-4b6e-bbb9-ac7a41809e98&quot;);
vars.put(&quot;DOCUMENT_GUID_47&quot;, &quot;4c0cf8bc-574a-4fb3-9c43-938f41929fe2&quot;);
vars.put(&quot;DOCUMENT_GUID_48&quot;, &quot;30f3daee-bbee-4d6d-b5e0-751571c6d49c&quot;);
vars.put(&quot;DOCUMENT_GUID_49&quot;, &quot;2788a3ff-f6c7-4f0a-94e8-c6a297834825&quot;);
vars.put(&quot;DOCUMENT_GUID_50&quot;, &quot;3b2451f6-1545-4a22-8a5c-f696289b2a0b&quot;);
vars.put(&quot;DOCUMENT_GUID_51&quot;, &quot;0126ef50-21a9-499c-bbd6-b6ff01435ebe&quot;);
vars.put(&quot;DOCUMENT_GUID_52&quot;, &quot;a42ec6ed-851f-4664-b966-0dbf26f4a3f7&quot;);
vars.put(&quot;DOCUMENT_GUID_53&quot;, &quot;f1dfccb4-e2ce-4699-a25d-810a9ce7faca&quot;);
vars.put(&quot;DOCUMENT_GUID_54&quot;, &quot;7de610d5-c44d-4161-8aaf-5ca28c3e81c7&quot;);
vars.put(&quot;DOCUMENT_GUID_55&quot;, &quot;5c9ee3d9-f501-4f32-9bdd-a8570352a048&quot;);
vars.put(&quot;DOCUMENT_GUID_56&quot;, &quot;ce10b8a2-878d-4100-8b12-4e8f44000c77&quot;);
vars.put(&quot;DOCUMENT_GUID_57&quot;, &quot;bdcb3a0f-2ece-4701-8593-660ed380d5ca&quot;);
vars.put(&quot;DOCUMENT_GUID_58&quot;, &quot;a2955ed3-07a4-43c7-a08b-d125c3e78f55&quot;);
vars.put(&quot;DOCUMENT_GUID_59&quot;, &quot;46d22c8d-788e-4a51-8b29-5272b418d655&quot;);
vars.put(&quot;DOCUMENT_GUID_60&quot;, &quot;0bd77edd-0d4f-4be3-b4a6-b0f1e0db78df&quot;);
vars.put(&quot;DOCUMENT_GUID_61&quot;, &quot;f6082920-cc15-4f27-9083-755d157c4a2c&quot;);
vars.put(&quot;DOCUMENT_GUID_62&quot;, &quot;51960dd9-0536-4f07-ad7c-56d1cdee1663&quot;);
vars.put(&quot;DOCUMENT_GUID_63&quot;, &quot;b3f8071e-b7c1-410b-a22d-a1bba5ad5e60&quot;);
vars.put(&quot;DOCUMENT_GUID_64&quot;, &quot;6d205f3c-be82-45e8-a052-ddcf6ef76690&quot;);
vars.put(&quot;DOCUMENT_GUID_65&quot;, &quot;2ab916bb-d187-47d1-b38b-73e1d9fa4be2&quot;);
vars.put(&quot;DOCUMENT_GUID_66&quot;, &quot;a4e6e169-373d-4e4f-8ef1-2e4b479c4095&quot;);
vars.put(&quot;DOCUMENT_GUID_67&quot;, &quot;c139efc9-a987-4727-b646-19cd1dde413d&quot;);
vars.put(&quot;DOCUMENT_GUID_68&quot;, &quot;25aa41df-cfd2-42e9-8573-9d01739120f9&quot;);
vars.put(&quot;DOCUMENT_GUID_69&quot;, &quot;47755250-c68f-4f13-86d0-3f0969d3288d&quot;);
vars.put(&quot;DOCUMENT_GUID_70&quot;, &quot;03d3831a-e9ef-49e8-85e4-07c405298ed3&quot;);
vars.put(&quot;DOCUMENT_GUID_71&quot;, &quot;d4a30156-76e1-406c-b024-9a4f9ca39d77&quot;);
vars.put(&quot;DOCUMENT_GUID_72&quot;, &quot;1ba8a168-1f9c-46d7-b817-2f4f6a89bdb2&quot;);
vars.put(&quot;DOCUMENT_GUID_73&quot;, &quot;928594cc-5087-4ae3-a3c4-32f12a613ca9&quot;);
vars.put(&quot;DOCUMENT_GUID_74&quot;, &quot;fdd7d38b-835c-4f66-bba3-eeb6f76e6fbc&quot;);
vars.put(&quot;DOCUMENT_GUID_75&quot;, &quot;4b61667e-c0e3-4ad3-b52d-5704c40acf31&quot;);
vars.put(&quot;DOCUMENT_GUID_76&quot;, &quot;26d8f7fd-b888-4dd8-b391-101f2aac37bb&quot;);
vars.put(&quot;DOCUMENT_GUID_77&quot;, &quot;ce1058b0-2f16-4038-8334-bcedbabc7e46&quot;);
vars.put(&quot;DOCUMENT_GUID_78&quot;, &quot;039aaad6-5f87-4d6b-af39-0e1c013dcbc8&quot;);
vars.put(&quot;DOCUMENT_GUID_79&quot;, &quot;69062106-2b82-4afa-b12a-4c4d486cb04b&quot;);
vars.put(&quot;DOCUMENT_GUID_80&quot;, &quot;cd3fa89d-28aa-45c7-a6b1-be9a3a62e76e&quot;);
vars.put(&quot;DOCUMENT_GUID_81&quot;, &quot;86efe49e-25a7-4eaa-b048-818a77b011be&quot;);
vars.put(&quot;DOCUMENT_GUID_82&quot;, &quot;e5b8e6f0-e054-4829-b5c4-9bfe01ccafbc&quot;);
vars.put(&quot;DOCUMENT_GUID_83&quot;, &quot;6d0686d1-0732-4ca4-afb3-0fb782517040&quot;);
vars.put(&quot;DOCUMENT_GUID_84&quot;, &quot;fc66070c-caeb-411d-87cf-50cf884d9c5f&quot;);
vars.put(&quot;DOCUMENT_GUID_85&quot;, &quot;7550e021-054b-4a00-9bf4-b11fe0ef4986&quot;);
vars.put(&quot;DOCUMENT_GUID_86&quot;, &quot;0261bd57-362c-4bec-81c9-1d9c8b97691a&quot;);
vars.put(&quot;DOCUMENT_GUID_87&quot;, &quot;195ac19b-2029-4244-8353-834c323b9c47&quot;);
vars.put(&quot;DOCUMENT_GUID_88&quot;, &quot;87376630-02d3-4843-9d0e-2639c773b866&quot;);
vars.put(&quot;DOCUMENT_GUID_89&quot;, &quot;5e7eee43-d8b6-4dd7-be73-1d6bd1330fb1&quot;);
vars.put(&quot;DOCUMENT_GUID_90&quot;, &quot;9f865f52-a9b3-429f-8784-afd2249aec3b&quot;);
vars.put(&quot;DOCUMENT_GUID_91&quot;, &quot;80356f3d-fb99-43af-8058-34ffc64112d2&quot;);
vars.put(&quot;DOCUMENT_GUID_92&quot;, &quot;01fcbf7a-0aff-4ae2-bb76-96949c681aac&quot;);
vars.put(&quot;DOCUMENT_GUID_93&quot;, &quot;809f8053-a976-48fe-a188-40e228834867&quot;);
vars.put(&quot;DOCUMENT_GUID_94&quot;, &quot;9e309504-6e07-4bf3-9fbd-a750a94f141e&quot;);
vars.put(&quot;DOCUMENT_GUID_95&quot;, &quot;aade6598-e2a4-4a14-8c47-84b14615924c&quot;);
vars.put(&quot;DOCUMENT_GUID_96&quot;, &quot;70c18c71-cab5-4e6c-8341-ed9ec7bda516&quot;);
vars.put(&quot;DOCUMENT_GUID_97&quot;, &quot;0514cded-68ba-4fd6-9484-bd656e8c71ce&quot;);
vars.put(&quot;DOCUMENT_GUID_98&quot;, &quot;98cc2f29-3abf-4941-86d4-eba427239fe0&quot;);
vars.put(&quot;DOCUMENT_GUID_99&quot;, &quot;7e3f952e-00a0-4b92-bdf1-25072e61a93e&quot;);
vars.put(&quot;DOCUMENT_GUID_100&quot;, &quot;61b2d358-2861-4c21-8e94-6992372d31eb&quot;);
vars.put(&quot;N_DOCUMENTS&quot;, &quot;100&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Review" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_get DOCUMENT_LCMS_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.SDocProperties;
import com.xyleme.sdoc.client.FolderInfo;
import com.xyleme.sdoc.client.search.PropertyRangeTerm;
import com.xyleme.sdoc.client.search.SDocQuery;
import com.xyleme.sdoc.client.SDocInfo;
import com.xyleme.sdoc.client.SSConstants;
import com.xyleme.sdoc.client.properties.FragmentProperties;
import java.util.Random;

String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
String workFolder = vars.get(&quot;WORK_FOLDER&quot;);
SDocService client = SDocService.login(url, username, password);
vars.putObject(&quot;client&quot;, client);
PropertyRangeTerm pt = new PropertyRangeTerm(FragmentProperties.FRAGMENT_ROOT_OF_DOCUMENT, true, true);
SDocQuery sQuery = new SDocQuery(pt, null, null);
//SDocInfo sInfo = client.search(new FolderInfo(), sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
FolderInfo fInfo = client.folderget(new FolderInfo(), workFolder);
SDocInfo sInfo = client.search(fInfo, sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
int docsCount = sInfo.getGuids().size();
//log.info(&quot;# documents in / is &quot; + docsCount);
//make 3 attempts to choose the document which is not in ReviewMode
boolean inReview;
vars.put(&quot;inReviewMode&quot;, &quot;false&quot;);
vars.put(&quot;DOCUMENT_GUID&quot;, &quot;null&quot;);
for(int i = 1; i &lt;= 3; i++){
	String guid = sInfo.getGuids().get(new Random().nextInt(docsCount));
	SDocInfo sDocInfo = client.get(guid, null, SSConstants.GET_PROPS, SSConstants.FULL_RESOLVE);
	SDocProperties docProperties = sDocInfo.getProperties(guid);
	inReview = docProperties.getBooleanProperty(FragmentProperties.PROP_IN_REVIEW_3_6) ? true : false;
	vars.put(&quot;DOCUMENT_GUID&quot;, guid);
	if(!inReview) {
		break;
	}
}
if(inReview){
	vars.put(&quot;inReviewMode&quot;, &quot;true&quot;);
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If DOCUMENT_GUID" enabled="true">
              <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;DOCUMENT_GUID&quot;))}&quot; != &quot;null&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_document" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setFalse_RevWiz_output_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;RevWiz_output&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_outputprofiles" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${DOCUMENT_GUID}/outputprofiles</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random output" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray outputs = JsonArray.readFrom(jsonString);
Random rnd = new Random();
if(outputs.size() &gt; 0){
	JsonObject output = outputs.get(rnd.nextInt(outputs.size())).asObject();
	vars.put(&quot;output&quot;, &quot;&quot; + output);
} else {
	vars.put(&quot;output&quot;, &quot;[]&quot;);
}
vars.put(&quot;RevWiz_output&quot;, &quot;true&quot;);</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_outputprofiles" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}/outputprofiles</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">411</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random output" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray outputs = JsonArray.readFrom(jsonString);
Random rnd = new Random();
if(outputs.size() &gt; 0){
	JsonObject output = outputs.get(rnd.nextInt(outputs.size())).asObject();
	vars.put(&quot;output&quot;, &quot;&quot; + output);
} else {
	vars.put(&quot;output&quot;, &quot;[]&quot;);
}
vars.put(&quot;RevWiz_output&quot;, &quot;true&quot;);</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevWiz_outputprofilesCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevWiz_output&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_outputprofilesChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setFalse_RevWiz_reviewers_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;RevWiz_reviewers&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_principals" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/principals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random reviewer" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray allReviewers = JsonArray.readFrom(jsonString);
JsonArray reviewers = new JsonArray();
Random rnd = new Random();
JsonObject reviewer;
String reviewerName;
//choose proper reviewer
boolean properReviewer = false;
int allReviewersPoolSize = allReviewers.size();
while(!properReviewer){
	reviewer = allReviewers.get(rnd.nextInt(allReviewersPoolSize)).asObject();
	reviewerName = reviewer.get(&quot;name&quot;).asString();
	if(reviewerName.startsWith(&quot;perf.user_&quot;)){
		properReviewer = true;
	}
}
boolean isGroup = reviewer.get(&quot;isGroup&quot;).asBoolean();
JsonObject reviewerJson = new JsonObject();
reviewerJson.add(&quot;name&quot;, reviewerName);
reviewerJson.add(&quot;isGroup&quot;, isGroup);
reviewers.add(reviewerJson);
vars.put(&quot;reviewers&quot;, &quot;&quot; + reviewers);
vars.put(&quot;RevWiz_reviewers&quot;, &quot;true&quot;);</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevWiz_principalsCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevWiz_reviewers&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_principalsChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setTrueCondition_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">boolean noOutput = vars.get(&quot;output&quot;).equals(&quot;[]&quot;);
String inReviewMode = vars.get(&quot;inReviewMode&quot;);
if(vars.get(&quot;RevWiz_output&quot;).equals(&quot;true&quot;) &amp;&amp; vars.get(&quot;RevWiz_reviewers&quot;).equals(&quot;true&quot;) &amp;&amp; !noOutput &amp;&amp; inReviewMode.equals(&quot;false&quot;)){
	vars.put(&quot;goReviewSession&quot;, &quot;true&quot;);
} else {
	vars.put(&quot;goReviewSession&quot;, &quot;false&quot;);
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="goReviewSession" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;goReviewSession&quot;))}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_set endDate_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
Calendar c = Calendar.getInstance();
c.setTime(new Date());
c.add(Calendar.DATE, 10);
SimpleDateFormat formatter = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
vars.put(&quot;endDate&quot;, &quot;&quot; + formatter.format(c.getTime()));</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_forceCheckIn_SDocAPI_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
SDocService client = vars.getObject(&quot;client&quot;);
String guid = vars.get(&quot;DOCUMENT_GUID&quot;);
try {
	client.forcecheckin(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (Exception e) {
	ResponseCode = 400;
	IsSuccess = false;
	return false;
}</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_checkOut_SDocAPI_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.exceptions.ServerException;
SDocService client = vars.getObject(&quot;client&quot;);
String guid = vars.get(&quot;DOCUMENT_GUID&quot;);
try {
	client.checkout(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (ServerException e) {
	ResponseCode = 400;
	IsSuccess = false;
     return false;
}</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_startReview_SPS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;documentGuid&quot;:&quot;${DOCUMENT_GUID}&quot;,&quot;name&quot;:&quot;PerfReviewWizard_${__RandomString(15, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;,&quot;createdBy&quot;:&quot;${USERNAME}&quot;,&quot;assignedBy&quot;:&quot;${USERNAME}&quot;,&quot;sendReminders&quot;:true,&quot;instructions&quot;:&quot;&quot;,&quot;reviewers&quot;:${reviewers},&quot;endDate&quot;:&quot;${endDate}&quot;,&quot;outputProfile&quot;:${output}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="reviewModeVerifier" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">inReviewMode</stringProp>
                    <stringProp name="RegexExtractor.regex">Document with guid (.+?) is allready in review mode</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">true</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="reviewModeVerifier" enabled="false">
                  <stringProp name="IfController.condition">&quot;${inReviewMode}&quot; != &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_inReviewModeAlready_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RevWiz_setMineParameter_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] RevWiz1_values = (int[])vars.getObject(&quot;RevWiz1_RANDOM_VALUES&quot;);
if(RevWiz1_values==null) {
	RevWiz1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;RevWiz1_RANDOM_VALUES&quot;,RevWiz1_values);
	vars.put(&quot;RevWiz1_N_GROUPS&quot;, &quot;&quot; + RevWiz1_values.length);
}
Integer RevWiz1_increment = (Integer)vars.getObject(&quot;RevWiz1_INCREMENT&quot;);
if(RevWiz1_increment==null) {
	RevWiz1_increment = Integer.valueOf(0);
} else {
	int RevWiz1_nGroups = Integer.parseInt(vars.get(&quot;RevWiz1_N_GROUPS&quot;));
	RevWiz1_increment = Integer.valueOf((RevWiz1_increment.intValue()+1) % RevWiz1_nGroups);
}
vars.put(&quot;RevWiz1_SWITCH_VALUE&quot;, new Integer(RevWiz1_values[RevWiz1_increment.intValue()]).toString());
vars.putObject(&quot;RevWiz1_INCREMENT&quot;, RevWiz1_increment);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                  <stringProp name="SwitchController.value">${RevWiz1_SWITCH_VALUE}</stringProp>
                </SwitchController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setMineTrue_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setMineFalse_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RevWiz_setStatusParameter_AUX" enabled="true">
                  <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] RevWiz2_values = (int[])vars.getObject(&quot;RevWiz2_RANDOM_VALUES&quot;);
if(RevWiz2_values==null) {
	RevWiz2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;RevWiz2_RANDOM_VALUES&quot;,RevWiz2_values);
	vars.put(&quot;RevWiz2_N_GROUPS&quot;, &quot;&quot; + RevWiz2_values.length);
}
Integer RevWiz2_increment = (Integer)vars.getObject(&quot;RevWiz2_INCREMENT&quot;);
if(RevWiz2_increment==null) {
	RevWiz2_increment = Integer.valueOf(0);
} else {
	int RevWiz2_nGroups = Integer.parseInt(vars.get(&quot;RevWiz2_N_GROUPS&quot;));
	RevWiz2_increment = Integer.valueOf((RevWiz2_increment.intValue()+1) % RevWiz2_nGroups);
}
vars.put(&quot;RevWiz2_SWITCH_VALUE&quot;, new Integer(RevWiz2_values[RevWiz2_increment.intValue()]).toString());
vars.putObject(&quot;RevWiz2_INCREMENT&quot;, RevWiz2_increment);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                  <stringProp name="SwitchController.value">${RevWiz2_SWITCH_VALUE}</stringProp>
                </SwitchController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setStatusTrue_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;status&quot;, &quot;&amp;status=open&quot;);
vars.put(&quot;statusTitle&quot;, &quot;_STATUS_open&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevWiz_setStatusFalse_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;status&quot;, &quot;&quot;);
vars.put(&quot;statusTitle&quot;, &quot;&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevWiz_getList_MINE_${mine}${statusTitle}_SPS" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=${mine}${status}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cancel Review" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RevAct_Cancel_setCancel_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - false
 * 1 - true
 */
int[] RevAct_Cancel_values = (int[])vars.getObject(&quot;RevAct_Cancel_RANDOM_VALUES&quot;);
if(RevAct_Cancel_values==null) {
	RevAct_Cancel_values = new int[]{0,0,0,0,1,0,0,0,0,1};
	vars.putObject(&quot;RevAct_Cancel_RANDOM_VALUES&quot;,RevAct_Cancel_values);
	vars.put(&quot;RevAct_Cancel_N_GROUPS&quot;, &quot;&quot; + RevAct_Cancel_values.length);
}
Integer RevAct_Cancel_increment = (Integer)vars.getObject(&quot;RevAct_Cancel_INCREMENT&quot;);
if(RevAct_Cancel_increment==null) {
	RevAct_Cancel_increment = Integer.valueOf(0);
} else {
	int RevAct_Cancel_nGroups = Integer.parseInt(vars.get(&quot;RevAct_Cancel_N_GROUPS&quot;));
	RevAct_Cancel_increment = Integer.valueOf((RevAct_Cancel_increment.intValue()+1) % RevAct_Cancel_nGroups);
}
vars.put(&quot;RevAct_Cancel_SWITCH_VALUE&quot;, new Integer(RevAct_Cancel_values[RevAct_Cancel_increment.intValue()]).toString());
vars.putObject(&quot;RevAct_Cancel_INCREMENT&quot;, RevAct_Cancel_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Cancel" enabled="true">
              <stringProp name="IfController.condition">&quot;${RevAct_Cancel_SWITCH_VALUE}&quot; == &quot;1&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cancel_setFalse_RevAct_ReviewInProgress_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;RevAct_ReviewInProgress&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cancel_getList_MINE_false_STATUS_generating_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=false&amp;status=generating</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get review in progress" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
import java.util.Random;
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
ArrayList reviewsGuids = new ArrayList();
for(int i = 0; i &lt;= reviews.size() - 1; i++){
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;generating&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		reviewsGuids.add(guid);
	}
}
if(reviewsGuids.size() &gt; 0){
	vars.put(&quot;reviewIdToCancel&quot;, reviewsGuids.get(new Random().nextInt(reviewsGuids.size())));
} else {
	vars.put(&quot;reviewIdToCancel&quot;, &quot;null&quot;);
}
if(!vars.get(&quot;reviewIdToCancel&quot;).equals(&quot;null&quot;)){
	vars.put(&quot;RevAct_ReviewInProgress&quot;, &quot;true&quot;);
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_reviewInProgressCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_ReviewInProgress&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cancel_reviewInProgressChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_reviewInProgressCheckerTrue" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_ReviewInProgress&quot;))}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cancel_cancelReview_SPS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;status&quot;:&quot;canceled&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewIdToCancel}/status</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Import Wizard" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Probabilistic Import Wizard" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ImpWiz_calculateProbability_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - word
 * 1 - ppt
 * 2 - xml
 */
int[] ImpWiz_calculateProbability1_values = (int[])vars.getObject(&quot;ImpWiz_calculateProbability1_RANDOM_VALUES&quot;);
if(ImpWiz_calculateProbability1_values==null) {
	ImpWiz_calculateProbability1_values = new int[]{0,1,2,2,0,1,2,2,0,1,2};
	vars.putObject(&quot;ImpWiz_calculateProbability1_RANDOM_VALUES&quot;,ImpWiz_calculateProbability1_values);
	vars.put(&quot;ImpWiz_calculateProbability1_N_GROUPS&quot;, &quot;&quot; + ImpWiz_calculateProbability1_values.length);
}
Integer ImpWiz_calculateProbability1_increment = (Integer)vars.getObject(&quot;ImpWiz_calculateProbability1_INCREMENT&quot;);
if(ImpWiz_calculateProbability1_increment==null) {
	ImpWiz_calculateProbability1_increment = Integer.valueOf(0);
} else {
	int ImpWiz_calculateProbability1_nGroups = Integer.parseInt(vars.get(&quot;ImpWiz_calculateProbability1_N_GROUPS&quot;));
	ImpWiz_calculateProbability1_increment = Integer.valueOf((ImpWiz_calculateProbability1_increment.intValue()+1) % ImpWiz_calculateProbability1_nGroups);
}
vars.put(&quot;ImpWiz_calculateProbability1_SWITCH_VALUE&quot;, new Integer(ImpWiz_calculateProbability1_values[ImpWiz_calculateProbability1_increment.intValue()]).toString());
vars.putObject(&quot;ImpWiz_calculateProbability1_INCREMENT&quot;, ImpWiz_calculateProbability1_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
              <stringProp name="SwitchController.value">${ImpWiz_calculateProbability1_SWITCH_VALUE}</stringProp>
            </SwitchController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import Word" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_set importType_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;importType&quot;, &quot;Word&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Select File" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importtypes" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract importType" enabled="false">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">importType</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;importType&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_documentfolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documentfolders/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_mediafolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/mediafolders/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_targetelements" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes/${importType}/targetelements</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract key" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">key</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;key&quot;:&quot;(.*?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importprofiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes/${importType}/importprofiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract guid" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">guid</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;guid&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Document Location" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_documentfolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documentfolders/All%20documents</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_mediafolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/mediafolders/All%20documents</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Import" enabled="true"/>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_prepare_parameters_AUX" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import java.util.Random;
String importType = vars.get(&quot;importType&quot;);
String fileExtension = &quot;&quot;;
String filePrefix = &quot;&quot;;
int filesN = 0;
if(importType.equals(&quot;Word&quot;)){
	vars.put(&quot;mime&quot;, &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;);
	fileExtension = &quot;.docx&quot;;
	filePrefix = vars.get(&quot;IMPORT_FILE_PREFIX_WORD&quot;);
	filesN = Integer.parseInt(vars.get(&quot;IMPORT_FILE_WORD_N&quot;));
} else
if(importType.equals(&quot;PowerPoint&quot;)){
	vars.put(&quot;mime&quot;, &quot;application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;);
	fileExtension = &quot;.pptx&quot;;
	filePrefix = vars.get(&quot;IMPORT_FILE_PREFIX_PP&quot;);
	filesN = Integer.parseInt(vars.get(&quot;IMPORT_FILE_PP_N&quot;));
}

String targetElement = vars.get(&quot;key_g1&quot;);
if(targetElement == null) {
	vars.put(&quot;key_g1&quot;, &quot;&quot;);
}

String importProfile = vars.get(&quot;guid_g1&quot;);
if(importProfile == null) {
	vars.put(&quot;guid_g1&quot;, &quot;&quot;);
}
vars.put(&quot;filename&quot;, filePrefix + (new Random().nextInt(filesN) + 1) + fileExtension);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importWord_SPS" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="importType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${importType}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">importType</stringProp>
                        </elementProp>
                        <elementProp name="documentFolder" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${WORK_FOLDER}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">documentFolder</stringProp>
                        </elementProp>
                        <elementProp name="mediaFolder" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">All documents</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">mediaFolder</stringProp>
                        </elementProp>
                        <elementProp name="targetElement" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${key_g1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetElement</stringProp>
                        </elementProp>
                        <elementProp name="importProfile" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${guid_g1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">importProfile</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/imports</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${filename}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${filename}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype">${mime}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import PowerPoint" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_set importType_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;importType&quot;, &quot;PowerPoint&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Select File" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importtypes" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract importType" enabled="false">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">importType</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;importType&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_documentfolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documentfolders/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_mediafolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/mediafolders/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_targetelements" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes/${importType}/targetelements</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract key" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">key</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;key&quot;:&quot;(.*?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importprofiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes/${importType}/importprofiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract guid" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">guid</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;guid&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Document Location" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_documentfolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documentfolders/All%20documents</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_mediafolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/mediafolders/All%20documents</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Import" enabled="true"/>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_prepare parameters_AUX" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import java.util.Random;
String importType = vars.get(&quot;importType&quot;);
String fileExtension = &quot;&quot;;
String filePrefix = &quot;&quot;;
int filesN = 0;
if(importType.equals(&quot;Word&quot;)){
	vars.put(&quot;mime&quot;, &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;);
	fileExtension = &quot;.docx&quot;;
	filePrefix = vars.get(&quot;IMPORT_FILE_PREFIX_WORD&quot;);
	filesN = Integer.parseInt(vars.get(&quot;IMPORT_FILE_WORD_N&quot;));
} else
if(importType.equals(&quot;PowerPoint&quot;)){
	vars.put(&quot;mime&quot;, &quot;application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;);
	fileExtension = &quot;.pptx&quot;;
	filePrefix = vars.get(&quot;IMPORT_FILE_PREFIX_PP&quot;);
	filesN = Integer.parseInt(vars.get(&quot;IMPORT_FILE_PP_N&quot;));
}

String targetElement = vars.get(&quot;key_g1&quot;);
if(targetElement == null) {
	vars.put(&quot;key_g1&quot;, &quot;&quot;);
}

String importProfile = vars.get(&quot;guid_g1&quot;);
if(importProfile == null) {
	vars.put(&quot;guid_g1&quot;, &quot;&quot;);
}
vars.put(&quot;filename&quot;, filePrefix + (new Random().nextInt(filesN) + 1) + fileExtension);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importPowerPoint_SPS" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="importType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${importType}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">importType</stringProp>
                        </elementProp>
                        <elementProp name="documentFolder" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${WORK_FOLDER}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">documentFolder</stringProp>
                        </elementProp>
                        <elementProp name="mediaFolder" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">All documents</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">mediaFolder</stringProp>
                        </elementProp>
                        <elementProp name="targetElement" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${key_g1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetElement</stringProp>
                        </elementProp>
                        <elementProp name="importProfile" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${guid_g1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">importProfile</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/imports</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${filename}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${filename}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype">${mime}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import XML" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_set importType_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;importType&quot;, &quot;Xml&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Select File" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importtypes" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract importType" enabled="false">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">importType</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;importType&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_documentfolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documentfolders/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_mediafolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/mediafolders/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_targetelements" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes/${importType}/targetelements</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract key" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">key</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;key&quot;:&quot;(.*?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importprofiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/importtypes/${importType}/importprofiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract guid" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">guid</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;guid&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Document Location" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_documentfolders" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documentfolders/All%20documents</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Import" enabled="true"/>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ImpWiz_setXmlImportType_AUX" enabled="true">
                    <stringProp name="BeanShellSampler.query">/*
 * 0 - xml
 * 1 - zip
 */
int[] ImpWiz_setXmlImportType_values = (int[])vars.getObject(&quot;ImpWiz_setXmlImportType_RANDOM_VALUES&quot;);
if(ImpWiz_setXmlImportType_values==null) {
	ImpWiz_setXmlImportType_values = new int[]{0,0,0,0,0,0,0,0,0,0};
	vars.putObject(&quot;ImpWiz_setXmlImportType_RANDOM_VALUES&quot;,ImpWiz_setXmlImportType_values);
	vars.put(&quot;ImpWiz_setXmlImportType_N_GROUPS&quot;, &quot;&quot; + ImpWiz_setXmlImportType_values.length);
}
Integer ImpWiz_setXmlImportType_increment = (Integer)vars.getObject(&quot;ImpWiz_setXmlImportType_INCREMENT&quot;);
if(ImpWiz_setXmlImportType_increment==null) {
	ImpWiz_setXmlImportType_increment = Integer.valueOf(0);
} else {
	int ImpWiz_setXmlImportType_nGroups = Integer.parseInt(vars.get(&quot;ImpWiz_setXmlImportType_N_GROUPS&quot;));
	ImpWiz_setXmlImportType_increment = Integer.valueOf((ImpWiz_setXmlImportType_increment.intValue()+1) % ImpWiz_setXmlImportType_nGroups);
}
vars.put(&quot;ImpWiz_setXmlImportType_SWITCH_VALUE&quot;, new Integer(ImpWiz_setXmlImportType_values[ImpWiz_setXmlImportType_increment.intValue()]).toString());
vars.putObject(&quot;ImpWiz_setXmlImportType_INCREMENT&quot;, ImpWiz_setXmlImportType_increment);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                    <stringProp name="SwitchController.value">${ImpWiz_setXmlImportType_SWITCH_VALUE}</stringProp>
                  </SwitchController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_setXmlImportTypeXml_AUX" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import java.util.Random;
vars.put(&quot;mime&quot;, &quot;application/xml&quot;);
filePrefix = vars.get(&quot;IMPORT_FILE_PREFIX_XML&quot;);
filesN = Integer.parseInt(vars.get(&quot;IMPORT_FILE_XML_N&quot;));
fileExtension = &quot;.xml&quot;;
vars.put(&quot;filename&quot;, filePrefix + (new Random().nextInt(filesN) + 1) + fileExtension);
vars.put(&quot;xmlImportType&quot;, &quot;xml&quot;);</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_setXmlImportTypeZip_AUX" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import java.util.Random;
vars.put(&quot;mime&quot;, &quot;application/zip&quot;);
filePrefix = vars.get(&quot;IMPORT_FILE_PREFIX_XML&quot;);
filesN = Integer.parseInt(vars.get(&quot;IMPORT_FILE_XML_N&quot;));
fileExtension = &quot;.zip&quot;;
vars.put(&quot;filename&quot;, filePrefix + (new Random().nextInt(filesN) + 1) + fileExtension);
vars.put(&quot;xmlImportType&quot;, &quot;zip&quot;);</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_importXml_${xmlImportType}_SPS" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="importType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${importType}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">importType</stringProp>
                        </elementProp>
                        <elementProp name="documentFolder" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${WORK_FOLDER}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">documentFolder</stringProp>
                        </elementProp>
                        <elementProp name="mediaFolder" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">mediaFolder</stringProp>
                        </elementProp>
                        <elementProp name="targetElement" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetElement</stringProp>
                        </elementProp>
                        <elementProp name="importProfile" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">importProfile</stringProp>
                        </elementProp>
                        <elementProp name="filename" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filename</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/imports</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${filename}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${filename}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype">${mime}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ImpWiz_setMineParameter_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] ImpWiz1_values = (int[])vars.getObject(&quot;ImpWiz1_RANDOM_VALUES&quot;);
if(ImpWiz1_values==null) {
	ImpWiz1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;ImpWiz1_RANDOM_VALUES&quot;,ImpWiz1_values);
	vars.put(&quot;ImpWiz1_N_GROUPS&quot;, &quot;&quot; + ImpWiz1_values.length);
}
Integer ImpWiz1_increment = (Integer)vars.getObject(&quot;ImpWiz1_INCREMENT&quot;);
if(ImpWiz1_increment==null) {
	ImpWiz1_increment = Integer.valueOf(0);
} else {
	int ImpWiz1_nGroups = Integer.parseInt(vars.get(&quot;ImpWiz1_N_GROUPS&quot;));
	ImpWiz1_increment = Integer.valueOf((ImpWiz1_increment.intValue()+1) % ImpWiz1_nGroups);
}
vars.put(&quot;ImpWiz1_SWITCH_VALUE&quot;, new Integer(ImpWiz1_values[ImpWiz1_increment.intValue()]).toString());
vars.putObject(&quot;ImpWiz1_INCREMENT&quot;, ImpWiz1_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
              <stringProp name="SwitchController.value">${ImpWiz1_SWITCH_VALUE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_setMineTrue_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_setMineFalse_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ImpWiz_setRecentParameter_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] ImpWiz2_values = (int[])vars.getObject(&quot;ImpWiz2_RANDOM_VALUES&quot;);
if(ImpWiz2_values==null) {
	ImpWiz2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;ImpWiz2_RANDOM_VALUES&quot;,ImpWiz2_values);
	vars.put(&quot;ImpWiz2_N_GROUPS&quot;, &quot;&quot; + ImpWiz2_values.length);
}
Integer ImpWiz2_increment = (Integer)vars.getObject(&quot;ImpWiz2_INCREMENT&quot;);
if(ImpWiz2_increment==null) {
	ImpWiz2_increment = Integer.valueOf(0);
} else {
	int ImpWiz2_nGroups = Integer.parseInt(vars.get(&quot;ImpWiz2_N_GROUPS&quot;));
	ImpWiz2_increment = Integer.valueOf((ImpWiz2_increment.intValue()+1) % ImpWiz2_nGroups);
}
vars.put(&quot;ImpWiz2_SWITCH_VALUE&quot;, new Integer(ImpWiz2_values[ImpWiz2_increment.intValue()]).toString());
vars.putObject(&quot;ImpWiz2_INCREMENT&quot;, ImpWiz2_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
              <stringProp name="SwitchController.value">${ImpWiz2_SWITCH_VALUE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_setRecentTrue_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;recent&quot;, &quot;true&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpWiz_setRecentFalse_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;recent&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ImpWiz_getList_MINE_${mine}_RECENT_${recent}_SPS" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/imports?mine=${mine}&amp;recent=${recent}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import Checker" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="imports" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/imports</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract createdAt" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">createdAtStatus</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;createdAt&quot;:&quot;(.+?)&quot;,.+?,&quot;status&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$||$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="check imports" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import java.io.File;
import java.io.FileWriter;
int createdAtStatus_matchNr = Integer.parseInt(vars.get(&quot;createdAtStatus_matchNr&quot;));
String[] pair;
int successN = 0;
int errorN = 0;
int in_progressN = 0;
Date createdAtAfterThresholdDate;
Date createdAtBeforeThresholdDate;
SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
try {
	createdAtAfterThresholdDate = formatter.parse(vars.get(&quot;CREATED_AFTER_THRESHOLD&quot;));
	String createdAtBeforeThresholdStr = vars.get(&quot;CREATED_BEFORE_THRESHOLD&quot;);
	// if upper boundary is not defined it&apos;s being defined as current time
	if(createdAtBeforeThresholdStr.equals(&quot;&quot;)){
		DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
		Date date = new Date();
		createdAtBeforeThresholdStr = dateFormat.format(date);
	}
	createdAtBeforeThresholdDate = formatter.parse(createdAtBeforeThresholdStr);
//	log.info(&quot;UPPER: &quot; + createdAtBeforeThresholdDate);
} catch (ParseException e) {
	log.info(&quot;Can&apos;t parse the template into Date object&quot;);
}
for(int i = 1; i &lt;= createdAtStatus_matchNr; i++){
	pair = vars.get(&quot;createdAtStatus_&quot; + i).split(&quot;\\|\\|&quot;);
	try {
		Date date = formatter.parse(pair[0]);
		if (date.after(createdAtAfterThresholdDate) &amp;&amp; date.before(createdAtBeforeThresholdDate)) {
			switch (pair[1]) {
				case &apos;success&apos;: successN++;
				break;
				case &apos;error&apos;: errorN++;
				break;
				case &apos;in_progress&apos;: in_progressN++;
				break;
			}
		}
	} catch (ParseException e) {
		log.info(&quot;Can&apos;t parse the string into Date object&quot;);
	}
}
log.info(&quot;SUCCESS: &quot; + successN);
log.info(&quot;ERROR: &quot; + errorN);
log.info(&quot;IN_PROGRESS: &quot; + in_progressN);
File outputFile = new File(vars.get(&quot;OUTPUT_FOLDER&quot;) + &quot;importStatistic.txt&quot;);
if (outputFile.exists()) {
	outputFile.delete();
}
FileWriter writer = new FileWriter(outputFile);
writer.write(&quot;time range: [&quot; + createdAtAfterThresholdDate +
	&quot; - &quot; + createdAtBeforeThresholdDate + &quot;]\n&quot; +
	&quot;total: &quot; + (successN + errorN + in_progressN) + &quot;\n&quot; +
	&quot;success: &quot; + successN + &quot;\n&quot; +
	&quot;error: &quot; + errorN + &quot;\n&quot; +
	&quot;in_progress: &quot; + in_progressN + &quot;\n&quot;
	);
writer.close();</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Review Details" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Details" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Rev_Dtls_setMineParameter_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] Rev_Dtls1_values = (int[])vars.getObject(&quot;Rev_Dtls1_RANDOM_VALUES&quot;);
if(Rev_Dtls1_values==null) {
	Rev_Dtls1_values = new int[]{0,0,0,0,0,0,0,1,0,1};
	vars.putObject(&quot;Rev_Dtls1_RANDOM_VALUES&quot;,Rev_Dtls1_values);
	vars.put(&quot;Rev_Dtls1_N_GROUPS&quot;, &quot;&quot; + Rev_Dtls1_values.length);
}
Integer Rev_Dtls1_increment = (Integer)vars.getObject(&quot;Rev_Dtls1_INCREMENT&quot;);
if(Rev_Dtls1_increment==null) {
	Rev_Dtls1_increment = Integer.valueOf(0);
} else {
	int Rev_Dtls1_nGroups = Integer.parseInt(vars.get(&quot;Rev_Dtls1_N_GROUPS&quot;));
	Rev_Dtls1_increment = Integer.valueOf((Rev_Dtls1_increment.intValue()+1) % Rev_Dtls1_nGroups);
}
vars.put(&quot;Rev_Dtls1_SWITCH_VALUE&quot;, new Integer(Rev_Dtls1_values[Rev_Dtls1_increment.intValue()]).toString());
vars.putObject(&quot;Rev_Dtls1_INCREMENT&quot;, Rev_Dtls1_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
              <stringProp name="SwitchController.value">${Rev_Dtls1_SWITCH_VALUE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Rev_Dtls_setMineTrue_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Rev_Dtls_setMineFalse_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Rev_Dtls_setStatusParameter_AUX" enabled="true">
              <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] Rev_Dtls2_values = (int[])vars.getObject(&quot;Rev_Dtls2_RANDOM_VALUES&quot;);
if(Rev_Dtls2_values==null) {
	Rev_Dtls2_values = new int[]{0,1,0,1,0,1,0,1};
	vars.putObject(&quot;Rev_Dtls2_RANDOM_VALUES&quot;,Rev_Dtls2_values);
	vars.put(&quot;Rev_Dtls2_N_GROUPS&quot;, &quot;&quot; + Rev_Dtls2_values.length);
}
Integer Rev_Dtls2_increment = (Integer)vars.getObject(&quot;Rev_Dtls2_INCREMENT&quot;);
if(Rev_Dtls2_increment==null) {
	Rev_Dtls2_increment = Integer.valueOf(0);
} else {
	int Rev_Dtls2_nGroups = Integer.parseInt(vars.get(&quot;Rev_Dtls2_N_GROUPS&quot;));
	Rev_Dtls2_increment = Integer.valueOf((Rev_Dtls2_increment.intValue()+1) % Rev_Dtls2_nGroups);
}
vars.put(&quot;Rev_Dtls2_SWITCH_VALUE&quot;, new Integer(Rev_Dtls2_values[Rev_Dtls2_increment.intValue()]).toString());
vars.putObject(&quot;Rev_Dtls2_INCREMENT&quot;, Rev_Dtls2_increment);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
              <stringProp name="SwitchController.value">${Rev_Dtls2_SWITCH_VALUE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Rev_Dtls_setStatusTrue_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;status&quot;, &quot;&amp;status=open&quot;);
vars.put(&quot;statusTitle&quot;, &quot;_STATUS_open&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Rev_Dtls_setStatusFalse_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;status&quot;, &quot;&quot;);
vars.put(&quot;statusTitle&quot;, &quot;&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Rev_Dtls_getReviewList_MINE_${mine}${statusTitle}_SPS" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=${mine}${status}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get random review" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">GGUID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;documentGuid&quot;:&quot;(.+?)&quot;,&quot;documentName&quot;:&quot;.+?&quot;,&quot;dueDate&quot;:&quot;.+?&quot;,.+?,&quot;guid&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Rev_Dtls_ReviewSessionPresence_AUX" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.put(&quot;Rev_Dtls_ReviewSessionPresence&quot;, &quot;false&quot;);
String reviewSessionGuid = vars.get(&quot;GGUID_g2&quot;);
if(reviewSessionGuid != null){
	vars.put(&quot;Rev_Dtls_ReviewSessionPresence&quot;, &quot;true&quot;);
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;Rev_Dtls_ReviewSessionPresence&quot;))}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Rev_Dtls_reviews_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${GGUID_g2}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Rev_Dtls_documents_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${GGUID_g1}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Review Actions" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review Actions" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Edit" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_reviewId_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;RevAct_reviewId&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_getListOfOpenReviews_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=false&amp;status=open</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random review" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
import java.util.Random;
String username = vars.get(&quot;USERNAME&quot;);
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
ArrayList reviewGuids = new ArrayList();
for(int i = 0; i &lt;= reviews.size() - 1; i++){
//	String documentGuid = reviews.get(i).asObject().get(&quot;documentGuid&quot;).asString();
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;open&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		reviewGuids.add(guid);
	}
}
if(reviewGuids.size() &gt; 0){
	vars.put(&quot;reviewId&quot;, reviewGuids.get(new Random().nextInt(reviewGuids.size())));
} else {
	vars.put(&quot;reviewId&quot;, &quot;null&quot;);
}
if(!vars.get(&quot;reviewId&quot;).equals(&quot;null&quot;)){
	vars.put(&quot;RevAct_reviewId&quot;, &quot;true&quot;);
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_reviewsCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_reviewId&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Edit_reviewsChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="forDebug" enabled="false">
                <stringProp name="BeanShellSampler.query">vars.put(&quot;reviewId&quot;, &quot;20faef72-231a-4c27-b55c-1e259fd9299a&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_reviewsCheckerTrue" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_reviewId&quot;))}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${reviewId}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_reviewInfo_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;RevAct_reviewInfo&quot;, &quot;false&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_getReview" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="extract review info" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
JsonObject review = JsonObject.readFrom(jsonString);
String documentGuid = review.asObject().get(&quot;documentGuid&quot;).asString();
String name = review.asObject().get(&quot;name&quot;).asString();
//String endDate = review.asObject().get(&quot;endDate&quot;).asString();
vars.put(&quot;documentGuid&quot;, documentGuid);
vars.put(&quot;name&quot;, name);
//vars.put(&quot;endDate&quot;, endDate);
if(review.asObject().get(&quot;sendReminders&quot;).asBoolean()){
	vars.put(&quot;sendReminders&quot;, &quot;true&quot;);
} else {
	vars.put(&quot;sendReminders&quot;, &quot;false&quot;);
}
JsonArray reviewers = review.asObject().get(&quot;reviewers&quot;).asArray();
vars.putObject(&quot;reviewers&quot;, reviewers);
vars.put(&quot;RevAct_reviewInfo&quot;, &quot;true&quot;);</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_getReviewCheckerFalse" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_reviewInfo&quot;))}&quot; == &quot;false&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Edit_getReviewChecker" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_getReviewCheckerTrue" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_reviewInfo&quot;))}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_getDocument" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${documentGuid}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_modifyName_SPS" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;name&quot;:&quot;${__RandomString(20, ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)}&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RevAct_Edit_modifyEndDate" enabled="true"/>
                    <hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set endDatePlusOne" enabled="false">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
String endDateStr = vars.get(&quot;endDate&quot;);
SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
try {
	Date date = formatter.parse(endDateStr);
	Calendar c = Calendar.getInstance();
	c.setTime(date);
	c.add(Calendar.DATE, 1);
	vars.put(&quot;endDate&quot;, &quot;&quot; + c.getTime());
} catch (ParseException e) {
	e.printStackTrace();
}</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Edit_set currentDatePlusOne_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
Calendar c = Calendar.getInstance();
c.setTime(new Date());
c.add(Calendar.DATE, 1);
//SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
SimpleDateFormat formatter = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
vars.put(&quot;endDate&quot;, &quot;&quot; + formatter.format(c.getTime()));</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_modifyEndDate_SPS" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;dueDate&quot;:&quot;${endDate}&quot;}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RevAct_Edit_modifySendReminders" enabled="true"/>
                    <hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Edit_set sendReminders_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">String sendReminders = vars.get(&quot;sendReminders&quot;);
if(sendReminders == null || sendReminders.equals(&quot;false&quot;)){
	vars.put(&quot;sendReminders&quot;, &quot;true&quot;);
} else {
	vars.put(&quot;sendReminders&quot;, &quot;false&quot;);
}
</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_modifySendReminders_SPS" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;sendReminders&quot;:${sendReminders}}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RevAct_Edit_modifyReviewers" enabled="true"/>
                    <hashTree>
                      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_randomReviewer_AUX" enabled="true">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;RevAct_randomReviewer&quot;, &quot;false&quot;);</stringProp>
                      </JSR223Sampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_principals" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/principals</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random reviewer" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">import com.eclipsesource.json.*;
import java.util.Random;
HashSet oldReviewersNames = new HashSet();
JsonArray oldReviewers = vars.getObject(&quot;reviewers&quot;);
for(int i = 0; i &lt;= oldReviewers.size() - 1; i++){
	String reviewerName = oldReviewers.get(i).asObject().get(&quot;name&quot;).asString();
	oldReviewersNames.add(reviewerName);
}

String jsonString = prev.getResponseDataAsString();
JsonArray newReviewers = JsonArray.readFrom(jsonString);
boolean reviewerAdded = false;
Random rnd = new Random();
JsonObject newReviewer;
boolean properReviewer = false;
int newReviewersPoolSize = newReviewers.size();
while(!reviewerAdded){
	String newReviewerName;
	while(!properReviewer){
		newReviewer = newReviewers.get(rnd.nextInt(newReviewersPoolSize)).asObject();
		newReviewerName = newReviewer.get(&quot;name&quot;).asString();
		if(newReviewerName.startsWith(&quot;perf.user_&quot;)){
			properReviewer = true;
		}
	}
	if(!oldReviewersNames.contains(newReviewerName)){
		oldReviewersNames.add(newReviewerName);
		reviewerAdded = true;
	}
}
oldReviewers.add(newReviewer);
vars.put(&quot;reviewersJsonStr&quot;, &quot;&quot; + oldReviewers);
vars.put(&quot;RevAct_randomReviewer&quot;, &quot;true&quot;);</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_principalsCheckerFalse" enabled="true">
                        <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_randomReviewer&quot;))}&quot; == &quot;false&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Edit_principalsChecker" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey"></stringProp>
                          <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                        </JSR223Sampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Edit_principalsCheckerTrue" enabled="true">
                        <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_randomReviewer&quot;))}&quot; == &quot;true&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Edit_modifyReviewers_SPS" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;reviewers&quot;:${reviewersJsonStr}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                          <stringProp name="HTTPSampler.method">PUT</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Lock" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RevAct_Cls_setMineParameter_AUX" enabled="false">
                <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] RevActClose1_values = (int[])vars.getObject(&quot;RevActClose1_RANDOM_VALUES&quot;);
if(RevActClose1_values==null) {
	RevActClose1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;RevActClose1_RANDOM_VALUES&quot;,RevActClose1_values);
	vars.put(&quot;RevActClose1_N_GROUPS&quot;, &quot;&quot; + RevActClose1_values.length);
}
Integer RevActClose1_increment = (Integer)vars.getObject(&quot;RevActClose1_INCREMENT&quot;);
if(RevActClose1_increment==null) {
	RevActClose1_increment = Integer.valueOf(0);
} else {
	int RevActClose1_nGroups = Integer.parseInt(vars.get(&quot;RevActClose1_N_GROUPS&quot;));
	RevActClose1_increment = Integer.valueOf((RevActClose1_increment.intValue()+1) % RevActClose1_nGroups);
}
vars.put(&quot;RevActClose1_SWITCH_VALUE&quot;, new Integer(RevActClose1_values[RevActClose1_increment.intValue()]).toString());
vars.putObject(&quot;RevActClose1_INCREMENT&quot;, RevActClose1_increment);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="false">
                <stringProp name="SwitchController.value">${RevActClose1_SWITCH_VALUE}</stringProp>
              </SwitchController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_setMineTrue_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_setMineFalse_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Lock_setFalse_RevAct_lock_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;RevAct_lock&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Lock_getListOfOpenReviews_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=false&amp;status=open</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random review" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
import java.util.Random;
//String username = vars.get(&quot;USERNAME&quot;);
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
ArrayList reviewGuids = new ArrayList();
for(int i = 0; i &lt;= reviews.size() - 1; i++){
//	String documentGuid = reviews.get(i).asObject().get(&quot;documentGuid&quot;).asString();
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;open&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		reviewGuids.add(guid);
	}
}
if(reviewGuids.size() &gt; 0){
	vars.put(&quot;reviewId&quot;, reviewGuids.get(new Random().nextInt(reviewGuids.size())));
} else {
	vars.put(&quot;reviewId&quot;, &quot;null&quot;);
}
if(!vars.get(&quot;reviewId&quot;).equals(&quot;null&quot;)){
	vars.put(&quot;RevAct_lock&quot;, &quot;true&quot;);
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="forDebug" enabled="false">
                <stringProp name="BeanShellSampler.query">vars.put(&quot;reviewId&quot;, &quot;24db2c6b-cf14-42cc-8bde-9db25119a319&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Lock_reviewsCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_lock&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Lock_reviewsChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Lock_reviewsCheckerTrue" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_lock&quot;))}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${reviewId}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_lockGetReview_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;RevAct_lockGetReview&quot;, &quot;false&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Lock_getReview" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="extract review info" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
JsonObject review = JsonObject.readFrom(jsonString);
String documentGuid = review.asObject().get(&quot;documentGuid&quot;).asString();
vars.put(&quot;documentGuid&quot;, documentGuid);
vars.put(&quot;RevAct_lockGetReview&quot;, &quot;true&quot;);</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Lock_reviewsCheckerFalse" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_lockGetReview&quot;))}&quot; == &quot;false&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Lock_reviewsChecker" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Lock_reviewsCheckerTrue" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_lockGetReview&quot;))}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Lock_getReviewComments" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}/comments</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Lock_getDocument" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${documentGuid}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Lock_forceCheckIn_SDocAPI_AUX" enabled="false">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
String guid = vars.get(&quot;documentGuid&quot;);
try {
	client.forcecheckin(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (Exception e) {
	ResponseCode = 400;
	IsSuccess = false;
	return false;
}</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Lock_lockReview_SPS" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;status&quot;:&quot;locked&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}/status</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RevAct_Cls_setMineParameter_AUX" enabled="false">
                <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] RevActClose1_values = (int[])vars.getObject(&quot;RevActClose1_RANDOM_VALUES&quot;);
if(RevActClose1_values==null) {
	RevActClose1_values = new int[]{0,0,1,1,0,0,1,1};
	vars.putObject(&quot;RevActClose1_RANDOM_VALUES&quot;,RevActClose1_values);
	vars.put(&quot;RevActClose1_N_GROUPS&quot;, &quot;&quot; + RevActClose1_values.length);
}
Integer RevActClose1_increment = (Integer)vars.getObject(&quot;RevActClose1_INCREMENT&quot;);
if(RevActClose1_increment==null) {
	RevActClose1_increment = Integer.valueOf(0);
} else {
	int RevActClose1_nGroups = Integer.parseInt(vars.get(&quot;RevActClose1_N_GROUPS&quot;));
	RevActClose1_increment = Integer.valueOf((RevActClose1_increment.intValue()+1) % RevActClose1_nGroups);
}
vars.put(&quot;RevActClose1_SWITCH_VALUE&quot;, new Integer(RevActClose1_values[RevActClose1_increment.intValue()]).toString());
vars.putObject(&quot;RevActClose1_INCREMENT&quot;, RevActClose1_increment);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="false">
                <stringProp name="SwitchController.value">${RevActClose1_SWITCH_VALUE}</stringProp>
              </SwitchController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_setMineTrue_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;mine&quot;, &quot;true&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_setMineFalse_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;mine&quot;, &quot;false&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_close_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;RevAct_close&quot;, &quot;false&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_getListOfLockedReviews_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews?mine=false&amp;status=locked</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="get random review" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;
import java.util.ArrayList;
import java.util.Random;
String username = vars.get(&quot;USERNAME&quot;);
String jsonString = prev.getResponseDataAsString();
JsonArray reviews = JsonArray.readFrom(jsonString);
ArrayList reviewGuids = new ArrayList();
for(int i = 0; i &lt;= reviews.size() - 1; i++){
//	String documentGuid = reviews.get(i).asObject().get(&quot;documentGuid&quot;).asString();
	String status = reviews.get(i).asObject().get(&quot;status&quot;).asString();
	if(status.equals(&quot;locked&quot;)){
		String guid = reviews.get(i).asObject().get(&quot;guid&quot;).asString();
		reviewGuids.add(guid);
	}
}
if(reviewGuids.size() &gt; 0){
	vars.put(&quot;reviewId&quot;, reviewGuids.get(new Random().nextInt(reviewGuids.size())));
} else {
	vars.put(&quot;reviewId&quot;, &quot;null&quot;);
}
if(!vars.get(&quot;reviewId&quot;).equals(&quot;null&quot;)){
	vars.put(&quot;RevAct_close&quot;, &quot;true&quot;);
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="forDebug" enabled="false">
                <stringProp name="BeanShellSampler.query">vars.put(&quot;reviewId&quot;, &quot;24db2c6b-cf14-42cc-8bde-9db25119a319&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Cls_reviewsCheckerFalse" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_close&quot;))}&quot; == &quot;false&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_reviewsChecker" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Cls_reviewsCheckerTrue" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_close&quot;))}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${reviewId}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_setFalse_RevAct_closeGetReview_AUX" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">vars.put(&quot;RevAct_closeGetReview&quot;, &quot;false&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_getReview" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="extract review info" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.eclipsesource.json.*;
String jsonString = prev.getResponseDataAsString();
JsonObject review = JsonObject.readFrom(jsonString);
String documentGuid = review.asObject().get(&quot;documentGuid&quot;).asString();
vars.put(&quot;documentGuid&quot;, documentGuid);
vars.put(&quot;RevAct_closeGetReview&quot;, &quot;true&quot;);</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Cls_reviewsCheckerFalse" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_closeGetReview&quot;))}&quot; == &quot;false&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_reviewsChecker" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">ResponseCode = 200;
IsSuccess = true;
return true;</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RevAct_Cls_reviewsCheckerTrue" enabled="true">
                    <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;RevAct_closeGetReview&quot;))}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_getReviewComments" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}/comments</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_getDocument" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${documentGuid}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevAct_Cls_forceCheckIn_SDocAPI_AUX" enabled="false">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
SDocService client = SDocService.login(url, username, password);
String guid = vars.get(&quot;documentGuid&quot;);
try {
	client.forcecheckin(guid, true);
	ResponseCode = 200;
	IsSuccess = true;
     return true;
} catch (Exception e) {
	ResponseCode = 400;
	IsSuccess = false;
	return false;
}</stringProp>
                    </JSR223Sampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RevAct_Cls_closeReview_SPS" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;status&quot;:&quot;closed&quot;}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/reviews/${reviewId}/status</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Export" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1441955503000</longProp>
        <longProp name="ThreadGroup.end_time">1441955503000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PAUSE_config_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.put(&quot;MAKE_PAUSE&quot;, &quot;true&quot;);
vars.put(&quot;AVG_MS&quot;, &quot;10000&quot;);
vars.put(&quot;STD_MS&quot;, &quot;2000&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_USER_AUX" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.util.Random;
int nUsers = Integer.parseInt(vars.get(&quot;N_USERS&quot;));
String username = vars.get(&quot;VU_PREFIX&quot;);
String vu = username + (new Random().nextInt(nUsers) + 1);
vars.put(&quot;USERNAME&quot;, vu);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_j_spring_security_check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">j_username=${USERNAME}&amp;j_password=${PASSWORD}&amp;loginForm%3A_idJsp30.x=28&amp;loginForm%3A_idJsp30.y=7&amp;loginForm_SUBMIT=1&amp;loginForm%3A_idcl=&amp;loginForm%3A_link_hidden_=&amp;javax.faces.ViewState=8EgC7hvJoXWgMHaUZxk5rx66APlnNueyP32ajDxbvc%2Fi5akMf2jX5W9NF3roe9lcuwszUVsDa0paIZKDZQ%2FqA9OQRll%2FxMrtmLgZKpZNcAtQpr8GrghrNLKYKcMTveuOoPxjW0RBSGWLlbNKis4mRBrO4tujcnsSlCHO1%2FEcj9sLLaWs7LYqdJslRL9wHnfUPRsur%2F2RBQcVQUT6EI64y6BwzaXQK37vpgyPtA7WPQ9Zg60FtkeWwSPtEDqRX46pa%2FpdgaxKwT5Qpr8GrghrNJXzObHKV6N3y91lSAwHr2ypchHMOzsb37act%2Bt62rcJ6OF0Xl%2Bb2Roe1OHE%2BCd08IFhSRy0QFDihtkzwJTcNMF%2FuXdEjTHklsOSgV40cTZS0e17vwBJhFIgmnPhSnPHsQibPAnCvlbYOCGLTRzJwX%2F1j1r3IbaA1BDTyeB9EgLJhlIxyXpUaCSEfG4vrCIXNRrtrs2gSGsvkxOAjcwktcYjarrUWF9mT1BShWb%2BVgU6izAH8VR0q9hCcegcPPGltwmVhYCHQdjvMFydGhVy05ib%2BZRudPSUnDBcnRoVctOYm%2FmUbnT0lJw0jV1iNI4OcBe12dccOlNocuQ5ikOt7NWDrWI5UEQW3O%2Bw5Zw6oApZmdDXdVIpTTeGXbv7A%2BFDQ%2BxcwaW6ThVJnEfdiJK8bCVS2p2zJaoDSu8jweRVcZcjdZ75Szicf1DSqQ8kRr0gJtbcE4mxKSE%2F0p%2FmGsBlgqNWtgFhmSQFvZY9v4%2BPx0DeiFJGcKKWiLADBOJ%2F4yzr%2BlzrkpNJ7%2F362XfXgizrwJOIBk4zT5kxF8nyVKM35R4e0s8YVTCH4ge7CzNRWwNrSlohkoNlD%2BoD0iZqbdrifKyZJqjDdn6tCxq%2FeP%2FWfcG9KsTNirgXPd1%2FfRyoEDq1qEnExdcJE9ro8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys2x3klu%2FfW%2Fk8v35y5TDsrPNd2YGcYo7yvL9%2BcuUw7KzzXdmBnGKO8ry%2FfnLlMOys813ZgZxijvKASHLZfHcbt0SYuR0WZ4aRsl2IncyYDXz9lpj7EH4r8QAEZJUagPRcDtXeRZKkgNaQdnCleRDit2HYFpk%2F9FH%2Bx0jRt8oLc0Npjc3aD7dzcV6iLbVa3ctLrvdwBLXTqZZJMMeKE5w6dB%2FfRyoEDq1qABGpUBHd67a4Iv0DA1oe8seYqahfuKn6BGV4UKF%2Ft9YUo2V1GHb4oPk4sSQyd2SMwPYcKI5QIoyNdXax8ec8RArYJgXy3BlMtC1Jl%2BdZ8ff5HK1fim%2BzjvQtSZfnWfH3xiLlOi%2FAoqb0LUmX51nx9%2FkcrV%2BKb7OO9C1Jl%2BdZ8ff5HK1fim%2BzjvxPHmGvR3rLLg8GFGyj64zy%2BVlqPpc5P814%2FzAy7D2JmgZej%2BpVgOXqXIRzDs7G9%2BMX7OeWlYh87q4JQlGTWUtg1wCn2GFyEBzvJ1xr%2BBSYbqKt%2BXPjpDhaGelPZr1cMPaPqWyzjarsvwgai3HgCjSWhQcveWesuv8IGotx4Ao0qL%2FVhvtOvJs%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSU3RvtHt8Gjpcfsu66p3fTwME4n%2FjLOv6k7JRqKK8QqmGFrz2xw3LtC1pHmTiN%2FK5gtlm4OEPGp15qvFZSTvpDPFTSxX65QPv6w6ERbQac%2FBHhfHIRSRZVH2oVC3zutsvQdnCleRDit0RS61hbPK3OR0jRt8oLc0Npjc3aD7dzcVXz9TVntv3nch5RKYIuP1JOpRxKA%2FrTMc%2BR5DNn3LTGxT5182ZhiRcL%2FQxN1n8ZQe82ED3vTPFwEHZwpXkQ4rdKXLAoniEiVIU%2BdfNmYYkXPT6rh12NjsTfNnPF9aMD7bELi6VHgjyh9lFHGr1%2BQc8yXYidzJgNfPw4WYy0oX7EFpQlypQSMByIO44UR%2B%2FRK2LuhDBK4CuUBHontOiw8SkD8YZni6sPuNmdCCvi7LZjaOFQo7AMHn8WaPZOYWpt%2Fxh4bvQEto3ajSNXWI0jg5wKCRwz5c9K8vFAA0izcJWQ9GwH%2FlgGgUi8noAGlHl2N%2BWLFS6bmx20M99H3S7qL1L2PTzen9YUDYyHg2BP36GZN5I371Rj%2BbdjKPbD78Z43i5lSZORuB%2Bc0dXuTCWKJuoS3oSvwbkQrhOT7RBzTyb9Ut6Er8G5EK4Tk%2B0Qc08m%2FWMo9sPvxnjeLmVJk5G4H5zAONw9dty35%2BmFrYFHjEW4KQwM8p5aa1RKxpUD5DlCQaR3k0QRrxV3Hy7TM%2BR%2BjEb2qNQfeVLhReKPYKPFjXGX5lPSe4so7p%2BAM%2FAEtopQXG4CFfQX2E2UMYQgkJWprJ80bAf%2BWAaBSLyegAaUeXY3wMzhk8w26rr2NLg3ybWKAWFtUQydZSGkTySCdk0zSeFgd48cPt1ZwrzMlchMJ8gaoM0GnEawCnAZ31fXP3kjd5Be8%2B4wb0%2FwDGSNyFbMl%2FlmCWJEKem7YxpQ80%2BEtPc8OpuIWl%2FmTJlLG2%2F9%2BsWDl8giAc3kI7TqNDR6Ww1W7gnxXy5d4mzmeLhBxm8hmxUv47z%2BenzvlyAuoq35c%2BOkOGy9cikK8JNKesOhEW0GnPwR4XxyEUkWVThBUsUXXHmVvL9%2BcuUw7KzkfBEBDsgpKYxkjchWzJf5ZgliRCnpu2MaUPNPhLT3PCux1zIODcKYMZ2FiGesx0CEURGc9umrmIMunSD0w2dbZY9v4%2BPx0DegvFyFWn27Y0nwQyIWQKVGJY9v4%2BPx0DegvFyFWn27Y0NohwGCJ4%2FqNo%2BpbLONquy%2FCBqLceAKNKi%2F1Yb7TrybPwgai3HgCjSLD2TeYyUeF0gjqljzqXkH3%2FXjAig5MHAlj2%2Fj4%2FHQN4gjqljzqXkH2cI8uG0qSJy2j6lss42q7L8IGotx4Ao0iw9k3mMlHhdII6pY86l5B8ObR5AEPwE4ZY9v4%2BPx0DeII6pY86l5B8fhJE0MQzAeZY9v4%2BPx0DeII6pY86l5B9qHNUB8C15B147i7dD915VWfJkiZXTih4A2u4%2B7GmvE0HZwpXkQ4rdzcArJcp%2BR125lSZORuB%2Bc3%2BajBgCYvcpS3oSvwbkQrhOT7RBzTyb9Yyj2w%2B%2FGeN4uZUmTkbgfnOk97e4csIz8W46F173k8Ujrr13JOOvD1IrGlQPkOUJBqXXAm5L2H9PvSV%2BYSIoGpYfsnc9tWx6xa00oCjErrgxxQANIs3CVkNmwaiBxyQz0zFs7N1mHXgn0nIDb3aNM76yqQYVzyjCi5xFp%2BMOzhJfuwszUVsDa0paIZKDZQ%2FqA9Imam3a4nysmSaow3Z%2BrQsav3j%2F1n3BvYB3viaReyiyf30cqBA6tah3OpqSUUJMJc%2F%2FYKScE2apT4lh8nO0EntJza%2FeDnkAv8QuLpUeCPKH2UUcavX5BzxJy0t4c8GINlGNTNkbi%2BWZeoTr%2FROwY1FY%2Fd40CjPTwgHS%2FXBuGK4rHSNG3ygtzQ2mNzdoPt3NxQJ0myJwPAcDIzWowGj55iYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTetUx2nQJLr2BzwhKimhAB%2BVyl%2FP%2Bugwo35WvqHGN2kEV9ikBwnxkNcS3c7vNWTcR%2BZC%2Bz1RZ4Wq3JU2XiwRSJnZFtuDjTNmffXj6a8xWIVoVyspIbqMvs9Nxn%2Ft%2FEJnVVXKX8%2F66DCjYN8wjMWRARLb8l9soFUi%2FVDeCL4IqRXnzhUBXG%2BTXL%2Fpigswza0kkeaci%2BOW9enNTJbvR4kYbZLJkbHSXL1wMq%2FIpo0RnYAMphBy4V9SmIsmNC%2BapC4ZevkK1pIFr0oSp740Dd9GJU5JC0MSW7hhOSLoILu5RlNdIuWOFaxVsvvdnCqBT8l0WIxrkO%2FXIZrge%2FceFdo6L6JsShv5Zk1l9V14j3%2FoV%2FdBl2xfTguk1atFAtxUJd6uZMFw%2BkW81qzUfFyBNHNRd0j9ytEIROxqDfHtb5UfgsqgFZ0U8AdBYr8R7axnEDPftvt3u97DfPORxbHDh445nU0qDbjbmVZYBwWClXWvtqT863%2BFHykE5mpZozbuaKZyfvXM41QqrE%2F1%2F2phFswqNLz14wKVCTSW60%2FqGEtEBw2PxfVBXNErTM8OJC26NcVeZscAueiOFm%2F6yGVAM%2BZW6e2UCdxk4MrNi9noC3D62lIzriPH2YcgBfhmJ%2FKM3QXbxB8ojIZxmH0%2B5O56xI0qLElCidchm9BOeXt%2BDOmkqnD69xHE3xey5KQpFJr9IWC6pYKQsuFeNaOqMZLNYEzZ0sG6OTVzfhn5UZVDcdWBiOvPnZ7RWt9BSFckr6HTAXRTaST2L1BIA%2BSYBai8pyTPzBJmxqCV67FGnO4K2vB%2FG0J%2FRUL4B8mFmardlz79Wiipd88gomsGfXf7jMAVx8dNWkRRON5D5rl8MYvI6rXe4T23LBTbVYEG6aoN4SO4yPZ4kGtiBwGAhSHPYBlALiv7cwjxQANIs3CVkMImM8ayfzWAkjIIsym7R7YrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAtGl%2FLBIOmebiNQuT7CrLuC%2F1ghQv2wF42wuMuUpR2M%2Fv06jzAOWM7F2xzIvX%2BOJA0SPtWrLovJpRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3Z7%2BdCcMXJHKxrJnsZq7GkM1mjNu5opnJ%2B7lQvNoaF0jdf1TxbuT18BNR8lyQUBJ%2BcqwFbRHwT2DYmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6WBQVTE%2B4gXs0ajsnYnUclpvtDO1asAKZaBl6P6lWA5epchHMOzsb348CRsPIc6cSGruMD2jxPD74MHk57VnynKn0RFgIDCd%2F9NRUTubAeJrPiUsZ3FXtn1OZAm%2B83ReMxelcz%2B4GTZFmbkG%2BHIq1Wdw%2FtZkoI5nYbL8hWQpAOxJ4NR%2BZekm0A4UreKfojt25LqwgSPMSiH1S2p2zJaoDSu8jweRVcZcjOAjG07spu0%2B0dW4IbjbdhrD1x8paSzJ9HNoRukn4gwEpeMCWMAqbv9%2B3oKPc03vsICVncG%2B%2B86ZRXK9LZSyA%2BVDmSHT0bPiDSa8gIBfl7EkWClXWvtqT8xicsyuBzaOTZozbuaKZyfuzbVnpwlomGDeSSyMQlNeRWZL7ldjsfQ6YJYkQp6btjEZTPDuS17bw2aDBlMHumNrjEKdkLLvi%2B0ivTOre4MMm9ATqsAwubzujwL98nA7DS2%2FqSntO%2BS%2B%2BfO%2FaPvtFRnAtjeu9YSFL7wZrXtF5HD3mDMRnGdEIRmfXJ1lb80BCn77o5iaobLAFGxWSKY1nAfVE43kPmuXwxs%2F914YdEjmjwQ9XZl3o6o43hI7jI9niQdPSu0khZjCTBnvESVuokNjFAA0izcJWQ%2FYSwPbBS9FcGNXkmqdetiKY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZUrkCwSf4PiFPVScaG4fvZpYAJciSKdyUkTCgMCWfWRD2pCEjbtRF1o7UH4MSfx4dFA7%2Bc9cnDAqZrvz8tCseX4qRvwWzhYo9KsmexmrsaQzWaM27mimcn7LiKDm977qT67w7oAmMNfrdFeuKAFdktkvyXjiPxWtTD1j1r3IbaA1BDTyeB9EgLJi5xY4f7ltRZJq%2B%2BTLR0PODiQtujXFXmbHALnojhZv%2BuoEJ4C0jGPTCLdqo%2FujnR1OhItjFLXpHsAV6cJTITVLVfYdBC3qF1EINxtA5egd9%2BQTuzsQzskJSKr6oSGr%2FVMwhbILEtsheAbFZIpjWcB9UTjeQ%2Ba5fDGu25I4DEs9u9qlU9pLUTHfDeEjuMj2eJBzn9LOK4jHFvdECoFJNlZucUADSLNwlZDqZ2E1IIEcZJHBC0klt3epqanfFcHbe9Ib1ROLEB89EXCqkGoI60oSOSp6bNosnRKRNye6YlM0MXNe%2BuLfvyi9WW%2BIM%2BU0TN5P5TyS%2BYjU0%2BQTuzsQzskJZBO7OxDOyQlkE7s7EM7JCVcCjo5QT6EGi5rF9FTLsigL956GfJNMMcHrlqVGjjjxgCbhXkESZl2%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzqIw1ziWCF21mjNu5opnJ%2BzEI2FTzwsPJf1TxbuT18BO94ym7o9Km7by2tRGGkaBymN5nAaeLXK8CLNjahhEHx2hPBcbZicfB2ePph086LxoLSvF2xNf1bIhi%2FwNtqF7UJjxeg5j2aIqXbEGXOCaILoFkrSlM8YZcwhMs5KG4%2FOQVNPb%2FpkWnrauEC5rR7SSgCL1q7Er8nmWg2Rb%2FWsixWkI%2F10yPFpIIY%2F4yPRjAzM%2BP594Enc%2BsvS%2B6VTs56JE0UNOtqh%2B%2BQxLD2PFm6tZ%2BHpBO7OxDOyQlkE7s7EM7JCVRjjpwk7H5FFBU8j87uXdos21Z6cJaJhivtZiQGUe3ZxYKVda%2B2pPztCuReJFg1uwfcBaXCyoIscYQgkJWprJ86mXd8dSuUjV%2BTKvoqIOvF0ivTOre4MMm9ATqsAwubzuImE63UTUrlKonTqKQtulvgdjC7uLLaYWbGoJXrsUac4TGkKlLIhP%2BTKEkmwDEShtRjjpwk7H5FHds1hMiLJQs%2Bcsw1HeKwfOvtZiQGUe3Z6A7pSF4InuotCuReJFg1uxqR2gNCMqXbYqdj%2Bomw4txmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYict9dYb0TRDJtETcnumJTNDFzXvri378ovXyXgxeS7VVaG9PDHeZIADoGVON4qnsdOd3K157rndgP45m4ITy8EOTowgm2jqJM3%2FKISxSHMRQTZBO7OxDOyQl9ARBX478ILaoj3TVbmy7BvgfC3dmlYLAPIKJrBn13%2B4eoqYbDxO7oR8gM%2FkihzoFLyOq13uE9tzBD1dmXejqjjeEjuMj2eJBX%2BNTPW1qchI2tPFbVh3wsfgJXUkiOxxVQ5ztSHd%2FRhG%2BT1rk6yKEWg6luwUNf6N0Jjxeg5j2aIqXbEGXOCaILiOWj3AoTg%2FOlyg0EZs5RH4tSndrUUQa2v99Kk%2BeyDygqDbjbmVZYBwWClXWvtqT80zWhTkRFwKqZozbuaKZyftne8Pcmyf%2BD5Sq5Bv7ErReHqufeGbxLZwSYuR0WZ4aRlxT54LLtlAEOJC26NcVeZscAueiOFm%2F6zYhGbFyvxKOIt2qj%2B6OdHX9XlpUATR%2FLFtizLcN%2Bx2%2B5Crtkag%2FPoa11ZvMqwYwDZBO7OxDOyQlkE7s7EM7JCXxLaIW1Qb4Jv8udDE9HH7%2FrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYqwjHZjIHaTz6DPpaYzHDnGr6z8LmDplr14%2BmvMViFaH6MczlRPO2cqD6FCcnUfPgicDulVEdg7efc5Hq2caYaWkNn05J3RXUjVOh%2BgZW8ZcHcY1WRZ16YRGUnPoHR9PyW%2F7%2FpSj9AonBqENZklLOOhsVkimNZwH1j8LxvGaTVgy6wg8DoCOoFAr9YnsIl%2F%2Fqvw4Fc1%2FyucpIdbkW7SkgviYgcwP%2BpKDUJM8%2BCxFTxgyt3ut%2FYcSjxZ0UvqfAQBPugdjC7uLLaYWbGoJXrsUacyiWTHG1YG2ppUJn%2BeBKdTfUgYjpkgwVTrET4u2NF%2BMjw9jxZurWfh6QTuzsQzskJQuw9XC8XF2yYpsgYHt3J3S3lSWT4FpHnvX39cEo2hGIb3bzIH97MXKsmexmrsaQzWaM27mimcn7LAhBqYynQEsdSVouZyKnQ0D9LtprVz6ScmlCKWNPT4Km3OBoBr3oEnp10n9QQlAkmN5nAaeLXK8CLNjahhEHx2hPBcbZicfB1W%2Bd0rDYicvah94jMypoJyyMlbwcD6Xa7q%2FRQU5zTP138UQUG1TRK7%2BL%2FkV7D1KZizza%2B7WkHDkuFzCPNBvWFBVdvyg0EBhMIvwfMxed%2FhCQTuzsQzskJZBO7OxDOyQlIqvqhIav9UzCFsgsS2yF4BsVkimNZwH1RON5D5rl8MY38RI%2BHRWc5MEPV2Zd6OqON4SO4yPZ4kGHF58y5rWKCQLH8bFr%2F2apIY%2F3LKolzM7k1b7ocLUIRWDeseM8QV3El1TRMOO%2F%2BA44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dToSLYxS16R7AFenCUyE1S1X2HQQt6hdRG01hbR10%2BbxUWTnnaTlM4qxlgFNgm%2BQppBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJTyCiawZ9d%2FuHqKmGw8Tu6FByeACXRAPnS8jqtd7hPbcESAEJCTn5wDBqENZklLOOhsVkimNZwH10g38gjNVWegwkOLlXN7wQjiQtujXFXmbHALnojhZv%2Bs2IRmxcr8SjiLdqo%2FujnR1lKF%2Bv4bBXx9lviDPlNEzedpTebtX9R%2F%2Bqx7%2BaecjeiBLJ8Vb%2FR9GDB9eCeax%2FA0YzIeS5JfOnrgDSG1RVQhe9rHRQvqK5Z68bts1T8R1D0WcBBPSOnjcmeyrUwkn10Q0bzyi%2FTnwsoUWClXWvtqT86yZ7GauxpDNZozbuaKZyftpvunX11cs7ro98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL14DksiqLKGN5HrjYNlnWaefc6gu%2FQzel5B3GNVkWdemH5LAMSYy4P7ZbvifJbHawKwahDWZJSzjobFZIpjWcB9XluP0cirzmGfkyr6KiDrxdIr0zq3uDDJvQE6rAMLm87KFkMmMJyCAbur9FBTnNM%2FXfxRBQbVNErFwR3U9FBhOp%2F%2BZoknXyjEzbE2VK6QkInu6QuHQMLiausmexmrsaQzWaM27mimcn7LAhBqYynQEtdRosyAE3Pop1gc%2FEa%2BpxuavrPwuYOmWvXj6a8xWIVoVyQIasny9rnoPoUJydR8%2BB9OcAA1eXzi2iadbAgUwliL%2FWCFC%2FbAXjbC4y5SlHYz9G18VwQuXOTWmefPp6Lz6X1ahw7AguoaPskB9Ez08oxkE7s7EM7JCWQTuzsQzskJS1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPzrJnsZq7GkM1mjNu5opnJ%2B0SDax0YwfQxuj3wFRYeYSimp3xXB23vSG9UTixAfPRFwqpBqCOtKEjkqemzaLJ0SkTcnumJTNDFzXvri378ovVlviDPlNEzeXtbnVlnYtzfEjd9UnKDbBeWMUTZ0P1TCPnCBJ9oogf%2FwQ9XZl3o6o4Zv6Yn4Bc09BsVkimNZwH1Ni94zF6wywDP%2FdeGHRI5oz%2BisgAM%2B0LLRoT72%2BQyQdFS2p2zJaoDSu8jweRVcZcj6CJAZPQs6AAFIItvjOVWqJjeZwGni1yvAizY2oYRB8f8q3A6zTysdZjrMX8uqpJJD9HJeD7XL%2FHcGiF6HeMG8PceAZ9%2BOmUEKoD%2BMQVmvwylgi7LKnDjuifYmtj3QlZJFjh%2BaMuX4WHh38wWo7Ta%2FuWaAVSCO%2FeNBRMwJFoK13snoJdno99BVCasoucFxoA7r7WYkBlHt2egO6UheCJ7qLQrkXiRYNbsSIWN8HHrcbmKnY%2FqJsOLcZjeZwGni1yvAizY2oYRB8doTwXG2YnHwdVvndKw2InLfXWG9E0QybRE3J7piUzQxc1764t%2B%2FKL1AQQBByvPnsr4sGFogUvWaYzvvJGNQD6UT%2Bs4772qu7ubzERQYukSZ62ZYBCn6aSUizza%2B7WkHDloUbJlp50RIBVdvyg0EBhME%2Bc%2FMZEhvWNYrAdS2rwkAzyOiB4XMb9jkE7s7EM7JCULsPVwvFxdstzoKYcD5PueHlyiT6fDR8BhnphA73vgBe6LrZ8AjtJdrJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZIVhfrZysjYurXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKiCWyWbyN1r%2F6anfFcHbe9IV7ZbbdjrgqZsWnYkbuVXeevnJ2KNuJIn%2FyazTw4Su7ec0KesCtCwWh5oi2qiKveYNSZST052kagptqd9FarITSzi7zSJLoPxGxWSKY1nAfVE43kPmuXwxi8jqtd7hPbcP6KyAAz7Qsv6OR0uXNscFyzXxHw2diwdSK9M6t7gwyb0BOqwDC5vO4iYTrdRNSuUqidOopC26W%2BB2MLu4stphZsagleuxRpzhMaQqUsiE%2F6DzA2FdMkCWFGOOnCTsfkUd2zWEyIslCz5yzDUd4rB86%2B1mJAZR7dnpScvpSDoEM4Ml2iR%2BNLAs2aM27mimcn7t%2BW3G5glEPKvtZiQGUe3Z9FeuKAFdktk1166u2Z9fwH1j1r3IbaA1BDTyeB9EgLJF1fq3LAdys44kLbo1xV5mxwC56I4Wb%2FrqBCeAtIxj0wi3aqP7o50dXWKgxeJBaCMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGGRYDo7Yyhf3nQpHUKccstoNsjjunZGW1WAVn8n5LxQ89x4Bn346ZQSGzPC8F0B10ZBO7OxDOyQlkE7s7EM7JCWQTuzsQzskJUOxsI4a5MZQGGWa80Svj52tcAAWzpOG6W8CYhfrSz%2BMwQ9XZl3o6o5fSJsoxMYqUxsVkimNZwH1RON5D5rl8Ma6wg8DoCOoFDX7KAN%2F4m5Gvw4Fc1%2FyucpIdbkW7SkgvkR%2BxUNeEfNcJM8%2BCxFTxgwO51yxwg9EFfgJXUkiOxxVTupBTXso31jRtfFcELlzkwWDZOmPgIYYicuMLiylxSmDAgur0rIQYUgmVO4FLVzFNz8tCdKbDqw6CUpYO98757jabbpoGsR%2FZozbuaKZyfuzbVnpwlomGDXc8LQl2JkyF8xI8JU6D9SE8GwLQAWm5GaM27mimcn7s21Z6cJaJhgkynXl%2FMftYBfGd%2FhehpgPmCWJEKem7YxGUzw7kte28HnWP1WVXEeNOJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHV1ioMXiQWgjB72n%2Fw345r6e82G2IIOkT2qc0%2FlSQR9UpBO7OxDOyQlkE7s7EM7JCXGo51DuWJNSgXWyj1UtKxtk%2F0E204rYifnEmnbx7cxNMEPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBSfJ2f8aQKdCL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMV1G5pzqtMK9jX4H4glxkcPTz6YigFzOTr7WYkBlHt2cWClXWvtqT87QrkXiRYNbsvSH3WAjE8GZvkcqyhKDPFJjeZwGni1yvAizY2oYRB8f8q3A6zTysddVvndKw2InL0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6i0Blh%2BtB0C%2Bs8gomsGfXf7h6iphsPE7uhQcngAl0QD50vI6rXe4T23I2Yjawtp%2BV1wahDWZJSzjobFZIpjWcB9WK6tPHD07lh%2FncQ5X5iJHd1KbEdxEUF16LncHq00hJYoIUgp9YewmZIr0zq3uDDJvQE6rAMLm87iJhOt1E1K5SqJ06ikLbpb4HYwu7iy2mFmxqCV67FGnOExpCpSyIT%2Frb%2BcrtUReDqZm1tX2uB4D%2BWeWxmcswn3pBO7OxDOyQlkE7s7EM7JCXa%2FQzjn74RBy1Kd2tRRBra%2F30qT57IPKCoNuNuZVlgHBYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYIOidGg2Dmu%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg9HvhNqF2a96Y3mcBp4tcr%2F9wh599XHi9yMEiUM%2B2hXBFaP1TMVOza9wwZ85UgFbnbZTWXzfq4QnuQcY%2BKp59rwYsxVuP4jAaS39PQz2zB%2B7ovHBbez3SEqcupqJbTK3cQp7mpA14eZPBD1dmXejqjl9ImyjExipTGxWSKY1nAfVE43kPmuXwxrrCDwOgI6gUv8CutrCQk82%2FDgVzX%2FK5ykh1uRbtKSC%2BRH7FQ14R81wkzz4LEVPGDFdRuac6rTCvY1%2BB%2BIJcZHD08%2BmIoBczk6%2B1mJAZR7dnFgpV1r7ak%2FO0K5F4kWDW7JaSgzLSz8Kyb5HKsoSgzxSY3mcBp4tcrwIs2NqGEQfH%2FKtwOs08rHXVb53SsNiJy9Kf8f2oqiOrn6vWahNwYRtsBwpMUtReovXPEkng4GXKPIKJrBn13%2B4eoqYbDxO7oUHJ4AJdEA%2BdLyOq13uE9tzjHVYzUr%2BBxV9ImyjExipTGxWSKY1nAfXOfSMYgKCXH7R5nAXWTQfW%2FjmUOKuSALEPBgnXSvytlnUpsR3ERQXXoudwerTSEljFHNWtxn6ltkivTOre4MMm9ATqsAwubzujwL98nA7DSxvj80Cb8irGOJC26NcVeZvogK9C55VHJoisGM39lPg6Bp3sqC0ENyp3Ch%2BDdw4dGzFcIQhAkBVOza2ylauHAhbmiHSvsquGpEjqhN1Jp8TkYZy%2BE8gBP8HtMt%2FsQhQTnROBRelprGW7sqOXsdpp31C%2FEToQqkYo%2F5BO7OxDOyQl0AHCZn7BilDPazu6X1M1ees%2BFmbIO8etrJnsZq7GkM1mjNu5opnJ%2B7NtWenCWiYYhj604n3786AWClXWvtqT87QrkXiRYNbse8NsljAoHA%2B7CzNRWwNrSlohkoNlD%2BoDuH5iZE%2FPG6itca75%2BH%2F9dyBv4s90zyS98Ow2THv2q4A3PcEJhs%2F8qJVB9%2B7VPOuDrrHXGQ3AgnmIo967fND2IAzq9uzU0U4meh%2F2XTb6Kz4WClXWvtqT86yZ7GauxpDNZozbuaKZyfu0s1xmAplHx7o98BUWHmEopqd8Vwdt70hvVE4sQHz0RcKqQagjrShI5Knps2iydEpE3J7piUzQxc1764t%2B%2FKL109IFp4oz8Umjt18FdyXCIRiCsH57MnovGYPgQzaFL97LHah5NFb%2BPiKr6oSGr%2FVMATjjhTduTyYbFZIpjWcB9UTjeQ%2Ba5fDG5xSQj%2FN8pTfBD1dmXejqjjeEjuMj2eJBqVzqTRQPYPbQ%2B26e8EsGRsUADSLNwlZD6CBjassqky%2Fywbfx9X%2FueNdrAI0lVKK%2F%2BAldSSI7HFVDnO1Id39GEdG18VwQuXOTdmydmwoIUDMNMLSHDBtXppuRsvEmFqg2rJnsZq7GkM1mjNu5opnJ%2By4ig5ve%2B6k%2Br7WYkBlHt2fRXrigBXZLZGouiCOlUOpErXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quANz3BCYbP%2FKhKwtoD098XnFWgPMKSFrwI%2BzodzihoGJEvI6rXe4T23BEgBCQk5%2BcAwahDWZJSzjobFZIpjWcB9YF90OWbKy%2FMg8OietJS6mc4kLbo1xV5mxwC56I4Wb%2FrNiEZsXK%2FEo4i3aqP7o50dfW4qAPaBjeeZujUluKxDnlmjNu5opnJ%2B7NtWenCWiYYJaEy2%2BZrBw7RXrigBXZLZA2qch8ZdexZrXGu%2Bfh%2F%2FXcgb%2BLPdM8kvfDsNkx79quAWwa5BDYYWRSvo8Y8xFrSaac4oN0Nn%2B8X0p%2Fx%2FaiqI6ufq9ZqE3BhG2wHCkxS1F6iad3uk2a0F62QTuzsQzskJZBO7OxDOyQlkE7s7EM7JCUSN31ScoNsF5YxRNnQ%2FVMI%2BcIEn2iiB%2F%2FBD1dmXejqjsGoQ1mSUs46GxWSKY1nAfUm2M8NhcDiySXlpcpukgZ4OJC26NcVeZscAueiOFm%2F66gQngLSMY9MIt2qj%2B6OdHU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUTXXO3LvgzrnV%2FRYPMc7e0O5OQ%2FxsACiA%2Bs7S2nTKRDcUNQlR3YWWwSZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7PktQkY%2Bnkl6G1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8FuKmQhvFG4DurF9rzWH7On6SIUIuzd6myuvxoZ5xYyKO%2FtiIUWVrnJsmjb0F4rZX%2F3oKaxfvXVDu%2FAghfjSgJiZozbuaKZyfuzbVnpwlomGKn6PGwuqTMyFgpV1r7ak%2FO0K5F4kWDW7AFbc5uuyUxdG1LFkBvTxQSY3mcBp4tcrwIs2NqGEQfHLAn8XMJANZVQNkw6CzDgdWr6z8LmDplr7dlLAVk7QLp2euxY9kV8h6%2F0zKbl4fw%2FF58dLAdkI8GX34YKqiwrWQOEPiuqrfjsAOT75QkwzNX75QHrrjeubwAgsF%2FK7hXbVgCDbWwHwvGTzJwSp6a67EmvICAX5exJFgpV1r7ak%2FMZ%2F%2BcVfdAZMGaM27mimcn7s21Z6cJaJhhIElExbhhId6LVf55eqfAacmlCKWNPT4Km3OBoBr3oEtdgpl2cJjtnmN5nAaeLXK8CLNjahhEHx%2FyrcDrNPKx11W%2Bd0rDYicvSn%2FH9qKojq5%2Br1moTcGEbm0IjSYk%2FOvN8eUg5CtN%2BbQSo6BG52zzTvw4Fc1%2FyucqfszJcx9Sv%2FNSuIVmMAzqSwhWDV7k%2FQN5NZzpRspa207JMeWQBZH0pbKE%2FgKf%2BSYHH1f3DVtkxs5MbFVuX3lMsqxeQa5NV9KhUWJo0alHCwTV1HQFkgGgFkE7s7EM7JCWQTuzsQzskJXariUPl9iT%2F4LIYqnSvn9XLTrjsYcMgUS1Kd2tRRBranaw0DIws33avtZiQGUe3ZxYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYYtiShIWke%2Fv%2FORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77oliwz2xgPGMPFGGaM27mimcn7s21Z6cJaJhip%2BjxsLqkzMhYKVda%2B2pPztCuReJFg1uxfgxSMClewmxtSxZAb08UEmN5nAaeLXK8CLNjahhEHxywJ%2FFzCQDWVUDZMOgsw4HVq%2Bs%2FC5g6Za%2B3ZSwFZO0C6dnrsWPZFfIev9Mym5eH8PxefHSwHZCPBu5bOAwP1EwyBLMlKrp1fp%2FDswTDl5qFVcXCv8U7GeITym634BRXkA6usU6%2Fnqg5jUOZIdPRs%2BINJryAgF%2BXsSRYKVda%2B2pPztnhdr6JrxZpmjNu5opnJ%2B7NtWenCWiYY1eoZ2ZK5HELORQtJQyF5J2r6z8LmDplr14%2BmvMViFaFLvH%2BvqN64HaD6FCcnUfPg5LMqg77olizvzyNPNdO0qJR%2FOQ1TYFqIwahDWZJSzjobFZIpjWcB9Y%2FC8bxmk1YMusIPA6AjqBS%2FJr3hSjE%2BohTIpj2ePSTkaDSBSQUfnvmDcyGFXxQAE%2FgJXUkiOxxVQ5ztSHd%2FRhHv06jzAOWM7A6luwUNf6N0JjGmFa0rcVU6Ei2MUtekewBXpwlMhNUtV9h0ELeoXUQU4WuTMc80d9cGBHrI0aGLFV2%2FKDQQGEzgYJr4Vgjt8JBO7OxDOyQlWwXuqwpTWnB%2Fh9MG9zoA%2F87IIUho%2B1gLZd32AL6ZKdrkbmmPUS0N%2BhI3fVJyg2wXljFE2dD9Uwj5wgSfaKIH%2F8EPV2Zd6OqOX0ibKMTGKlMbFZIpjWcB9UTjeQ%2Ba5fDGusIPA6AjqBQ25%2Fvn0R2ABL8OBXNf8rnKSHW5Fu0pIL5EfsVDXhHzXCTPPgsRU8YMDudcscIPRBX4CV1JIjscVU7qQU17KN9Y0bXxXBC5c5MFg2Tpj4CGGKzJswEdRPO6gwILq9KyEGEXhPWJcOZLRSHUDHD47kPhvwV%2B0MuxqNawmlhmv9x7VbGceKfe4fMheh%2F2XTb6Kz4WClXWvtqT8yKibMBsgRKxZozbuaKZyfuzbVnpwlomGCg8bLq7WawkvC5Us2S8yhlq%2Bs%2FC5g6Za9ePprzFYhWhS7x%2Fr6jeuB2g%2BhQnJ1Hz4MRLiBqUqlHbYuSZKmOg3vNs0sDVVyyHcQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/user-manager/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_web-publishing" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${LCMS}/auth-proxy/service/publishing-service/${LCMS_CLIENT}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="redirectURL Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">redirectURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;redirectURL&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaClientToken Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaClientToken</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaClientToken&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sdocUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sdocUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;sdocUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="mediaUrl Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mediaUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;mediaUrl&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userFirstName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userFirstName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userFirstName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userLastName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userLastName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userLastName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userName Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userName&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userEmail Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userEmail</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;userEmail&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="europaAppAddress Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">europaAppAddress</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input name=&apos;europaAppAddress&apos; value=&apos;(.+?)&apos; type=&apos;hidden&apos;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
            <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN_autologin_SPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">redirectURL=${redirectURL}&amp;sdocClientToken=${sdocClientToken}&amp;mediaClientToken=${mediaClientToken}&amp;sdocUrl=${sdocUrl}&amp;mediaUrl=${mediaUrl}&amp;userFirstName=${userFirstName}&amp;userLastName=${userLastName}&amp;userName=${userName}&amp;userEmail=${userEmail}&amp;europaAppAddress=${europaAppAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/autologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="JSESSIONID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">JSESSIONID=(.+?);</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LOGIN_userNameChecker_AUX" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">String userName = vars.get(&quot;userName&quot;);
if (userName == null) {
	vars.put(&quot;userName&quot;, &quot;null&quot;);
}
String jSessionId = vars.get(&quot;JSESSIONID&quot;);
if (jSessionId == null) {
	vars.put(&quot;JSESSIONID&quot;, &quot;null&quot;);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If" enabled="true">
          <stringProp name="IfController.condition">&quot;${userName}&quot; != &quot;null&quot; &amp;&amp; &quot;${JSESSIONID}&quot; != &quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Export_generate_download_AUX" enabled="true">
            <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] Export_generateDownload_values = (int[])vars.getObject(&quot;Export_generateDownload_RANDOM_VALUES&quot;);
if(Export_generateDownload_values==null) {
	Export_generateDownload_values = new int[]{0,1,0,1,0,1,0,1,0,1};
	vars.putObject(&quot;Export_generateDownload_RANDOM_VALUES&quot;,Export_generateDownload_values);
	vars.put(&quot;Export_generateDownload_N_GROUPS&quot;, &quot;&quot; + Export_generateDownload_values.length);
}
Integer Export_generateDownload_increment = (Integer)vars.getObject(&quot;Export_generateDownload_INCREMENT&quot;);
if(Export_generateDownload_increment==null) {
	Export_generateDownload_increment = Integer.valueOf(0);
} else {
	int Export_generateDownload_nGroups = Integer.parseInt(vars.get(&quot;Export_generateDownload_N_GROUPS&quot;));
	Export_generateDownload_increment = Integer.valueOf((Export_generateDownload_increment.intValue()+1) % Export_generateDownload_nGroups);
}
vars.put(&quot;Export_generateDownload_SWITCH_VALUE&quot;, new Integer(Export_generateDownload_values[Export_generateDownload_increment.intValue()]).toString());
vars.putObject(&quot;Export_generateDownload_INCREMENT&quot;, Export_generateDownload_increment);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
            <stringProp name="SwitchController.value">${Export_generateDownload_SWITCH_VALUE}</stringProp>
          </SwitchController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ExportWithDownload" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Export_generate_exportType_AUX" enabled="true">
                <stringProp name="BeanShellSampler.query">/*
 * 0 - bare
 * 1 - typed
 * 2 - roundtrip
 * 3 - backup
 */
int[] Export1_values = (int[])vars.getObject(&quot;Export1_RANDOM_VALUES&quot;);
if(Export1_values==null) {
	Export1_values = new int[]{0,0,1,1,2,2,3,3};
	vars.putObject(&quot;Export1_RANDOM_VALUES&quot;,Export1_values);
	vars.put(&quot;Export1_N_GROUPS&quot;, &quot;&quot; + Export1_values.length);
}
Integer Export1_increment = (Integer)vars.getObject(&quot;Export1_INCREMENT&quot;);
if(Export1_increment==null) {
	Export1_increment = Integer.valueOf(0);
} else {
	int Export1_nGroups = Integer.parseInt(vars.get(&quot;Export1_N_GROUPS&quot;));
	Export1_increment = Integer.valueOf((Export1_increment.intValue()+1) % Export1_nGroups);
}
vars.put(&quot;Export1_SWITCH_VALUE&quot;, new Integer(Export1_values[Export1_increment.intValue()]).toString());
vars.putObject(&quot;Export1_INCREMENT&quot;, Export1_increment);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                <stringProp name="SwitchController.value">${Export1_SWITCH_VALUE}</stringProp>
              </SwitchController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeBare_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;bare&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeTyped_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;typed&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeRoundtrip_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;roundtrip&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeBackup_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;backup&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Export_generate_exportMedia_AUX" enabled="true">
                <stringProp name="BeanShellSampler.query">/*
 * 0 - true
 * 1 - false
 */
int[] Export2_values = (int[])vars.getObject(&quot;Export2_RANDOM_VALUES&quot;);
if(Export2_values==null) {
	Export2_values = new int[]{0,1,0,1,0,1,0,1,0,1};
	vars.putObject(&quot;Export2_RANDOM_VALUES&quot;,Export2_values);
	vars.put(&quot;Export2_N_GROUPS&quot;, &quot;&quot; + Export2_values.length);
}
Integer Export2_increment = (Integer)vars.getObject(&quot;Export2_INCREMENT&quot;);
if(Export2_increment==null) {
	Export2_increment = Integer.valueOf(0);
} else {
	int Export2_nGroups = Integer.parseInt(vars.get(&quot;Export2_N_GROUPS&quot;));
	Export2_increment = Integer.valueOf((Export2_increment.intValue()+1) % Export2_nGroups);
}
vars.put(&quot;Export2_SWITCH_VALUE&quot;, new Integer(Export2_values[Export2_increment.intValue()]).toString());
vars.putObject(&quot;Export2_INCREMENT&quot;, Export2_increment);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                <stringProp name="SwitchController.value">${Export2_SWITCH_VALUE}</stringProp>
              </SwitchController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportMediaTrue_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportMedia&quot;, &quot;true&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportMediaFalse_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportMedia&quot;, &quot;false&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_get_DOCUMENT_PREDEFINED_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">vars.put(&quot;DOCUMENT_GUID&quot;, &quot;${DOCUMENT_TO_EXPORT_GUID}&quot;);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Export_export_${exportType}_exportMedia_${exportMedia}_SPS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}/export/${exportType}/download?exportMedia=${exportMedia}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename"></stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ExportXML" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Export_generate_exportType_AUX" enabled="true">
                <stringProp name="BeanShellSampler.query">/*
 * 0 - bare
 * 1 - typed
 * 2 - roundtrip
 * 3 - backup
 */
int[] Export3_values = (int[])vars.getObject(&quot;Export3_RANDOM_VALUES&quot;);
if(Export3_values==null) {
	Export3_values = new int[]{0,1,2,3};
	vars.putObject(&quot;Export3_RANDOM_VALUES&quot;,Export3_values);
	vars.put(&quot;Export3_N_GROUPS&quot;, &quot;&quot; + Export3_values.length);
}
Integer Export3_increment = (Integer)vars.getObject(&quot;Export3_INCREMENT&quot;);
if(Export3_increment==null) {
	Export3_increment = Integer.valueOf(0);
} else {
	int Export3_nGroups = Integer.parseInt(vars.get(&quot;Export3_N_GROUPS&quot;));
	Export3_increment = Integer.valueOf((Export3_increment.intValue()+1) % Export3_nGroups);
}
vars.put(&quot;Export3_SWITCH_VALUE&quot;, new Integer(Export3_values[Export3_increment.intValue()]).toString());
vars.putObject(&quot;Export3_INCREMENT&quot;, Export3_increment);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch" enabled="true">
                <stringProp name="SwitchController.value">${Export3_SWITCH_VALUE}</stringProp>
              </SwitchController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeBare_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;bare&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeTyped_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;typed&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeRoundtrip_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;roundtrip&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_setExportTypeBackup_AUX" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">vars.put(&quot;exportType&quot;, &quot;backup&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Export_get_DOCUMENT_LCMS_AUX" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.xyleme.sdoc.client.SDocService;
import com.xyleme.sdoc.client.SDocProperties;
import com.xyleme.sdoc.client.FolderInfo;
import com.xyleme.sdoc.client.search.PropertyRangeTerm;
import com.xyleme.sdoc.client.search.SDocQuery;
import com.xyleme.sdoc.client.SDocInfo;
import com.xyleme.sdoc.client.SSConstants;
import com.xyleme.sdoc.client.properties.FragmentProperties;
import java.util.Random;

String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);
String url = vars.get(&quot;LCMS&quot;) + &quot;/sdoc-service/xml&quot;;
String workFolder = vars.get(&quot;WORK_FOLDER&quot;);
SDocService client = SDocService.login(url, username, password);
vars.putObject(&quot;client&quot;, client);
PropertyRangeTerm pt = new PropertyRangeTerm(FragmentProperties.FRAGMENT_ROOT_OF_DOCUMENT, true, true);
SDocQuery sQuery = new SDocQuery(pt, null, null);
//SDocInfo sInfo = client.search(new FolderInfo(), sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
FolderInfo fInfo = client.folderget(new FolderInfo(), workFolder);
SDocInfo sInfo = client.search(fInfo, sQuery, null, SSConstants.GET_PROPS, SSConstants.NO_RESOLVE, false);
int docsCount = sInfo.getGuids().size();
//make 3 attempts to choose the document which is not in ReviewMode
boolean inReview;
vars.put(&quot;inReviewMode&quot;, &quot;false&quot;);
vars.put(&quot;DOCUMENT_GUID&quot;, &quot;null&quot;);
for(int i = 1; i &lt;= 3; i++){
	String guid = sInfo.getGuids().get(new Random().nextInt(docsCount));
	SDocInfo sDocInfo = client.get(guid, null, SSConstants.GET_PROPS, SSConstants.FULL_RESOLVE);
	SDocProperties docProperties = sDocInfo.getProperties(guid);
	inReview = docProperties.getBooleanProperty(FragmentProperties.PROP_IN_REVIEW_3_6) ? true : false;
	vars.put(&quot;DOCUMENT_GUID&quot;, guid);
	if(!inReview) {
		break;
	}
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If DOCUMENT_GUID" enabled="true">
                <stringProp name="IfController.condition">&quot;${__BeanShell(vars.get(&quot;DOCUMENT_GUID&quot;))}&quot; != &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Export_export_${exportType}_SPS" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SPS}/${LCMS_CLIENT}/api/documents/${DOCUMENT_GUID}/export/${exportType}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Throughput" enabled="true">
            <stringProp name="IfController.condition">${MAKE_PAUSE} == true</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PAUSE" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="calculateDelay" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import java.util.Random;
int average = Integer.parseInt(vars.get(&quot;AVG_MS&quot;));
int std = Integer.parseInt(vars.get(&quot;STD_MS&quot;));
Random r = new Random();
double val = r.nextGaussian() * std + average;
int millisDelay = (int) Math.round(val);
if(millisDelay &lt; 0){
	millisDelay = 5000;
}
vars.put(&quot;delay&quot;, &quot;&quot; + millisDelay);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="makePause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${delay}</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1465997697000</longProp>
        <longProp name="ThreadGroup.end_time">1465997697000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="clearProps_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;////////////////////////////SETUP: BEFORE: props.keySet().size()=&quot; + props.keySet().size());
Iterator iter = props.keySet().iterator();
while(iter.hasNext()){
	Object key = iter.next();
	if (key.getClass().toString().endsWith(&quot;java.lang.String&quot;)) {
		String keyString = key.toString();
		if(keyString.endsWith(&quot;_inProgress&quot;)){
			log.info(&quot;PROPS: &quot; + keyString + &quot;=&quot; + props.get(keyString));
			iter.remove();
			log.info(&quot;REMOVED: &quot; + keyString);
		}
	}
}
log.info(&quot;////////////////////////////SETUP: AFTER: props.keySet().size()=&quot; + props.keySet().size());
log.info(&quot;setUp COMPLETED&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PPrController" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${P_PR_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startPPr_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_PPr_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_PPr_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PPrThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_PPr_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">0</stringProp>
                <stringProp name="FifoName">RW_PPr</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_PPr_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">1</stringProp>
                <stringProp name="FifoName">RW_PPr</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PPrThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;P_PR_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPPrThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;P_PR_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPPrThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishPPr_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_PPr_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_PPr_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PPrWorker" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${P_PR_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;PPR_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;P_PR_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_PPr_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_PPr</stringProp>
              <stringProp name="FifoName">RW_PPr</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_PPr&quot;);
if (runWorker != null){
	vars.put(&quot;runWorker_PPr&quot;, runWorker);
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="PPr_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${runWorker_PPr}</stringProp>
            </SwitchController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PPr" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Guide</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Student</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">PPR_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PPr" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SlideDeck(PowerPoint)</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_ProgramSupportMaterials_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">PPR_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;P_PR_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_PPr_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;PPR_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470996250000</longProp>
        <longProp name="ThreadGroup.end_time">1470996250000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="clearProps_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;////////////////////////////TEARDOWN: BEFORE: props.keySet().size()=&quot; + props.keySet().size());
Iterator iter = props.keySet().iterator();
while(iter.hasNext()){
	Object key = iter.next();
	if (key.getClass().toString().endsWith(&quot;java.lang.String&quot;)) {
		String keyString = key.toString();
		if(keyString.endsWith(&quot;_inProgress&quot;)){
			log.info(&quot;PROPS: &quot; + keyString + &quot;=&quot; + props.get(keyString));
			iter.remove();
			log.info(&quot;REMOVED: &quot; + keyString);
		}
	}
}
log.info(&quot;////////////////////////////TEARDOWN: AFTER: props.keySet().size()=&quot; + props.keySet().size());
log.info(&quot;tearDown COMPLETED&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
