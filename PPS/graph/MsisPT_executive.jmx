<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MSIS" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="MACHINES" elementType="Argument">
            <stringProp name="Argument.name">MACHINES</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">msis-perf.qa.xyleme.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APP_PATH" elementType="Argument">
            <stringProp name="Argument.name">APP_PATH</stringProp>
            <stringProp name="Argument.value">MSOfficeIntegration.Web</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ACTION" elementType="Argument">
            <stringProp name="Argument.name">ACTION</stringProp>
            <stringProp name="Argument.value">OfficeOutput</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ACTION_2" elementType="Argument">
            <stringProp name="Argument.name">ACTION_2</stringProp>
            <stringProp name="Argument.value">ReviewOutput/2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUTPUT_FOLDER" elementType="Argument">
            <stringProp name="Argument.name">OUTPUT_FOLDER</stringProp>
            <stringProp name="Argument.value">D:/Xyleme/performance/products/msis/output</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="INITIAL_WAIT_TIME" elementType="Argument">
            <stringProp name="Argument.name">INITIAL_WAIT_TIME</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DURATION_MIN" elementType="Argument">
            <stringProp name="Argument.name">TEST_DURATION_MIN</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="W_PR_CNTRL_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">W_PR_CNTRL_THR_NUM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="W_PR_WRK_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">W_PR_WRK_THR_NUM</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="W_PR_TRANSACTION_PERIOD_MIN" elementType="Argument">
            <stringProp name="Argument.name">W_PR_TRANSACTION_PERIOD_MIN</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="W_PB_CNTRL_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">W_PB_CNTRL_THR_NUM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="W_PB_WRK_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">W_PB_WRK_THR_NUM</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="W_PB_TRANSACTION_PERIOD_MIN" elementType="Argument">
            <stringProp name="Argument.name">W_PB_TRANSACTION_PERIOD_MIN</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_PR_CNTRL_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">P_PR_CNTRL_THR_NUM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_PR_WRK_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">P_PR_WRK_THR_NUM</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_PR_TRANSACTION_PERIOD_MIN" elementType="Argument">
            <stringProp name="Argument.name">P_PR_TRANSACTION_PERIOD_MIN</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_PB_CNTRL_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">P_PB_CNTRL_THR_NUM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_PB_WRK_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">P_PB_WRK_THR_NUM</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_PB_TRANSACTION_PERIOD_MIN" elementType="Argument">
            <stringProp name="Argument.name">P_PB_TRANSACTION_PERIOD_MIN</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REV_CNTRL_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">REV_CNTRL_THR_NUM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REV_WRK_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">REV_WRK_THR_NUM</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REV_TRANSACTION_PERIOD_MIN" elementType="Argument">
            <stringProp name="Argument.name">REV_TRANSACTION_PERIOD_MIN</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMP_CNTRL_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">IMP_CNTRL_THR_NUM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMP_WRK_THR_NUM" elementType="Argument">
            <stringProp name="Argument.name">IMP_WRK_THR_NUM</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IMP_TRANSACTION_PERIOD_MIN" elementType="Argument">
            <stringProp name="Argument.name">IMP_TRANSACTION_PERIOD_MIN</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1465997697000</longProp>
        <longProp name="ThreadGroup.end_time">1465997697000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="clearProps_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;////////////////////////////SETUP: BEFORE: props.keySet().size()=&quot; + props.keySet().size());
Iterator iter = props.keySet().iterator();
while(iter.hasNext()){
	Object key = iter.next();
	if (key.getClass().toString().endsWith(&quot;java.lang.String&quot;)) {
		String keyString = key.toString();
		if(keyString.endsWith(&quot;_inProgress&quot;)){
			log.info(&quot;PROPS: &quot; + keyString + &quot;=&quot; + props.get(keyString));
			iter.remove();
			log.info(&quot;REMOVED: &quot; + keyString);
		}
	}
}
log.info(&quot;////////////////////////////SETUP: AFTER: props.keySet().size()=&quot; + props.keySet().size());
log.info(&quot;setUp COMPLETED&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WPrController" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${W_PR_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startWPr_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_WPr_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_WPr_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WPrThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_WPr_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
              <stringProp name="Value">1</stringProp>
              <stringProp name="FifoName">RW_WPr</stringProp>
            </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WPrThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;W_PR_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkWPrThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;W_PR_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkWPrThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishWPr_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_WPr_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_WPr_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WPrWorker" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${W_PR_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;WPR_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;W_PR_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_WPr_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_WPr</stringProp>
              <stringProp name="FifoName">RW_WPr</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_WPr&quot;);
if (runWorker != null){
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="WPr_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WPr" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="TargetOutput" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Guide</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">TargetOutput</stringProp>
                  </elementProp>
                  <elementProp name="TargetAudience" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Student</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">TargetAudience</stringProp>
                  </elementProp>
                  <elementProp name="OutputFormat" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Docx</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">OutputFormat</stringProp>
                  </elementProp>
                  <elementProp name="SaveFormat" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Original</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SaveFormat</stringProp>
                  </elementProp>
                  <elementProp name="Asynchronous" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Asynchronous</stringProp>
                  </elementProp>
                  <elementProp name="GenerateReport" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">GenerateReport</stringProp>
                  </elementProp>
                  <elementProp name="OutputFileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">OutputFileName</stringProp>
                  </elementProp>
                  <elementProp name="PrintResolution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PrintResolution</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="WORD_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_SourceXmlFile.xml</stringProp>
                    <stringProp name="File.paramname">SourceXmlFile</stringProp>
                    <stringProp name="File.mimetype">text/xml</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                    <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                    <stringProp name="File.mimetype">application/zip</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_OfficeTemplateFile.docx" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_OfficeTemplateFile.docx</stringProp>
                    <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                    <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                    <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                    <stringProp name="File.mimetype">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">WPR_Folder_${__threadNum}/</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">false</boolProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;W_PR_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_WPr_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;WPR_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WPbController" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${W_PB_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startWPb_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_WPb_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_WPb_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WPbThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_WPb_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
              <stringProp name="Value">1</stringProp>
              <stringProp name="FifoName">RW_WPb</stringProp>
            </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WPbThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;W_PB_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkWPbThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;W_PB_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkWPbThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishWPb_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_WPb_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_WPb_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WPbWorker" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${W_PB_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;WPB_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;W_PB_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_WPb_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_WPb</stringProp>
              <stringProp name="FifoName">RW_WPb</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_WPb&quot;);
if (runWorker != null){
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="WPb_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WPb" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="TargetOutput" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Guide</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">TargetOutput</stringProp>
                  </elementProp>
                  <elementProp name="TargetAudience" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Student</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">TargetAudience</stringProp>
                  </elementProp>
                  <elementProp name="OutputFormat" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Docx</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">OutputFormat</stringProp>
                  </elementProp>
                  <elementProp name="SaveFormat" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Original</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SaveFormat</stringProp>
                  </elementProp>
                  <elementProp name="Asynchronous" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Asynchronous</stringProp>
                  </elementProp>
                  <elementProp name="GenerateReport" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">GenerateReport</stringProp>
                  </elementProp>
                  <elementProp name="OutputFileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">OutputFileName</stringProp>
                  </elementProp>
                  <elementProp name="PrintResolution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PrintResolution</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="WORD_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_SourceXmlFile.xml</stringProp>
                    <stringProp name="File.paramname">SourceXmlFile</stringProp>
                    <stringProp name="File.mimetype">text/xml</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                    <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                    <stringProp name="File.mimetype">application/zip</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_OfficeTemplateFile.docx" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_OfficeTemplateFile.docx</stringProp>
                    <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                    <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                  </elementProp>
                  <elementProp name="WORD_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                    <stringProp name="File.path">WORD_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                    <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                    <stringProp name="File.mimetype">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">WPB_Folder_${__threadNum}/</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">false</boolProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;W_PB_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_WPb_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;WPB_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PPrController" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${P_PR_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startPPr_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_PPr_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_PPr_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PPrThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_PPr_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">0</stringProp>
                <stringProp name="FifoName">RW_PPr</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_PPr_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">1</stringProp>
                <stringProp name="FifoName">RW_PPr</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PPrThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;P_PR_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPPrThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;P_PR_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPPrThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishPPr_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_PPr_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_PPr_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PPrWorker" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${P_PR_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;PPR_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;P_PR_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_PPr_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_PPr</stringProp>
              <stringProp name="FifoName">RW_PPr</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_PPr&quot;);
if (runWorker != null){
	vars.put(&quot;runWorker_PPr&quot;, runWorker);
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="PPr_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${runWorker_PPr}</stringProp>
            </SwitchController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PPr" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Guide</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Student</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">PPR_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PPr" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SlideDeck(PowerPoint)</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_ProgramSupportMaterials_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">PPR_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;P_PR_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_PPr_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;PPR_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PPbController" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${P_PB_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startPPb_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_PPb_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_PPb_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PPbThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_PPb_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">0</stringProp>
                <stringProp name="FifoName">RW_PPb</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_PPb_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">1</stringProp>
                <stringProp name="FifoName">RW_PPb</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PPbThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;P_PB_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPPbThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;P_PB_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPPbThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishPPb_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_PPb_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_PPb_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PPbWorker" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${P_PB_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;PPB_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;P_PB_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_PPb_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_PPb</stringProp>
              <stringProp name="FifoName">RW_PPb</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_PPb&quot;);
if (runWorker != null){
	vars.put(&quot;runWorker_PPb&quot;, runWorker);
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="PPb_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${runWorker_PPb}</stringProp>
            </SwitchController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PPb" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Guide</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Student</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">PPB_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PPb" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SlideDeck(PowerPoint)</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_ProgramSupportMaterials_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">PPB_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;P_PB_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_PPb_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;PPB_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ReviewController" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${REV_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startRev_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_review_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_review_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RevThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_review_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">0</stringProp>
                <stringProp name="FifoName">RW_review</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_review_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">1</stringProp>
                <stringProp name="FifoName">RW_review</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_review_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">2</stringProp>
                <stringProp name="FifoName">RW_review</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ReviewThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;REV_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkReviewThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;REV_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkReviewThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishRev_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_review_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_review_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ReviewWorker" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${REV_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;REVIEW_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;REV_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_review_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_review</stringProp>
              <stringProp name="FifoName">RW_review</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_review&quot;);
if (runWorker != null){
	vars.put(&quot;runWorker_review&quot;, runWorker);
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Review_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${runWorker_review}</stringProp>
            </SwitchController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WReview" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Guide</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Student</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Docx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION_2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="WORD_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">WORD_OurSolarSystem_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="WORD_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">WORD_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="WORD_OurSolarSystem_OfficeTemplateFile.docx" elementType="HTTPFileArg">
                      <stringProp name="File.path">WORD_OurSolarSystem_OfficeTemplateFile.docx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    </elementProp>
                    <elementProp name="WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="WORD_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">WORD_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">REVIEW_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PReview" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Guide</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Student</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION_2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                    <elementProp name="PPT_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">REVIEW_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PReview" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TargetOutput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SlideDeck(PowerPoint)</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetOutput</stringProp>
                    </elementProp>
                    <elementProp name="TargetAudience" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TargetAudience</stringProp>
                    </elementProp>
                    <elementProp name="OutputFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Pptx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFormat</stringProp>
                    </elementProp>
                    <elementProp name="SaveFormat" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Original</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SaveFormat</stringProp>
                    </elementProp>
                    <elementProp name="Asynchronous" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Asynchronous</stringProp>
                    </elementProp>
                    <elementProp name="GenerateReport" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GenerateReport</stringProp>
                    </elementProp>
                    <elementProp name="OutputFileName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OutputFileName</stringProp>
                    </elementProp>
                    <elementProp name="PrintResolution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PrintResolution</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/${ACTION_2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PPT_ProgramSupportMaterials_SourceXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_SourceXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">SourceXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_MediaArchiveFile.zip" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_MediaArchiveFile.zip</stringProp>
                      <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                      <stringProp name="File.mimetype">application/zip</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx</stringProp>
                      <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    </elementProp>
                    <elementProp name="PPT_ProgramSupportMaterials_ProfileXmlFile.xml" elementType="HTTPFileArg">
                      <stringProp name="File.path">PPT_ProgramSupportMaterials_ProfileXmlFile.xml</stringProp>
                      <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                      <stringProp name="File.mimetype">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">REVIEW_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;REV_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_review_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;REVIEW_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ImportController" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${IMP_CNTRL_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470929903000</longProp>
        <longProp name="ThreadGroup.end_time">1470929903000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="startImp_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_import_inProgress&quot;);
	if(inProgress == null){
		props.put(threadNum + &quot;_import_inProgress&quot;, true);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImpThrStarted_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = System.currentTimeMillis();
vars.put(&quot;threadStartedAt&quot;, threadStartedAt.toString());
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While continueTest=TRUE" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;continueTest&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_import_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">0</stringProp>
                <stringProp name="FifoName">RW_import</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_import_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">1</stringProp>
                <stringProp name="FifoName">RW_import</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="runWrk_import_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <kg.apc.jmeter.modifiers.FifoPutPostProcessor guiclass="kg.apc.jmeter.modifiers.FifoPutPostProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPutPostProcessor" testname="putGreenLight" enabled="true">
                <stringProp name="Value">2</stringProp>
                <stringProp name="FifoName">RW_import</stringProp>
              </kg.apc.jmeter.modifiers.FifoPutPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ImportThrCurRun_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = System.currentTimeMillis();
vars.put(&quot;threadCurrentRunAt&quot;, threadCurrentRunAt.toString());
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;IMP_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While wait=TRUE" enabled="true">
            <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;wait&quot;))}</stringProp>
          </WhileController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">500</stringProp>
            </TestAction>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkImportThrCurRun_" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">vars.putObject(&quot;wait&quot;, false);
long threadCurrentRunAt = Long.parseLong(vars.get(&quot;threadCurrentRunAt&quot;));
int transactionPeriodMs = Integer.parseInt(vars.get(&quot;IMP_TRANSACTION_PERIOD_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadCurrentRunAt) &lt; transactionPeriodMs){
	vars.putObject(&quot;wait&quot;, true);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkImportThrStarted_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;continueTest&quot;, false);
long threadStartedAt = Long.parseLong(vars.get(&quot;threadStartedAt&quot;));
int testDurationMs = Integer.parseInt(vars.get(&quot;TEST_DURATION_MIN&quot;)) * 60 * 1000;
long currentTime = System.currentTimeMillis();
if((currentTime - threadStartedAt) &lt; testDurationMs){
	vars.putObject(&quot;continueTest&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="finalWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="finishImp_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int threadNum = ${__threadNum};
synchronized(props) {
	Boolean inProgress = props.get(threadNum + &quot;_import_inProgress&quot;);
	if(inProgress != null){
		props.put(threadNum + &quot;_import_inProgress&quot;, false);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ImportWorker" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${IMP_WRK_THR_NUM}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1447231498000</longProp>
        <longProp name="ThreadGroup.end_time">1447231498000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="initWait" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${INITIAL_WAIT_TIME}</stringProp>
        </TestAction>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="createFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
File dir = new File(&quot;IMPORT_Folder_${__threadNum}&quot;);
boolean successful = dir.mkdir();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;IMP_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_import_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller is Active" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.getObject(&quot;keepWorkersAlive&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="waitFor_" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <kg.apc.jmeter.modifiers.FifoPopPreProcessor guiclass="kg.apc.jmeter.modifiers.FifoPopPreProcessorGui" testclass="kg.apc.jmeter.modifiers.FifoPopPreProcessor" testname="getGreenLight" enabled="true">
              <stringProp name="Timeout">180</stringProp>
              <stringProp name="Variable">runWorker_import</stringProp>
              <stringProp name="FifoName">RW_import</stringProp>
            </kg.apc.jmeter.modifiers.FifoPopPreProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkPresence_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">vars.putObject(&quot;startWorker&quot;, false);
String runWorker = vars.get(&quot;runWorker_import&quot;);
if (runWorker != null){
	vars.put(&quot;runWorker_import&quot;, runWorker);
	vars.putObject(&quot;startWorker&quot;, true);
}
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If startWorker = TRUE" enabled="true">
            <stringProp name="IfController.condition">${__BeanShell(vars.getObject(&quot;startWorker&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Import_startMrk_" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">1</stringProp>
              <stringProp name="LATENCY">1</stringProp>
              <stringProp name="CONNECT">1</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${runWorker_import}</stringProp>
            </SwitchController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WImport" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="DisableDefaultXSLPostProcessing" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">DisableDefaultXSLPostProcessing</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/OfficeImport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="Our Solar System - Student Guide.docx" elementType="HTTPFileArg">
                      <stringProp name="File.path">Our Solar System - Student Guide.docx</stringProp>
                      <stringProp name="File.paramname">SourceOfficeFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">IMPORT_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PImport" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="DisableDefaultXSLPostProcessing" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">DisableDefaultXSLPostProcessing</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/OfficeImport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="Our Solar System - Student Guide.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">Our Solar System - Student Guide.pptx</stringProp>
                      <stringProp name="File.paramname">SourceOfficeFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">IMPORT_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PImport" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="DisableDefaultXSLPostProcessing" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">DisableDefaultXSLPostProcessing</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__Random(1,1000)}/OfficeImport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="PSM.pptx" elementType="HTTPFileArg">
                      <stringProp name="File.path">PSM.pptx</stringProp>
                      <stringProp name="File.paramname">SourceOfficeFile</stringProp>
                      <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">IMPORT_Folder_${__threadNum}/</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="checkProgressStatus_" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">int numberOfThreadsInController = Integer.parseInt(vars.get(&quot;IMP_CNTRL_THR_NUM&quot;));
vars.putObject(&quot;keepWorkersAlive&quot;, false);
synchronized(props) {
	for(int i = 1; i &lt;= numberOfThreadsInController; i++){
		Boolean inProgress = props.get(i + &quot;_import_inProgress&quot;);
		if(inProgress != null &amp;&amp; inProgress.booleanValue()){
			vars.putObject(&quot;keepWorkersAlive&quot;, true);
			break;
		}
	}
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="clearFolder_" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.commons.io.FileUtils;
File dir = new File(&quot;IMPORT_Folder_${__threadNum}&quot;);
FileUtils.cleanDirectory(dir); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470996250000</longProp>
        <longProp name="ThreadGroup.end_time">1470996250000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="clearProps_AUX" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;////////////////////////////TEARDOWN: BEFORE: props.keySet().size()=&quot; + props.keySet().size());
Iterator iter = props.keySet().iterator();
while(iter.hasNext()){
	Object key = iter.next();
	if (key.getClass().toString().endsWith(&quot;java.lang.String&quot;)) {
		String keyString = key.toString();
		if(keyString.endsWith(&quot;_inProgress&quot;)){
			log.info(&quot;PROPS: &quot; + keyString + &quot;=&quot; + props.get(keyString));
			iter.remove();
			log.info(&quot;REMOVED: &quot; + keyString);
		}
	}
}
log.info(&quot;////////////////////////////TEARDOWN: AFTER: props.keySet().size()=&quot; + props.keySet().size());
log.info(&quot;tearDown COMPLETED&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1471862434000</longProp>
        <longProp name="ThreadGroup.end_time">1471862434000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="sharedSecret" elementType="Cookie" testname="sharedSecret">
              <stringProp name="Cookie.value">JijX5d5qZCRa49axgKBMBKDTkNknWaKdhfS1wCesYA40C9ibjgGB4CjglKUN7qqOotprS9pxBQvNqxcPdiRVg</stringProp>
              <stringProp name="Cookie.domain">msis-perf.qa.xyleme.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WPr" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="TargetOutput" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Guide</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetOutput</stringProp>
              </elementProp>
              <elementProp name="TargetAudience" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Student</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetAudience</stringProp>
              </elementProp>
              <elementProp name="OutputFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Docx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFormat</stringProp>
              </elementProp>
              <elementProp name="SaveFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Original</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SaveFormat</stringProp>
              </elementProp>
              <elementProp name="Asynchronous" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Asynchronous</stringProp>
              </elementProp>
              <elementProp name="GenerateReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">GenerateReport</stringProp>
              </elementProp>
              <elementProp name="OutputFileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFileName</stringProp>
              </elementProp>
              <elementProp name="PrintResolution" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PrintResolution</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/${ACTION}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="WORD_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_SourceXmlFile.xml</stringProp>
                <stringProp name="File.paramname">SourceXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_OfficeTemplateFile.docx" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_OfficeTemplateFile.docx</stringProp>
                <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PPr" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="TargetOutput" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Guide</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetOutput</stringProp>
              </elementProp>
              <elementProp name="TargetAudience" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Student</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetAudience</stringProp>
              </elementProp>
              <elementProp name="OutputFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Pptx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFormat</stringProp>
              </elementProp>
              <elementProp name="SaveFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Original</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SaveFormat</stringProp>
              </elementProp>
              <elementProp name="Asynchronous" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Asynchronous</stringProp>
              </elementProp>
              <elementProp name="GenerateReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">GenerateReport</stringProp>
              </elementProp>
              <elementProp name="OutputFileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFileName</stringProp>
              </elementProp>
              <elementProp name="PrintResolution" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PrintResolution</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/${ACTION}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="PPT_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_SourceXmlFile.xml</stringProp>
                <stringProp name="File.paramname">SourceXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_OfficeTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PPr" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="TargetOutput" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">SlideDeck(PowerPoint)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetOutput</stringProp>
              </elementProp>
              <elementProp name="TargetAudience" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetAudience</stringProp>
              </elementProp>
              <elementProp name="OutputFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Pptx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFormat</stringProp>
              </elementProp>
              <elementProp name="SaveFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Original</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SaveFormat</stringProp>
              </elementProp>
              <elementProp name="Asynchronous" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Asynchronous</stringProp>
              </elementProp>
              <elementProp name="GenerateReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">GenerateReport</stringProp>
              </elementProp>
              <elementProp name="OutputFileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFileName</stringProp>
              </elementProp>
              <elementProp name="PrintResolution" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PrintResolution</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/${ACTION}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="PPT_ProgramSupportMaterials_SourceXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_SourceXmlFile.xml</stringProp>
                <stringProp name="File.paramname">SourceXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
              <elementProp name="PPT_ProgramSupportMaterials_MediaArchiveFile.zip" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_MediaArchiveFile.zip</stringProp>
                <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
              <elementProp name="PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
              </elementProp>
              <elementProp name="PPT_ProgramSupportMaterials_ProfileXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_ProfileXmlFile.xml</stringProp>
                <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WReview" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="TargetOutput" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Guide</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetOutput</stringProp>
              </elementProp>
              <elementProp name="TargetAudience" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Student</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetAudience</stringProp>
              </elementProp>
              <elementProp name="OutputFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Docx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFormat</stringProp>
              </elementProp>
              <elementProp name="SaveFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Original</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SaveFormat</stringProp>
              </elementProp>
              <elementProp name="Asynchronous" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Asynchronous</stringProp>
              </elementProp>
              <elementProp name="GenerateReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">GenerateReport</stringProp>
              </elementProp>
              <elementProp name="OutputFileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFileName</stringProp>
              </elementProp>
              <elementProp name="PrintResolution" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PrintResolution</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/${ACTION_2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="WORD_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_SourceXmlFile.xml</stringProp>
                <stringProp name="File.paramname">SourceXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_OfficeTemplateFile.docx" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_OfficeTemplateFile.docx</stringProp>
                <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
              <elementProp name="WORD_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">WORD_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PReview" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="TargetOutput" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Guide</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetOutput</stringProp>
              </elementProp>
              <elementProp name="TargetAudience" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Student</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetAudience</stringProp>
              </elementProp>
              <elementProp name="OutputFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Pptx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFormat</stringProp>
              </elementProp>
              <elementProp name="SaveFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Original</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SaveFormat</stringProp>
              </elementProp>
              <elementProp name="Asynchronous" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Asynchronous</stringProp>
              </elementProp>
              <elementProp name="GenerateReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">GenerateReport</stringProp>
              </elementProp>
              <elementProp name="OutputFileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFileName</stringProp>
              </elementProp>
              <elementProp name="PrintResolution" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PrintResolution</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/${ACTION_2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="PPT_OurSolarSystem_SourceXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_SourceXmlFile.xml</stringProp>
                <stringProp name="File.paramname">SourceXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_MediaArchiveFile.zip" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_MediaArchiveFile.zip</stringProp>
                <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_OfficeTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_SlideThumbnailsTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">SlideThumbnailsTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
              <elementProp name="PPT_OurSolarSystem_ProfileXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_OurSolarSystem_ProfileXmlFile.xml</stringProp>
                <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PReview" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="TargetOutput" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">SlideDeck(PowerPoint)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetOutput</stringProp>
              </elementProp>
              <elementProp name="TargetAudience" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">TargetAudience</stringProp>
              </elementProp>
              <elementProp name="OutputFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Pptx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFormat</stringProp>
              </elementProp>
              <elementProp name="SaveFormat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Original</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SaveFormat</stringProp>
              </elementProp>
              <elementProp name="Asynchronous" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Asynchronous</stringProp>
              </elementProp>
              <elementProp name="GenerateReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">GenerateReport</stringProp>
              </elementProp>
              <elementProp name="OutputFileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">OutputFileName</stringProp>
              </elementProp>
              <elementProp name="PrintResolution" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PrintResolution</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/${ACTION_2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="PPT_ProgramSupportMaterials_SourceXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_SourceXmlFile.xml</stringProp>
                <stringProp name="File.paramname">SourceXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
              <elementProp name="PPT_ProgramSupportMaterials_MediaArchiveFile.zip" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_MediaArchiveFile.zip</stringProp>
                <stringProp name="File.paramname">MediaArchiveFile</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
              <elementProp name="PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_OfficeTemplateFile.pptx</stringProp>
                <stringProp name="File.paramname">OfficeTemplateFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
              </elementProp>
              <elementProp name="PPT_ProgramSupportMaterials_ProfileXmlFile.xml" elementType="HTTPFileArg">
                <stringProp name="File.path">PPT_ProgramSupportMaterials_ProfileXmlFile.xml</stringProp>
                <stringProp name="File.paramname">ProfileXmlFile</stringProp>
                <stringProp name="File.mimetype">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_WImport" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DisableDefaultXSLPostProcessing" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">DisableDefaultXSLPostProcessing</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/OfficeImport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="Our Solar System - Student Guide.docx" elementType="HTTPFileArg">
                <stringProp name="File.path">Our Solar System - Student Guide.docx</stringProp>
                <stringProp name="File.paramname">SourceOfficeFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OSS_PImport" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DisableDefaultXSLPostProcessing" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">DisableDefaultXSLPostProcessing</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/OfficeImport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="Our Solar System - Student Guide.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">Our Solar System - Student Guide.pptx</stringProp>
                <stringProp name="File.paramname">SourceOfficeFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM_PImport" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DisableDefaultXSLPostProcessing" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">DisableDefaultXSLPostProcessing</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${APP_PATH}/customer_${__threadNum}/OfficeImport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="PSM.pptx" elementType="HTTPFileArg">
                <stringProp name="File.path">PSM.pptx</stringProp>
                <stringProp name="File.paramname">SourceOfficeFile</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.presentationml.presentation</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${OUTPUT_FOLDER}/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
